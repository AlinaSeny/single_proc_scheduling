Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_tr/order/triang9_4_tiers_input.lp sec 1800 solve solu solutions/new_tr/triang9_4_tiers_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 300 - 0.68 seconds
Cgl0002I 1201 variables fixed
Cgl0003I 0 fixed, 1 tightened bounds, 1050 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 48 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0004I processed model has 4317 rows, 1490 columns (1490 integer (1445 of which binary)) and 13969 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1490 objects (1490 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 790 integers unsatisfied sum - 158.937
Cbc0038I Pass   1: (2.41 seconds) suminf.   98.41943 (731) obj. 369.747 iterations 1476
Cbc0038I Pass   2: (2.51 seconds) suminf.   94.41933 (743) obj. 371.744 iterations 310
Cbc0038I Pass   3: (2.59 seconds) suminf.   96.06358 (753) obj. 361.473 iterations 204
Cbc0038I Pass   4: (2.63 seconds) suminf.   93.27824 (759) obj. 361.677 iterations 103
Cbc0038I Pass   5: (2.65 seconds) suminf.   91.86996 (759) obj. 361.314 iterations 58
Cbc0038I Pass   6: (2.69 seconds) suminf.   88.07742 (750) obj. 363.363 iterations 97
Cbc0038I Pass   7: (2.73 seconds) suminf.   86.79989 (742) obj. 363.235 iterations 79
Cbc0038I Pass   8: (2.76 seconds) suminf.   86.54984 (745) obj. 362.324 iterations 82
Cbc0038I Pass   9: (2.86 seconds) suminf.   84.97604 (738) obj. 412.684 iterations 292
Cbc0038I Pass  10: (2.92 seconds) suminf.   85.55478 (736) obj. 411.483 iterations 147
Cbc0038I Pass  11: (2.95 seconds) suminf.   83.71441 (725) obj. 407.21 iterations 89
Cbc0038I Pass  12: (2.97 seconds) suminf.   84.05510 (728) obj. 407.337 iterations 39
Cbc0038I Pass  13: (3.05 seconds) suminf.   79.69154 (750) obj. 403.766 iterations 218
Cbc0038I Pass  14: (3.11 seconds) suminf.   80.35740 (724) obj. 401.535 iterations 144
Cbc0038I Pass  15: (3.13 seconds) suminf.   79.89066 (727) obj. 397.745 iterations 61
Cbc0038I Pass  16: (3.19 seconds) suminf.   78.25516 (722) obj. 394.368 iterations 132
Cbc0038I Pass  17: (3.20 seconds) suminf.   77.88928 (725) obj. 394.458 iterations 16
Cbc0038I Pass  18: (3.28 seconds) suminf.   72.82949 (726) obj. 361.665 iterations 281
Cbc0038I Pass  19: (3.33 seconds) suminf.   73.66816 (724) obj. 359.793 iterations 113
Cbc0038I Pass  20: (3.40 seconds) suminf.   70.48935 (737) obj. 357.916 iterations 188
Cbc0038I Pass  21: (3.42 seconds) suminf.   72.17878 (739) obj. 357.924 iterations 41
Cbc0038I Pass  22: (3.42 seconds) suminf.   72.16982 (738) obj. 357.924 iterations 4
Cbc0038I Pass  23: (3.52 seconds) suminf.   66.55950 (734) obj. 358.795 iterations 316
Cbc0038I Pass  24: (3.57 seconds) suminf.   67.58483 (734) obj. 358.095 iterations 128
Cbc0038I Pass  25: (3.65 seconds) suminf.   66.44904 (742) obj. 358.348 iterations 258
Cbc0038I Pass  26: (3.70 seconds) suminf.   66.52985 (741) obj. 358.345 iterations 134
Cbc0038I Pass  27: (3.83 seconds) suminf.   61.17755 (730) obj. 358.163 iterations 452
Cbc0038I Pass  28: (3.90 seconds) suminf.   61.16588 (743) obj. 358.345 iterations 196
Cbc0038I Pass  29: (3.99 seconds) suminf.   65.40024 (754) obj. 368.375 iterations 288
Cbc0038I Pass  30: (4.03 seconds) suminf.   61.39400 (765) obj. 376.169 iterations 107
Cbc0038I Pass  31: (4.08 seconds) suminf.   59.97220 (761) obj. 374.248 iterations 99
Cbc0038I Pass  32: (4.17 seconds) suminf.   62.99225 (786) obj. 382.47 iterations 262
Cbc0038I Pass  33: (4.19 seconds) suminf.   62.20269 (779) obj. 383.087 iterations 45
Cbc0038I Pass  34: (4.28 seconds) suminf.   63.90884 (725) obj. 358.413 iterations 280
Cbc0038I Pass  35: (4.35 seconds) suminf.   61.85388 (756) obj. 366.876 iterations 183
Cbc0038I Pass  36: (4.44 seconds) suminf.   56.04042 (776) obj. 381.464 iterations 274
Cbc0038I Pass  37: (4.45 seconds) suminf.   56.51173 (775) obj. 381.171 iterations 9
Cbc0038I Pass  38: (4.54 seconds) suminf.   57.69162 (755) obj. 358.195 iterations 271
Cbc0038I Pass  39: (4.59 seconds) suminf.   55.50972 (749) obj. 358.838 iterations 114
Cbc0038I Pass  40: (4.66 seconds) suminf.   59.13150 (745) obj. 375.566 iterations 210
Cbc0038I Pass  41: (4.73 seconds) suminf.   58.95386 (752) obj. 392.216 iterations 208
Cbc0038I Pass  42: (4.81 seconds) suminf.   58.44061 (736) obj. 383.259 iterations 221
Cbc0038I Pass  43: (4.84 seconds) suminf.   58.66251 (741) obj. 364.258 iterations 80
Cbc0038I Pass  44: (4.94 seconds) suminf.   64.59879 (745) obj. 366.112 iterations 286
Cbc0038I Pass  45: (5.00 seconds) suminf.   59.93285 (751) obj. 367.069 iterations 190
Cbc0038I Pass  46: (5.11 seconds) suminf.   61.38162 (755) obj. 366.106 iterations 330
Cbc0038I Pass  47: (5.17 seconds) suminf.   59.80798 (748) obj. 366.396 iterations 172
Cbc0038I Pass  48: (5.19 seconds) suminf.   59.64140 (750) obj. 366.642 iterations 55
Cbc0038I Pass  49: (5.30 seconds) suminf.   61.09701 (725) obj. 380.691 iterations 329
Cbc0038I Pass  50: (5.39 seconds) suminf.   58.98660 (764) obj. 393.391 iterations 298
Cbc0038I Pass  51: (5.46 seconds) suminf.   57.67162 (764) obj. 387.602 iterations 194
Cbc0038I Pass  52: (5.59 seconds) suminf.   60.83324 (707) obj. 384.704 iterations 442
Cbc0038I Pass  53: (5.66 seconds) suminf.   58.43034 (736) obj. 396.02 iterations 186
Cbc0038I Pass  54: (5.67 seconds) suminf.   58.45103 (732) obj. 395.826 iterations 15
Cbc0038I Pass  55: (5.76 seconds) suminf.   62.02689 (726) obj. 384.465 iterations 305
Cbc0038I Pass  56: (5.82 seconds) suminf.   59.76331 (728) obj. 379.432 iterations 151
Cbc0038I Pass  57: (5.86 seconds) suminf.   60.05349 (730) obj. 378.356 iterations 87
Cbc0038I Pass  58: (5.95 seconds) suminf.   61.49870 (690) obj. 374.616 iterations 274
Cbc0038I Pass  59: (6.01 seconds) suminf.   59.27489 (686) obj. 379.605 iterations 168
Cbc0038I Pass  60: (6.08 seconds) suminf.   60.37648 (673) obj. 376.659 iterations 221
Cbc0038I Pass  61: (6.15 seconds) suminf.   59.46543 (684) obj. 381.047 iterations 155
Cbc0038I Pass  62: (6.23 seconds) suminf.   58.74249 (699) obj. 377.438 iterations 274
Cbc0038I Pass  63: (6.31 seconds) suminf.   57.87309 (700) obj. 381.273 iterations 235
Cbc0038I Pass  64: (6.40 seconds) suminf.   61.37929 (690) obj. 380.731 iterations 279
Cbc0038I Pass  65: (6.44 seconds) suminf.   60.04408 (702) obj. 383.285 iterations 86
Cbc0038I Pass  66: (6.48 seconds) suminf.   58.22147 (685) obj. 383.644 iterations 102
Cbc0038I Pass  67: (6.56 seconds) suminf.   60.31747 (697) obj. 381.667 iterations 243
Cbc0038I Pass  68: (6.58 seconds) suminf.   60.29868 (703) obj. 383.037 iterations 55
Cbc0038I Pass  69: (6.64 seconds) suminf.   58.26668 (698) obj. 382.972 iterations 146
Cbc0038I Pass  70: (6.73 seconds) suminf.   58.32171 (688) obj. 380.899 iterations 305
Cbc0038I Pass  71: (6.80 seconds) suminf.   57.89959 (707) obj. 384.247 iterations 173
Cbc0038I Pass  72: (6.90 seconds) suminf.   58.68364 (663) obj. 380.704 iterations 335
Cbc0038I Pass  73: (6.95 seconds) suminf.   57.00038 (690) obj. 374.106 iterations 146
Cbc0038I Pass  74: (7.05 seconds) suminf.   54.90300 (700) obj. 397.768 iterations 330
Cbc0038I Pass  75: (7.07 seconds) suminf.   55.79968 (699) obj. 399.578 iterations 51
Cbc0038I Pass  76: (7.12 seconds) suminf.   55.35864 (680) obj. 405.667 iterations 144
Cbc0038I Pass  77: (7.22 seconds) suminf.   56.73859 (676) obj. 366.209 iterations 342
Cbc0038I Pass  78: (7.29 seconds) suminf.   58.45050 (691) obj. 374.532 iterations 193
Cbc0038I Pass  79: (7.38 seconds) suminf.   58.84102 (700) obj. 394.51 iterations 278
Cbc0038I Pass  80: (7.45 seconds) suminf.   53.93463 (690) obj. 403.873 iterations 197
Cbc0038I Pass  81: (7.53 seconds) suminf.   55.64300 (681) obj. 391.473 iterations 240
Cbc0038I Pass  82: (7.56 seconds) suminf.   55.29371 (688) obj. 402.544 iterations 82
Cbc0038I Pass  83: (7.65 seconds) suminf.   59.58138 (679) obj. 377.544 iterations 288
Cbc0038I Pass  84: (7.71 seconds) suminf.   53.55252 (684) obj. 380.894 iterations 147
Cbc0038I Pass  85: (7.79 seconds) suminf.   57.12179 (677) obj. 382.086 iterations 250
Cbc0038I Pass  86: (7.83 seconds) suminf.   56.53870 (691) obj. 375.681 iterations 111
Cbc0038I Pass  87: (7.93 seconds) suminf.   57.60729 (688) obj. 398.79 iterations 332
Cbc0038I Pass  88: (7.99 seconds) suminf.   56.95259 (674) obj. 404.517 iterations 153
Cbc0038I Pass  89: (8.12 seconds) suminf.   58.76943 (677) obj. 370.891 iterations 461
Cbc0038I Pass  90: (8.17 seconds) suminf.   58.21377 (680) obj. 376.914 iterations 139
Cbc0038I Pass  91: (8.19 seconds) suminf.   57.53440 (683) obj. 380.24 iterations 60
Cbc0038I Pass  92: (8.23 seconds) suminf.   57.25048 (687) obj. 380.155 iterations 93
Cbc0038I Pass  93: (8.30 seconds) suminf.   55.92681 (687) obj. 390.846 iterations 238
Cbc0038I Pass  94: (8.36 seconds) suminf.   53.97539 (693) obj. 379.256 iterations 152
Cbc0038I Pass  95: (8.45 seconds) suminf.   56.70272 (682) obj. 392.229 iterations 282
Cbc0038I Pass  96: (8.52 seconds) suminf.   56.32592 (689) obj. 402.136 iterations 213
Cbc0038I Pass  97: (8.61 seconds) suminf.   55.16684 (693) obj. 381.129 iterations 270
Cbc0038I Pass  98: (8.66 seconds) suminf.   52.67701 (702) obj. 390.254 iterations 122
Cbc0038I Pass  99: (8.68 seconds) suminf.   53.58938 (697) obj. 401.515 iterations 67
Cbc0038I Pass 100: (8.95 seconds) suminf.  116.77361 (745) obj. 454.642 iterations 1065
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 247 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4317 rows 1490 columns, reduced to 3490 rows 1183 columns - too large
Cbc0038I Mini branch and bound did not improve solution (9.51 seconds)
Cbc0038I After 9.51 seconds - Feasibility pump exiting - took 7.50 seconds
Cbc0031I 28 added rows had average density of 117.92857
Cbc0013I At root node, 28 cuts changed objective from 300 to 300 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 14 row cuts average 2.3 elements, 0 column cuts (0 active)  in 0.105 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 73 row cuts average 867.9 elements, 0 column cuts (0 active)  in 0.756 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 33 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 43 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.271 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 300 (15.51 seconds)
Cbc0010I After 100 nodes, 16 on tree, 1e+50 best solution, best possible 300 (84.65 seconds)
Cbc0010I After 200 nodes, 11 on tree, 1e+50 best solution, best possible 300 (138.04 seconds)
Cbc0010I After 300 nodes, 21 on tree, 1e+50 best solution, best possible 300 (207.07 seconds)
Cbc0010I After 400 nodes, 32 on tree, 1e+50 best solution, best possible 300 (270.44 seconds)
Cbc0010I After 500 nodes, 28 on tree, 1e+50 best solution, best possible 300 (345.83 seconds)
Cbc0010I After 600 nodes, 26 on tree, 1e+50 best solution, best possible 300 (422.75 seconds)
Cbc0010I After 700 nodes, 21 on tree, 1e+50 best solution, best possible 300 (479.26 seconds)
Cbc0010I After 800 nodes, 27 on tree, 1e+50 best solution, best possible 300 (534.72 seconds)
Cbc0010I After 900 nodes, 30 on tree, 1e+50 best solution, best possible 300 (583.88 seconds)
Cbc0010I After 1000 nodes, 34 on tree, 1e+50 best solution, best possible 300 (632.75 seconds)
Cbc0010I After 1100 nodes, 38 on tree, 1e+50 best solution, best possible 300 (670.03 seconds)
Cbc0010I After 1200 nodes, 29 on tree, 1e+50 best solution, best possible 300 (720.63 seconds)
Cbc0010I After 1300 nodes, 15 on tree, 1e+50 best solution, best possible 300 (798.54 seconds)
Cbc0010I After 1400 nodes, 33 on tree, 1e+50 best solution, best possible 300 (846.67 seconds)
Cbc0010I After 1500 nodes, 19 on tree, 1e+50 best solution, best possible 300 (886.19 seconds)
Cbc0010I After 1600 nodes, 13 on tree, 1e+50 best solution, best possible 300 (919.76 seconds)
Cbc0010I After 1700 nodes, 24 on tree, 1e+50 best solution, best possible 300 (947.96 seconds)
Cbc0010I After 1800 nodes, 26 on tree, 1e+50 best solution, best possible 300 (977.67 seconds)
Cbc0010I After 1900 nodes, 17 on tree, 1e+50 best solution, best possible 300 (1005.03 seconds)
Cbc0010I After 2000 nodes, 32 on tree, 1e+50 best solution, best possible 300 (1044.56 seconds)
Cbc0010I After 2100 nodes, 22 on tree, 1e+50 best solution, best possible 300 (1062.01 seconds)
Cbc0010I After 2200 nodes, 22 on tree, 1e+50 best solution, best possible 300 (1086.23 seconds)
Cbc0010I After 2300 nodes, 25 on tree, 1e+50 best solution, best possible 300 (1111.10 seconds)
Cbc0010I After 2400 nodes, 29 on tree, 1e+50 best solution, best possible 300 (1130.42 seconds)
Cbc0010I After 2500 nodes, 22 on tree, 1e+50 best solution, best possible 300 (1164.48 seconds)
Cbc0010I After 2600 nodes, 25 on tree, 1e+50 best solution, best possible 300 (1182.51 seconds)
Cbc0010I After 2700 nodes, 21 on tree, 1e+50 best solution, best possible 300 (1201.68 seconds)
Cbc0010I After 2800 nodes, 32 on tree, 1e+50 best solution, best possible 300 (1217.54 seconds)
Cbc0010I After 2900 nodes, 31 on tree, 1e+50 best solution, best possible 300 (1227.48 seconds)
Cbc0010I After 3000 nodes, 22 on tree, 1e+50 best solution, best possible 300 (1249.98 seconds)
Cbc0010I After 3100 nodes, 13 on tree, 1e+50 best solution, best possible 300 (1269.51 seconds)
Cbc0010I After 3200 nodes, 15 on tree, 1e+50 best solution, best possible 300 (1296.97 seconds)
Cbc0010I After 3300 nodes, 26 on tree, 1e+50 best solution, best possible 300 (1351.23 seconds)
Cbc0010I After 3400 nodes, 25 on tree, 1e+50 best solution, best possible 300 (1392.80 seconds)
Cbc0010I After 3500 nodes, 32 on tree, 1e+50 best solution, best possible 300 (1425.31 seconds)
Cbc0010I After 3600 nodes, 28 on tree, 1e+50 best solution, best possible 300 (1457.39 seconds)
Cbc0010I After 3700 nodes, 30 on tree, 1e+50 best solution, best possible 300 (1494.23 seconds)
Cbc0010I After 3800 nodes, 39 on tree, 1e+50 best solution, best possible 300 (1534.33 seconds)
Cbc0010I After 3900 nodes, 35 on tree, 1e+50 best solution, best possible 300 (1559.76 seconds)
Cbc0010I After 4000 nodes, 20 on tree, 1e+50 best solution, best possible 300 (1619.62 seconds)
Cbc0010I After 4100 nodes, 18 on tree, 1e+50 best solution, best possible 300 (1660.82 seconds)
Cbc0010I After 4200 nodes, 17 on tree, 1e+50 best solution, best possible 300 (1706.04 seconds)
Cbc0010I After 4300 nodes, 15 on tree, 1e+50 best solution, best possible 300 (1739.21 seconds)
Cbc0010I After 4400 nodes, 22 on tree, 1e+50 best solution, best possible 300 (1768.16 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 300), took 5211306 iterations and 4493 nodes (1798.97 seconds)
Cbc0032I Strong branching done 26860 times (1990671 iterations), fathomed 582 nodes and fixed 2856 variables
Cbc0035I Maximum depth 56, 0 variables fixed on reduced cost
Cuts at root node changed objective from 300 to 300
Probing was tried 10 times and created 14 cuts of which 0 were active after adding rounds of cuts (0.105 seconds)
Gomory was tried 10 times and created 73 cuts of which 0 were active after adding rounds of cuts (0.756 seconds)
Knapsack was tried 10 times and created 33 cuts of which 0 were active after adding rounds of cuts (0.020 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
TwoMirCuts was tried 10 times and created 43 cuts of which 0 were active after adding rounds of cuts (0.271 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.054 seconds)
ImplicationCuts was tried 9 times and created 36 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)

Result - Stopped on time limit

No feasible solution found
Lower bound:                    300.000
Enumerated nodes:               4493
Total iterations:               5211306
Time (CPU seconds):             1798.97
Time (Wallclock seconds):       1799.67

Total time (CPU seconds):       1799.00   (Wallclock seconds):       1799.71

