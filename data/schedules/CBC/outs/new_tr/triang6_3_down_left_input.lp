Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_tr/order/triang6_3_down_left_input.lp sec 1800 solve solu solutions/new_tr/triang6_3_down_left_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 306.447 - 0.02 seconds
Cgl0002I 269 variables fixed
Cgl0003I 0 fixed, 1 tightened bounds, 199 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 61 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 10 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 768 rows, 276 columns (276 integer (255 of which binary)) and 2561 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 276 objects (276 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 160 integers unsatisfied sum - 47.4813
Cbc0038I Pass   1: suminf.   20.59454 (87) obj. 362.194 iterations 230
Cbc0038I Pass   2: suminf.   14.68251 (88) obj. 362.88 iterations 91
Cbc0038I Pass   3: suminf.   14.71584 (86) obj. 363.223 iterations 8
Cbc0038I Pass   4: suminf.    6.18224 (47) obj. 393 iterations 79
Cbc0038I Pass   5: suminf.    4.19557 (20) obj. 393 iterations 87
Cbc0038I Pass   6: suminf.    0.00000 (0) obj. 393 iterations 15
Cbc0038I Solution found of 393
Cbc0038I Cleaned solution of 393
Cbc0038I Before mini branch and bound, 91 integers at bound fixed and 0 continuous
Cbc0038I Full problem 768 rows 276 columns, reduced to 589 rows 182 columns - 13 fixed gives 463, 136 - still too large
Cbc0038I Full problem 768 rows 276 columns, reduced to 138 rows 42 columns
Cbc0038I Mini branch and bound improved solution from 393 to 370 (0.11 seconds)
Cbc0038I Round again with cutoff of 362.745
Cbc0038I Pass   7: suminf.   20.59454 (87) obj. 362.194 iterations 0
Cbc0038I Pass   8: suminf.   14.81763 (88) obj. 362.745 iterations 97
Cbc0038I Pass   9: suminf.   14.74803 (86) obj. 362.745 iterations 6
Cbc0038I Pass  10: suminf.   10.02290 (64) obj. 362.745 iterations 123
Cbc0038I Pass  11: suminf.    9.05080 (61) obj. 362.745 iterations 24
Cbc0038I Pass  12: suminf.    9.12285 (62) obj. 362.745 iterations 98
Cbc0038I Pass  13: suminf.    5.22316 (35) obj. 362.745 iterations 49
Cbc0038I Pass  14: suminf.    5.22527 (45) obj. 362.745 iterations 42
Cbc0038I Pass  15: suminf.    6.23353 (48) obj. 360 iterations 81
Cbc0038I Pass  16: suminf.    4.33866 (34) obj. 362.745 iterations 32
Cbc0038I Pass  17: suminf.    5.08414 (33) obj. 362.745 iterations 28
Cbc0038I Pass  18: suminf.    5.08414 (33) obj. 362.745 iterations 1
Cbc0038I Pass  19: suminf.    6.55114 (48) obj. 362.745 iterations 72
Cbc0038I Pass  20: suminf.    4.97396 (43) obj. 362.745 iterations 33
Cbc0038I Pass  21: suminf.    4.33856 (45) obj. 362.745 iterations 23
Cbc0038I Pass  22: suminf.    4.34676 (44) obj. 362.745 iterations 19
Cbc0038I Pass  23: suminf.    8.13317 (66) obj. 359.993 iterations 143
Cbc0038I Pass  24: suminf.    3.71833 (45) obj. 359.967 iterations 22
Cbc0038I Pass  25: suminf.    2.37380 (20) obj. 360 iterations 55
Cbc0038I Pass  26: suminf.    2.37380 (20) obj. 360 iterations 5
Cbc0038I Pass  27: suminf.    2.18135 (18) obj. 360 iterations 25
Cbc0038I Pass  28: suminf.    0.60775 (40) obj. 359.999 iterations 59
Cbc0038I Pass  29: suminf.    0.60775 (40) obj. 359.999 iterations 0
Cbc0038I Pass  30: suminf.    2.48017 (43) obj. 359.968 iterations 44
Cbc0038I Pass  31: suminf.    2.48017 (43) obj. 359.968 iterations 1
Cbc0038I Pass  32: suminf.    4.82831 (49) obj. 362.745 iterations 73
Cbc0038I Pass  33: suminf.    1.22094 (28) obj. 362.745 iterations 23
Cbc0038I Pass  34: suminf.    4.72677 (50) obj. 362.745 iterations 132
Cbc0038I Pass  35: suminf.    2.80110 (41) obj. 362.745 iterations 14
Cbc0038I Pass  36: suminf.    9.40494 (76) obj. 362.745 iterations 83
Cbc0038I Pass  37: suminf.    3.54917 (59) obj. 362.745 iterations 35
Cbc0038I Pass  38: suminf.    2.04505 (40) obj. 362.745 iterations 32
Cbc0038I Pass  39: suminf.    6.26541 (20) obj. 362.745 iterations 92
Cbc0038I Pass  40: suminf.    5.95126 (22) obj. 362.745 iterations 15
Cbc0038I Pass  41: suminf.    0.25522 (1) obj. 362.745 iterations 43
Cbc0038I Solution found of 362.745
Cbc0038I Branch and bound needed to clear up 1 general integers
Cbc0038I Full problem 769 rows 276 columns, reduced to 0 rows 0 columns
Cbc0038I Cleaned solution of 360
Cbc0038I Before mini branch and bound, 64 integers at bound fixed and 0 continuous
Cbc0038I Full problem 768 rows 276 columns, reduced to 640 rows 209 columns - 57 fixed gives 351, 100 - ok now
Cbc0038I Full problem 768 rows 276 columns, reduced to 155 rows 54 columns
Cbc0038I Mini branch and bound did not improve solution (0.21 seconds)
Cbc0038I Round again with cutoff of 348.489
Cbc0038I Pass  42: suminf.   24.21950 (112) obj. 348 iterations 42
Cbc0038I Pass  43: suminf.   19.36407 (103) obj. 348.489 iterations 63
Cbc0038I Pass  44: suminf.   17.36758 (98) obj. 348.489 iterations 26
Cbc0038I Pass  45: suminf.   18.37887 (105) obj. 348.489 iterations 28
Cbc0038I Pass  46: suminf.   17.81664 (77) obj. 348.489 iterations 86
Cbc0038I Pass  47: suminf.   14.38317 (74) obj. 348.489 iterations 43
Cbc0038I Pass  48: suminf.   13.21467 (76) obj. 348.489 iterations 26
Cbc0038I Pass  49: suminf.   15.31944 (89) obj. 348.489 iterations 121
Cbc0038I Pass  50: suminf.   14.53182 (90) obj. 348.489 iterations 36
Cbc0038I Pass  51: suminf.   12.81909 (90) obj. 348.489 iterations 24
Cbc0038I Pass  52: suminf.   12.26621 (85) obj. 348.489 iterations 34
Cbc0038I Pass  53: suminf.   12.33734 (69) obj. 348.489 iterations 78
Cbc0038I Pass  54: suminf.   12.30852 (70) obj. 348.489 iterations 40
Cbc0038I Pass  55: suminf.   12.30852 (70) obj. 348.489 iterations 5
Cbc0038I Pass  56: suminf.   13.61568 (69) obj. 348.489 iterations 115
Cbc0038I Pass  57: suminf.   12.47955 (57) obj. 348.489 iterations 32
Cbc0038I Pass  58: suminf.   10.45601 (61) obj. 348.489 iterations 31
Cbc0038I Pass  59: suminf.   10.42300 (65) obj. 348.489 iterations 5
Cbc0038I Pass  60: suminf.   15.01566 (78) obj. 348.489 iterations 115
Cbc0038I Pass  61: suminf.    9.72724 (66) obj. 348.489 iterations 59
Cbc0038I Pass  62: suminf.    9.72724 (66) obj. 348.489 iterations 4
Cbc0038I Pass  63: suminf.   11.51579 (59) obj. 348.489 iterations 105
Cbc0038I Pass  64: suminf.    8.62142 (61) obj. 348.489 iterations 26
Cbc0038I Pass  65: suminf.    9.58344 (65) obj. 348.489 iterations 24
Cbc0038I Pass  66: suminf.    8.75492 (64) obj. 348.489 iterations 16
Cbc0038I Pass  67: suminf.   19.30132 (95) obj. 348.489 iterations 88
Cbc0038I Pass  68: suminf.   13.18471 (89) obj. 348.489 iterations 78
Cbc0038I Pass  69: suminf.   10.74432 (72) obj. 348.489 iterations 37
Cbc0038I Pass  70: suminf.    9.99248 (75) obj. 348.489 iterations 15
Cbc0038I Pass  71: suminf.   10.93493 (73) obj. 348.489 iterations 78
Cbc0038I Pass  72: suminf.    9.49642 (65) obj. 348.489 iterations 48
Cbc0038I Pass  73: suminf.    5.58864 (63) obj. 348.489 iterations 134
Cbc0038I Pass  74: suminf.    4.89274 (44) obj. 348.489 iterations 46
Cbc0038I Pass  75: suminf.    3.74813 (34) obj. 348.489 iterations 105
Cbc0038I Pass  76: suminf.    2.13067 (16) obj. 348.489 iterations 13
Cbc0038I Pass  77: suminf.    1.67828 (8) obj. 348.489 iterations 30
Cbc0038I Pass  78: suminf.    1.43029 (8) obj. 348.489 iterations 55
Cbc0038I Pass  79: suminf.   15.41016 (108) obj. 348.489 iterations 162
Cbc0038I Pass  80: suminf.    7.98766 (61) obj. 348.489 iterations 111
Cbc0038I Pass  81: suminf.    6.65459 (58) obj. 348.489 iterations 12
Cbc0038I Pass  82: suminf.    2.06331 (20) obj. 348.489 iterations 63
Cbc0038I Pass  83: suminf.    2.06331 (20) obj. 348.489 iterations 4
Cbc0038I Pass  84: suminf.    2.37796 (17) obj. 348.489 iterations 54
Cbc0038I Pass  85: suminf.    1.67828 (8) obj. 348.489 iterations 23
Cbc0038I Pass  86: suminf.    1.43029 (8) obj. 348.489 iterations 25
Cbc0038I Pass  87: suminf.   15.14608 (108) obj. 348.489 iterations 155
Cbc0038I Pass  88: suminf.   10.84267 (68) obj. 348.489 iterations 69
Cbc0038I Pass  89: suminf.    4.15249 (29) obj. 348.489 iterations 152
Cbc0038I Pass  90: suminf.    4.15249 (29) obj. 348.489 iterations 0
Cbc0038I Pass  91: suminf.    2.93032 (15) obj. 348.489 iterations 73
Cbc0038I Pass  92: suminf.    2.93032 (15) obj. 348.489 iterations 1
Cbc0038I Pass  93: suminf.    1.67828 (8) obj. 348.489 iterations 73
Cbc0038I Pass  94: suminf.    1.67828 (8) obj. 348.489 iterations 1
Cbc0038I Pass  95: suminf.    1.43029 (8) obj. 348.489 iterations 38
Cbc0038I Pass  96: suminf.   26.03628 (111) obj. 348.489 iterations 163
Cbc0038I Pass  97: suminf.   15.42062 (88) obj. 348.489 iterations 89
Cbc0038I Pass  98: suminf.   13.24312 (75) obj. 348.489 iterations 24
Cbc0038I Pass  99: suminf.   11.17359 (66) obj. 348.489 iterations 11
Cbc0038I Pass 100: suminf.    9.61593 (56) obj. 348.489 iterations 54
Cbc0038I Pass 101: suminf.    7.17544 (52) obj. 348.489 iterations 24
Cbc0038I Pass 102: suminf.    7.17849 (53) obj. 348.489 iterations 5
Cbc0038I Pass 103: suminf.    4.62862 (29) obj. 348.489 iterations 101
Cbc0038I Pass 104: suminf.    4.62862 (29) obj. 348.489 iterations 3
Cbc0038I Pass 105: suminf.    2.55045 (30) obj. 348.489 iterations 106
Cbc0038I Pass 106: suminf.    2.55045 (30) obj. 348.489 iterations 0
Cbc0038I Pass 107: suminf.    4.65832 (32) obj. 348.489 iterations 42
Cbc0038I Pass 108: suminf.    4.59287 (48) obj. 348.489 iterations 115
Cbc0038I Pass 109: suminf.    3.65931 (47) obj. 348.489 iterations 12
Cbc0038I Pass 110: suminf.    3.63504 (47) obj. 348.489 iterations 2
Cbc0038I Pass 111: suminf.    7.74906 (50) obj. 348.489 iterations 69
Cbc0038I Pass 112: suminf.    4.08981 (31) obj. 348.489 iterations 16
Cbc0038I Pass 113: suminf.    4.78272 (36) obj. 348.489 iterations 84
Cbc0038I Pass 114: suminf.    4.13929 (34) obj. 348.489 iterations 14
Cbc0038I Pass 115: suminf.    4.13929 (34) obj. 348.489 iterations 0
Cbc0038I Pass 116: suminf.    3.12362 (36) obj. 348.489 iterations 40
Cbc0038I Pass 117: suminf.    3.12362 (36) obj. 348.489 iterations 3
Cbc0038I Pass 118: suminf.    1.43029 (8) obj. 348.489 iterations 84
Cbc0038I Pass 119: suminf.    1.43029 (8) obj. 348.489 iterations 1
Cbc0038I Pass 120: suminf.    1.67828 (8) obj. 348.489 iterations 23
Cbc0038I Pass 121: suminf.   13.27991 (78) obj. 348.489 iterations 87
Cbc0038I Pass 122: suminf.    6.28282 (51) obj. 348.489 iterations 91
Cbc0038I Pass 123: suminf.    3.50068 (49) obj. 348.489 iterations 93
Cbc0038I Pass 124: suminf.    3.51615 (56) obj. 348.489 iterations 24
Cbc0038I Pass 125: suminf.    3.19965 (23) obj. 348.489 iterations 73
Cbc0038I Pass 126: suminf.    3.19965 (23) obj. 348.489 iterations 0
Cbc0038I Pass 127: suminf.    3.03965 (36) obj. 348.489 iterations 124
Cbc0038I Pass 128: suminf.    3.03965 (36) obj. 348.489 iterations 4
Cbc0038I Pass 129: suminf.    3.34729 (32) obj. 348.489 iterations 51
Cbc0038I Pass 130: suminf.    3.34729 (32) obj. 348.489 iterations 1
Cbc0038I Pass 131: suminf.    2.54568 (49) obj. 348.489 iterations 76
Cbc0038I Pass 132: suminf.    2.54439 (49) obj. 348.489 iterations 2
Cbc0038I Pass 133: suminf.    2.91836 (29) obj. 348.489 iterations 52
Cbc0038I Pass 134: suminf.    2.91836 (29) obj. 348.489 iterations 4
Cbc0038I Pass 135: suminf.    2.39658 (20) obj. 348.489 iterations 41
Cbc0038I Pass 136: suminf.    2.22933 (13) obj. 348.489 iterations 26
Cbc0038I Pass 137: suminf.    2.39806 (22) obj. 348.489 iterations 15
Cbc0038I Pass 138: suminf.    5.92925 (42) obj. 348.489 iterations 76
Cbc0038I Pass 139: suminf.    5.37016 (43) obj. 348.489 iterations 1
Cbc0038I Pass 140: suminf.    2.46285 (28) obj. 348.489 iterations 39
Cbc0038I Pass 141: suminf.   18.10118 (72) obj. 348.489 iterations 124
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 768 rows 276 columns, reduced to 749 rows 263 columns - 60 fixed gives 447, 140 - still too large
Cbc0038I Full problem 768 rows 276 columns, reduced to 216 rows 78 columns
Cbc0038I Mini branch and bound did not improve solution (0.48 seconds)
Cbc0038I After 0.48 seconds - Feasibility pump exiting with objective of 360 - took 0.42 seconds
Cbc0012I Integer solution of 360 found by feasibility pump after 0 iterations and 0 nodes (0.48 seconds)
Cbc0038I Full problem 768 rows 276 columns, reduced to 546 rows 161 columns - 57 fixed gives 130, 36 - ok now
Cbc0031I 30 added rows had average density of 80.166667
Cbc0013I At root node, 30 cuts changed objective from 306.44692 to 327.49475 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 514 row cuts average 2.8 elements, 13 column cuts (13 active)  in 0.268 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 917 row cuts average 194.0 elements, 0 column cuts (0 active)  in 0.430 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 39 row cuts average 5.8 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 407 row cuts average 88.9 elements, 0 column cuts (0 active)  in 0.139 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 59 row cuts average 24.9 elements, 0 column cuts (0 active)  in 0.292 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 360 best solution, best possible 327.49475 (3.33 seconds)
Cbc0038I Full problem 768 rows 276 columns, reduced to 453 rows 136 columns - 47 fixed gives 105, 35 - ok now
Cbc0004I Integer solution of 336 found after 37597 iterations and 71 nodes (6.62 seconds)
Cbc0001I Search completed - best objective 336, took 39473 iterations and 75 nodes (6.84 seconds)
Cbc0032I Strong branching done 842 times (30993 iterations), fathomed 9 nodes and fixed 21 variables
Cbc0035I Maximum depth 20, 0 variables fixed on reduced cost
Cuts at root node changed objective from 306.447 to 327.495
Probing was tried 149 times and created 1559 cuts of which 0 were active after adding rounds of cuts (0.321 seconds)
Gomory was tried 146 times and created 979 cuts of which 0 were active after adding rounds of cuts (0.469 seconds)
Knapsack was tried 146 times and created 117 cuts of which 0 were active after adding rounds of cuts (0.055 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
MixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.038 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.040 seconds)
TwoMirCuts was tried 146 times and created 1031 cuts of which 0 were active after adding rounds of cuts (0.225 seconds)
ZeroHalf was tried 100 times and created 59 cuts of which 0 were active after adding rounds of cuts (0.292 seconds)
ImplicationCuts was tried 63 times and created 441 cuts of which 0 were active after adding rounds of cuts (0.031 seconds)

Result - Optimal solution found

Objective value:                336.00000000
Enumerated nodes:               75
Total iterations:               39473
Time (CPU seconds):             6.87
Time (Wallclock seconds):       6.96

Total time (CPU seconds):       6.87   (Wallclock seconds):       6.96

