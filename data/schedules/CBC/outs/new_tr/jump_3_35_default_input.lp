Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_tr/order/jump_3_35_default_input.lp sec 1800 solve solu solutions/new_tr/jump_3_35_default_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 32277.3 - 1.01 seconds
Cgl0002I 266 variables fixed
Cgl0003I 0 fixed, 1 tightened bounds, 415 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0004I processed model has 3341 rows, 1060 columns (1060 integer (1024 of which binary)) and 11147 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1060 objects (1060 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 633 integers unsatisfied sum - 154.396
Cbc0038I Pass   1: (1.68 seconds) suminf.   76.93995 (533) obj. 47643.8 iterations 1700
Cbc0038I Pass   2: (1.77 seconds) suminf.   64.43362 (643) obj. 48288.9 iterations 463
Cbc0038I Pass   3: (1.81 seconds) suminf.   63.02987 (644) obj. 47852.9 iterations 147
Cbc0038I Pass   4: (1.84 seconds) suminf.   60.49077 (631) obj. 47650.6 iterations 122
Cbc0038I Pass   5: (1.96 seconds) suminf.   57.21568 (577) obj. 50483.2 iterations 638
Cbc0038I Pass   6: (1.99 seconds) suminf.   56.44403 (629) obj. 50751.6 iterations 117
Cbc0038I Pass   7: (2.06 seconds) suminf.   55.72234 (573) obj. 50528.2 iterations 341
Cbc0038I Pass   8: (2.10 seconds) suminf.   56.48417 (577) obj. 51023.2 iterations 194
Cbc0038I Pass   9: (2.13 seconds) suminf.   56.33781 (600) obj. 51140.6 iterations 85
Cbc0038I Pass  10: (2.22 seconds) suminf.   50.45176 (556) obj. 51022.4 iterations 449
Cbc0038I Pass  11: (2.25 seconds) suminf.   51.41065 (550) obj. 51268.7 iterations 114
Cbc0038I Pass  12: (2.27 seconds) suminf.   51.63561 (560) obj. 50965.5 iterations 80
Cbc0038I Pass  13: (2.32 seconds) suminf.   50.04206 (584) obj. 51178 iterations 227
Cbc0038I Pass  14: (2.34 seconds) suminf.   49.12048 (555) obj. 51128.1 iterations 67
Cbc0038I Pass  15: (2.36 seconds) suminf.   50.19897 (601) obj. 51201.8 iterations 69
Cbc0038I Pass  16: (2.37 seconds) suminf.   50.42384 (599) obj. 51205.4 iterations 25
Cbc0038I Pass  17: (2.42 seconds) suminf.   44.78570 (567) obj. 52181 iterations 217
Cbc0038I Pass  18: (2.47 seconds) suminf.   45.54931 (534) obj. 53670.1 iterations 257
Cbc0038I Pass  19: (2.54 seconds) suminf.   49.45955 (493) obj. 53199.9 iterations 311
Cbc0038I Pass  20: (2.56 seconds) suminf.   48.83591 (497) obj. 53417.5 iterations 124
Cbc0038I Pass  21: (2.66 seconds) suminf.   48.91600 (559) obj. 49999.8 iterations 535
Cbc0038I Pass  22: (2.71 seconds) suminf.   49.45499 (564) obj. 50089.7 iterations 246
Cbc0038I Pass  23: (2.75 seconds) suminf.   49.16758 (472) obj. 50131.4 iterations 172
Cbc0038I Pass  24: (2.83 seconds) suminf.   45.86565 (529) obj. 55367.5 iterations 488
Cbc0038I Pass  25: (2.87 seconds) suminf.   45.21620 (523) obj. 55358.6 iterations 147
Cbc0038I Pass  26: (2.93 seconds) suminf.   40.38871 (509) obj. 55436 iterations 284
Cbc0038I Pass  27: (2.97 seconds) suminf.   39.46657 (502) obj. 55138.5 iterations 145
Cbc0038I Pass  28: (3.03 seconds) suminf.   42.61846 (510) obj. 55833.7 iterations 311
Cbc0038I Pass  29: (3.06 seconds) suminf.   41.72380 (506) obj. 55848.5 iterations 115
Cbc0038I Pass  30: (3.13 seconds) suminf.   44.57564 (490) obj. 55263.2 iterations 377
Cbc0038I Pass  31: (3.18 seconds) suminf.   40.29930 (527) obj. 55398.4 iterations 272
Cbc0038I Pass  32: (3.22 seconds) suminf.   39.97518 (531) obj. 55396.2 iterations 168
Cbc0038I Pass  33: (3.31 seconds) suminf.   41.45371 (510) obj. 55861.2 iterations 514
Cbc0038I Pass  34: (3.36 seconds) suminf.   40.35215 (517) obj. 55977.9 iterations 238
Cbc0038I Pass  35: (3.39 seconds) suminf.   39.87061 (520) obj. 56132 iterations 136
Cbc0038I Pass  36: (3.43 seconds) suminf.   39.64859 (548) obj. 55594.5 iterations 192
Cbc0038I Pass  37: (3.46 seconds) suminf.   38.33136 (544) obj. 55392.2 iterations 120
Cbc0038I Pass  38: (3.52 seconds) suminf.   39.06960 (532) obj. 55401.3 iterations 313
Cbc0038I Pass  39: (3.56 seconds) suminf.   38.82195 (531) obj. 55203 iterations 180
Cbc0038I Pass  40: (3.61 seconds) suminf.   41.56583 (539) obj. 55242.5 iterations 211
Cbc0038I Pass  41: (3.66 seconds) suminf.   39.01039 (544) obj. 55130.1 iterations 242
Cbc0038I Pass  42: (3.71 seconds) suminf.   41.40210 (529) obj. 55364.4 iterations 239
Cbc0038I Pass  43: (3.75 seconds) suminf.   37.39950 (517) obj. 55223.3 iterations 277
Cbc0038I Pass  44: (3.81 seconds) suminf.   36.61028 (523) obj. 55732 iterations 283
Cbc0038I Pass  45: (3.86 seconds) suminf.   36.22432 (534) obj. 55573.4 iterations 255
Cbc0038I Pass  46: (3.88 seconds) suminf.   34.75445 (534) obj. 55539.9 iterations 97
Cbc0038I Pass  47: (3.95 seconds) suminf.   40.29551 (453) obj. 54671.8 iterations 375
Cbc0038I Pass  48: (4.01 seconds) suminf.   35.95732 (481) obj. 56605.7 iterations 275
Cbc0038I Pass  49: (4.02 seconds) suminf.   34.99254 (485) obj. 56587 iterations 15
Cbc0038I Pass  50: (4.11 seconds) suminf.   38.24036 (502) obj. 58389.9 iterations 544
Cbc0038I Pass  51: (4.15 seconds) suminf.   35.31644 (498) obj. 59621.3 iterations 228
Cbc0038I Pass  52: (4.21 seconds) suminf.   37.75039 (486) obj. 59444.6 iterations 314
Cbc0038I Pass  53: (4.27 seconds) suminf.   34.98918 (515) obj. 59772.7 iterations 372
Cbc0038I Pass  54: (4.50 seconds) suminf.   90.35268 (563) obj. 62737.3 iterations 1347
Cbc0038I Pass  55: (4.65 seconds) suminf.   62.40863 (496) obj. 64204 iterations 800
Cbc0038I Pass  56: (4.70 seconds) suminf.   60.36412 (498) obj. 64237.7 iterations 211
Cbc0038I Pass  57: (4.72 seconds) suminf.   60.07942 (502) obj. 64237.5 iterations 82
Cbc0038I Pass  58: (4.79 seconds) suminf.   51.55002 (505) obj. 62338.1 iterations 372
Cbc0038I Pass  59: (4.82 seconds) suminf.   50.82054 (490) obj. 61461.4 iterations 97
Cbc0038I Pass  60: (4.87 seconds) suminf.   51.51117 (492) obj. 62531.2 iterations 252
Cbc0038I Pass  61: (4.91 seconds) suminf.   48.71032 (496) obj. 63546 iterations 155
Cbc0038I Pass  62: (4.93 seconds) suminf.   48.82362 (487) obj. 63170.9 iterations 40
Cbc0038I Pass  63: (4.98 seconds) suminf.   48.53322 (501) obj. 63471.3 iterations 234
Cbc0038I Pass  64: (5.00 seconds) suminf.   47.74950 (504) obj. 63484.6 iterations 94
Cbc0038I Pass  65: (5.06 seconds) suminf.   49.03090 (499) obj. 59842.6 iterations 253
Cbc0038I Pass  66: (5.09 seconds) suminf.   47.82863 (510) obj. 59887.6 iterations 102
Cbc0038I Pass  67: (5.12 seconds) suminf.   48.48454 (513) obj. 60138.5 iterations 111
Cbc0038I Pass  68: (5.13 seconds) suminf.   47.13314 (511) obj. 60119.5 iterations 40
Cbc0038I Pass  69: (5.18 seconds) suminf.   47.07321 (524) obj. 60405.1 iterations 184
Cbc0038I Pass  70: (5.20 seconds) suminf.   46.64106 (517) obj. 60399.2 iterations 73
Cbc0038I Pass  71: (5.27 seconds) suminf.   48.29502 (507) obj. 60867.3 iterations 337
Cbc0038I Pass  72: (5.30 seconds) suminf.   45.38028 (496) obj. 61380.3 iterations 135
Cbc0038I Pass  73: (5.36 seconds) suminf.   43.79578 (516) obj. 63822.8 iterations 269
Cbc0038I Pass  74: (5.38 seconds) suminf.   43.01452 (527) obj. 63801.7 iterations 80
Cbc0038I Pass  75: (5.44 seconds) suminf.   47.76251 (509) obj. 63695.6 iterations 237
Cbc0038I Pass  76: (5.47 seconds) suminf.   46.31682 (503) obj. 63763.1 iterations 104
Cbc0038I Pass  77: (5.53 seconds) suminf.   47.02381 (526) obj. 63858.2 iterations 314
Cbc0038I Pass  78: (5.57 seconds) suminf.   44.48236 (521) obj. 63920.9 iterations 131
Cbc0038I Pass  79: (5.63 seconds) suminf.   46.89463 (513) obj. 63537.4 iterations 284
Cbc0038I Pass  80: (5.64 seconds) suminf.   46.69274 (520) obj. 63539.7 iterations 23
Cbc0038I Pass  81: (5.72 seconds) suminf.   47.37885 (539) obj. 63876.1 iterations 352
Cbc0038I Pass  82: (5.74 seconds) suminf.   46.39451 (537) obj. 63904.2 iterations 65
Cbc0038I Pass  83: (5.80 seconds) suminf.   47.16300 (536) obj. 63500.8 iterations 270
Cbc0038I Pass  84: (5.85 seconds) suminf.   43.90939 (539) obj. 63861.2 iterations 180
Cbc0038I Pass  85: (5.92 seconds) suminf.   46.51154 (525) obj. 63426.2 iterations 334
Cbc0038I Pass  86: (5.95 seconds) suminf.   44.17818 (536) obj. 63448.7 iterations 130
Cbc0038I Pass  87: (6.04 seconds) suminf.   44.44258 (489) obj. 59894.5 iterations 449
Cbc0038I Pass  88: (6.08 seconds) suminf.   40.85276 (475) obj. 59948.7 iterations 147
Cbc0038I Pass  89: (6.09 seconds) suminf.   41.24869 (480) obj. 59949.5 iterations 14
Cbc0038I Pass  90: (6.14 seconds) suminf.   43.84193 (468) obj. 59862 iterations 182
Cbc0038I Pass  91: (6.15 seconds) suminf.   44.28612 (468) obj. 59973.6 iterations 52
Cbc0038I Pass  92: (6.22 seconds) suminf.   44.07784 (510) obj. 60169.4 iterations 321
Cbc0038I Pass  93: (6.26 seconds) suminf.   43.49113 (501) obj. 60212.3 iterations 178
Cbc0038I Pass  94: (6.31 seconds) suminf.   43.57831 (497) obj. 60519.8 iterations 213
Cbc0038I Pass  95: (6.32 seconds) suminf.   43.86636 (477) obj. 60499.3 iterations 23
Cbc0038I Pass  96: (6.37 seconds) suminf.   42.57803 (499) obj. 60195.1 iterations 195
Cbc0038I Pass  97: (6.56 seconds) suminf.   85.32432 (516) obj. 69373.6 iterations 1093
Cbc0038I Pass  98: (6.66 seconds) suminf.   59.96001 (499) obj. 70169.5 iterations 558
Cbc0038I Pass  99: (6.72 seconds) suminf.   57.28789 (486) obj. 69915.9 iterations 268
Cbc0038I Pass 100: (6.92 seconds) suminf.   95.66247 (588) obj. 76812.4 iterations 1115
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 63 integers at bound fixed and 0 continuous
Cbc0038I Full problem 3341 rows 1060 columns, reduced to 3179 rows 990 columns - too large
Cbc0038I Mini branch and bound did not improve solution (8.48 seconds)
Cbc0038I After 8.48 seconds - Feasibility pump exiting - took 7.11 seconds
Cbc0031I 16 added rows had average density of 68.125
Cbc0013I At root node, 16 cuts changed objective from 32307.422 to 32355.989 in 11 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.068 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 75 row cuts average 687.2 elements, 0 column cuts (0 active)  in 0.472 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 29 row cuts average 6.7 elements, 0 column cuts (0 active)  in 0.165 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 32356 (10.35 seconds)
Cbc0010I After 100 nodes, 18 on tree, 1e+50 best solution, best possible 32358 (31.80 seconds)
Cbc0010I After 200 nodes, 12 on tree, 1e+50 best solution, best possible 32358 (63.22 seconds)
Cbc0010I After 300 nodes, 44 on tree, 1e+50 best solution, best possible 32358 (80.45 seconds)
Cbc0010I After 400 nodes, 9 on tree, 1e+50 best solution, best possible 32358 (116.58 seconds)
Cbc0010I After 500 nodes, 22 on tree, 1e+50 best solution, best possible 32358 (139.07 seconds)
Cbc0010I After 600 nodes, 52 on tree, 1e+50 best solution, best possible 32358 (157.22 seconds)
Cbc0010I After 700 nodes, 78 on tree, 1e+50 best solution, best possible 32358 (176.23 seconds)
Cbc0010I After 800 nodes, 110 on tree, 1e+50 best solution, best possible 32358 (194.82 seconds)
Cbc0010I After 900 nodes, 142 on tree, 1e+50 best solution, best possible 32358 (215.28 seconds)
Cbc0010I After 1000 nodes, 144 on tree, 1e+50 best solution, best possible 32358 (255.07 seconds)
Cbc0010I After 1100 nodes, 146 on tree, 1e+50 best solution, best possible 32359 (293.19 seconds)
Cbc0010I After 1200 nodes, 147 on tree, 1e+50 best solution, best possible 32359 (336.38 seconds)
Cbc0010I After 1300 nodes, 148 on tree, 1e+50 best solution, best possible 32359 (378.05 seconds)
Cbc0010I After 1400 nodes, 151 on tree, 1e+50 best solution, best possible 32359 (418.66 seconds)
Cbc0010I After 1500 nodes, 148 on tree, 1e+50 best solution, best possible 32359 (459.11 seconds)
Cbc0010I After 1600 nodes, 149 on tree, 1e+50 best solution, best possible 32359 (500.19 seconds)
Cbc0010I After 1700 nodes, 150 on tree, 1e+50 best solution, best possible 32359 (543.06 seconds)
Cbc0010I After 1800 nodes, 152 on tree, 1e+50 best solution, best possible 32359 (580.55 seconds)
Cbc0010I After 1900 nodes, 153 on tree, 1e+50 best solution, best possible 32359 (620.14 seconds)
Cbc0010I After 2000 nodes, 151 on tree, 1e+50 best solution, best possible 32359 (660.52 seconds)
Cbc0010I After 2100 nodes, 155 on tree, 1e+50 best solution, best possible 32359 (698.93 seconds)
Cbc0010I After 2200 nodes, 156 on tree, 1e+50 best solution, best possible 32359 (741.25 seconds)
Cbc0010I After 2300 nodes, 153 on tree, 1e+50 best solution, best possible 32359 (782.65 seconds)
Cbc0010I After 2400 nodes, 154 on tree, 1e+50 best solution, best possible 32359 (822.89 seconds)
Cbc0010I After 2500 nodes, 155 on tree, 1e+50 best solution, best possible 32359 (857.49 seconds)
Cbc0010I After 2600 nodes, 156 on tree, 1e+50 best solution, best possible 32359 (890.56 seconds)
Cbc0010I After 2700 nodes, 158 on tree, 1e+50 best solution, best possible 32359 (920.56 seconds)
Cbc0010I After 2800 nodes, 160 on tree, 1e+50 best solution, best possible 32359 (952.24 seconds)
Cbc0010I After 2900 nodes, 161 on tree, 1e+50 best solution, best possible 32359 (982.35 seconds)
Cbc0010I After 3000 nodes, 161 on tree, 1e+50 best solution, best possible 32359 (1014.34 seconds)
Cbc0010I After 3100 nodes, 162 on tree, 1e+50 best solution, best possible 32359 (1045.72 seconds)
Cbc0010I After 3200 nodes, 165 on tree, 1e+50 best solution, best possible 32359 (1074.70 seconds)
Cbc0010I After 3300 nodes, 167 on tree, 1e+50 best solution, best possible 32359 (1103.85 seconds)
Cbc0010I After 3400 nodes, 168 on tree, 1e+50 best solution, best possible 32359 (1135.66 seconds)
Cbc0010I After 3500 nodes, 168 on tree, 1e+50 best solution, best possible 32359 (1164.61 seconds)
Cbc0010I After 3600 nodes, 172 on tree, 1e+50 best solution, best possible 32359 (1195.39 seconds)
Cbc0010I After 3700 nodes, 174 on tree, 1e+50 best solution, best possible 32359 (1227.35 seconds)
Cbc0010I After 3800 nodes, 175 on tree, 1e+50 best solution, best possible 32359 (1260.50 seconds)
Cbc0010I After 3900 nodes, 176 on tree, 1e+50 best solution, best possible 32359 (1293.31 seconds)
Cbc0010I After 4000 nodes, 178 on tree, 1e+50 best solution, best possible 32359 (1327.33 seconds)
Cbc0010I After 4100 nodes, 183 on tree, 1e+50 best solution, best possible 32359 (1358.33 seconds)
Cbc0010I After 4200 nodes, 181 on tree, 1e+50 best solution, best possible 32359 (1388.40 seconds)
Cbc0010I After 4300 nodes, 183 on tree, 1e+50 best solution, best possible 32359 (1415.92 seconds)
Cbc0010I After 4400 nodes, 185 on tree, 1e+50 best solution, best possible 32359 (1442.24 seconds)
Cbc0010I After 4500 nodes, 185 on tree, 1e+50 best solution, best possible 32359 (1468.65 seconds)
Cbc0010I After 4600 nodes, 187 on tree, 1e+50 best solution, best possible 32359 (1500.42 seconds)
Cbc0010I After 4700 nodes, 184 on tree, 1e+50 best solution, best possible 32359 (1529.26 seconds)
Cbc0010I After 4800 nodes, 186 on tree, 1e+50 best solution, best possible 32359 (1556.88 seconds)
Cbc0010I After 4900 nodes, 187 on tree, 1e+50 best solution, best possible 32359 (1586.40 seconds)
Cbc0010I After 5000 nodes, 188 on tree, 1e+50 best solution, best possible 32359 (1615.79 seconds)
Cbc0010I After 5100 nodes, 187 on tree, 1e+50 best solution, best possible 32360 (1643.40 seconds)
Cbc0010I After 5200 nodes, 190 on tree, 1e+50 best solution, best possible 32360 (1673.31 seconds)
Cbc0010I After 5300 nodes, 192 on tree, 1e+50 best solution, best possible 32360 (1705.44 seconds)
Cbc0010I After 5400 nodes, 190 on tree, 1e+50 best solution, best possible 32360 (1738.73 seconds)
Cbc0010I After 5500 nodes, 193 on tree, 1e+50 best solution, best possible 32360 (1769.14 seconds)
Cbc0010I After 5600 nodes, 191 on tree, 1e+50 best solution, best possible 32360 (1799.18 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 32360), took 5784150 iterations and 5602 nodes (1799.77 seconds)
Cbc0032I Strong branching done 17244 times (1536471 iterations), fathomed 163 nodes and fixed 289 variables
Cbc0035I Maximum depth 1235, 0 variables fixed on reduced cost
Cuts at root node changed objective from 32307.4 to 32356
Probing was tried 11 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.068 seconds)
Gomory was tried 915 times and created 2384 cuts of which 0 were active after adding rounds of cuts (6.129 seconds)
Knapsack was tried 915 times and created 11746 cuts of which 0 were active after adding rounds of cuts (1.281 seconds)
Clique was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
MixedIntegerRounding2 was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
FlowCover was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
TwoMirCuts was tried 11 times and created 29 cuts of which 0 were active after adding rounds of cuts (0.165 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.034 seconds)

Result - Stopped on time limit

No feasible solution found
Lower bound:                    32360.000
Enumerated nodes:               5602
Total iterations:               5784150
Time (CPU seconds):             1799.77
Time (Wallclock seconds):       1801.22

Total time (CPU seconds):       1799.79   (Wallclock seconds):       1801.24

