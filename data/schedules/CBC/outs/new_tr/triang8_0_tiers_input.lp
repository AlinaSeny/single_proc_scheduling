Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_tr/order/triang8_0_tiers_input.lp sec 1800 solve solu solutions/new_tr/triang8_0_tiers_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 260.856 - 0.41 seconds
Cgl0002I 776 variables fixed
Cgl0003I 0 fixed, 1 tightened bounds, 643 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 62 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 2630 rows, 916 columns (916 integer (880 of which binary)) and 8559 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 916 objects (916 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 472 integers unsatisfied sum - 110.728
Cbc0038I Pass   1: suminf.   47.18943 (370) obj. 323.577 iterations 928
Cbc0038I Pass   2: suminf.   45.92047 (388) obj. 325.062 iterations 91
Cbc0038I Pass   3: suminf.   44.78763 (394) obj. 325.418 iterations 61
Cbc0038I Pass   4: suminf.   38.92353 (367) obj. 329.599 iterations 225
Cbc0038I Pass   5: suminf.   38.25949 (369) obj. 327.308 iterations 36
Cbc0038I Pass   6: suminf.   38.11736 (301) obj. 336.097 iterations 314
Cbc0038I Pass   7: suminf.   38.86052 (310) obj. 333.451 iterations 37
Cbc0038I Pass   8: suminf.   37.61360 (249) obj. 348.211 iterations 233
Cbc0038I Pass   9: suminf.   35.68806 (242) obj. 350.362 iterations 97
Cbc0038I Pass  10: suminf.   27.52635 (186) obj. 344.233 iterations 181
Cbc0038I Pass  11: suminf.   27.31653 (190) obj. 345.133 iterations 107
Cbc0038I Pass  12: suminf.   22.09315 (162) obj. 358.987 iterations 150
Cbc0038I Pass  13: suminf.   18.80283 (149) obj. 345.59 iterations 161
Cbc0038I Pass  14: suminf.   18.53609 (152) obj. 345.58 iterations 26
Cbc0038I Pass  15: suminf.   19.60904 (145) obj. 345.556 iterations 70
Cbc0038I Pass  16: suminf.   19.29534 (147) obj. 345.544 iterations 42
Cbc0038I Pass  17: suminf.   15.73729 (144) obj. 356.847 iterations 132
Cbc0038I Pass  18: suminf.   14.73180 (145) obj. 356.681 iterations 57
Cbc0038I Pass  19: suminf.   11.86529 (136) obj. 356.889 iterations 100
Cbc0038I Pass  20: suminf.   11.34718 (133) obj. 356.709 iterations 42
Cbc0038I Pass  21: suminf.    9.36263 (104) obj. 356.667 iterations 98
Cbc0038I Pass  22: suminf.    8.94685 (98) obj. 357.871 iterations 67
Cbc0038I Pass  23: suminf.    8.41636 (71) obj. 336.205 iterations 248
Cbc0038I Pass  24: suminf.    5.32396 (73) obj. 333.717 iterations 208
Cbc0038I Pass  25: suminf.    4.67559 (31) obj. 398 iterations 551
Cbc0038I Pass  26: suminf.    0.53803 (13) obj. 398 iterations 106
Cbc0038I Pass  27: suminf.    0.00000 (0) obj. 398 iterations 15
Cbc0038I Solution found of 398
Cbc0038I Cleaned solution of 398
Cbc0038I Before mini branch and bound, 255 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2630 rows 916 columns, reduced to 2099 rows 660 columns - 67 fixed gives 1453, 441 - still too large
Cbc0038I Mini branch and bound did not improve solution (1.46 seconds)
Cbc0038I Round again with cutoff of 383.393
Cbc0038I Pass  28: suminf.   47.18943 (370) obj. 323.577 iterations 0
Cbc0038I Pass  29: suminf.   45.92047 (388) obj. 325.062 iterations 102
Cbc0038I Pass  30: suminf.   44.78763 (394) obj. 325.418 iterations 65
Cbc0038I Pass  31: suminf.   37.96370 (368) obj. 327.304 iterations 380
Cbc0038I Pass  32: suminf.   37.65762 (365) obj. 327.515 iterations 36
Cbc0038I Pass  33: suminf.   39.03640 (314) obj. 331.19 iterations 222
Cbc0038I Pass  34: suminf.   37.68904 (314) obj. 323.972 iterations 66
Cbc0038I Pass  35: suminf.   38.23412 (281) obj. 342.812 iterations 130
Cbc0038I Pass  36: suminf.   37.58145 (282) obj. 350.471 iterations 38
Cbc0038I Pass  37: suminf.   37.63280 (282) obj. 352.348 iterations 7
Cbc0038I Pass  38: suminf.   34.29814 (237) obj. 365.657 iterations 224
Cbc0038I Pass  39: suminf.   33.70038 (237) obj. 345.609 iterations 110
Cbc0038I Pass  40: suminf.   34.06286 (238) obj. 345.161 iterations 9
Cbc0038I Pass  41: suminf.   32.42990 (214) obj. 357.212 iterations 227
Cbc0038I Pass  42: suminf.   30.86546 (222) obj. 362.993 iterations 74
Cbc0038I Pass  43: suminf.   30.94536 (221) obj. 383.393 iterations 18
Cbc0038I Pass  44: suminf.   22.13393 (170) obj. 383.393 iterations 246
Cbc0038I Pass  45: suminf.   21.16739 (168) obj. 383.393 iterations 85
Cbc0038I Pass  46: suminf.   20.03821 (164) obj. 383.393 iterations 88
Cbc0038I Pass  47: suminf.   12.82859 (99) obj. 383.393 iterations 192
Cbc0038I Pass  48: suminf.   11.07701 (111) obj. 383.393 iterations 59
Cbc0038I Pass  49: suminf.   10.33257 (117) obj. 383.393 iterations 47
Cbc0038I Pass  50: suminf.   10.38073 (119) obj. 383.393 iterations 34
Cbc0038I Pass  51: suminf.    5.63561 (75) obj. 383.393 iterations 102
Cbc0038I Pass  52: suminf.    5.43337 (73) obj. 383.393 iterations 113
Cbc0038I Pass  53: suminf.    7.05396 (64) obj. 383.393 iterations 187
Cbc0038I Pass  54: suminf.    3.30847 (52) obj. 383.393 iterations 34
Cbc0038I Pass  55: suminf.    4.91722 (41) obj. 383.393 iterations 177
Cbc0038I Pass  56: suminf.    3.58064 (35) obj. 383.393 iterations 42
Cbc0038I Pass  57: suminf.    5.89176 (30) obj. 383.393 iterations 127
Cbc0038I Pass  58: suminf.    3.02744 (28) obj. 383.393 iterations 107
Cbc0038I Pass  59: suminf.    1.98867 (17) obj. 383.393 iterations 29
Cbc0038I Pass  60: suminf.    2.67574 (32) obj. 383.393 iterations 90
Cbc0038I Pass  61: suminf.    1.76357 (23) obj. 383.393 iterations 7
Cbc0038I Pass  62: suminf.    5.07349 (43) obj. 383.393 iterations 142
Cbc0038I Pass  63: suminf.    6.94093 (46) obj. 383.393 iterations 115
Cbc0038I Pass  64: suminf.    1.88810 (19) obj. 383.393 iterations 47
Cbc0038I Pass  65: suminf.    4.73461 (39) obj. 383.393 iterations 114
Cbc0038I Pass  66: suminf.    5.22221 (36) obj. 383.393 iterations 134
Cbc0038I Pass  67: suminf.    0.39278 (1) obj. 383.393 iterations 34
Cbc0038I Solution found of 383.393
Cbc0038I Branch and bound needed to clear up 1 general integers
Cbc0038I Full problem 2631 rows 916 columns, reduced to 0 rows 0 columns
Cbc0038I Cleaned solution of 335
Cbc0038I Before mini branch and bound, 253 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2630 rows 916 columns, reduced to 2103 rows 662 columns - 224 fixed gives 763, 213 - ok now
Cbc0038I Full problem 2630 rows 916 columns, reduced to 61 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (2.16 seconds)
Cbc0038I Round again with cutoff of 319.385
Cbc0038I Pass  68: suminf.   47.45636 (377) obj. 319 iterations 25
Cbc0038I Pass  69: suminf.   44.62812 (392) obj. 319.385 iterations 115
Cbc0038I Pass  70: suminf.   40.63289 (360) obj. 319.385 iterations 272
Cbc0038I Pass  71: suminf.   40.25635 (358) obj. 319.385 iterations 45
Cbc0038I Pass  72: suminf.   41.62061 (279) obj. 319.385 iterations 283
Cbc0038I Pass  73: suminf.   40.71504 (285) obj. 319.385 iterations 37
Cbc0038I Pass  74: suminf.   40.42620 (282) obj. 319.385 iterations 22
Cbc0038I Pass  75: suminf.   41.61275 (254) obj. 319.385 iterations 109
Cbc0038I Pass  76: suminf.   39.14322 (258) obj. 319.385 iterations 68
Cbc0038I Pass  77: suminf.   39.17872 (258) obj. 319.385 iterations 19
Cbc0038I Pass  78: suminf.   38.67058 (259) obj. 319.385 iterations 42
Cbc0038I Pass  79: suminf.   38.27754 (238) obj. 319.385 iterations 50
Cbc0038I Pass  80: suminf.   36.37063 (241) obj. 319.385 iterations 46
Cbc0038I Pass  81: suminf.   34.87754 (240) obj. 319.385 iterations 55
Cbc0038I Pass  82: suminf.   35.92991 (239) obj. 319.385 iterations 31
Cbc0038I Pass  83: suminf.   31.30325 (201) obj. 319.385 iterations 188
Cbc0038I Pass  84: suminf.   29.76653 (208) obj. 319.385 iterations 185
Cbc0038I Pass  85: suminf.   31.12875 (204) obj. 319.385 iterations 65
Cbc0038I Pass  86: suminf.   30.78579 (202) obj. 319.385 iterations 57
Cbc0038I Pass  87: suminf.   30.77565 (201) obj. 319.385 iterations 5
Cbc0038I Pass  88: suminf.   23.07160 (170) obj. 319.385 iterations 205
Cbc0038I Pass  89: suminf.   22.70543 (171) obj. 319.385 iterations 65
Cbc0038I Pass  90: suminf.   23.74671 (172) obj. 319.385 iterations 110
Cbc0038I Pass  91: suminf.   22.14250 (174) obj. 319.385 iterations 77
Cbc0038I Pass  92: suminf.   22.59399 (171) obj. 319.385 iterations 98
Cbc0038I Pass  93: suminf.   22.68698 (171) obj. 319.385 iterations 70
Cbc0038I Pass  94: suminf.   22.53763 (176) obj. 319.385 iterations 20
Cbc0038I Pass  95: suminf.   24.48200 (180) obj. 319.385 iterations 118
Cbc0038I Pass  96: suminf.   24.20585 (182) obj. 319.385 iterations 76
Cbc0038I Pass  97: suminf.   23.11110 (175) obj. 319.385 iterations 99
Cbc0038I Pass  98: suminf.   23.10889 (175) obj. 319.385 iterations 8
Cbc0038I Pass  99: suminf.   17.31667 (152) obj. 319.385 iterations 244
Cbc0038I Pass 100: suminf.   17.76082 (156) obj. 319.385 iterations 70
Cbc0038I Pass 101: suminf.   17.60679 (143) obj. 319.385 iterations 112
Cbc0038I Pass 102: suminf.   17.22891 (143) obj. 319.385 iterations 46
Cbc0038I Pass 103: suminf.   18.41865 (144) obj. 319.385 iterations 95
Cbc0038I Pass 104: suminf.   18.44467 (143) obj. 319.385 iterations 23
Cbc0038I Pass 105: suminf.   18.86758 (145) obj. 319.385 iterations 128
Cbc0038I Pass 106: suminf.   17.26364 (149) obj. 319.385 iterations 69
Cbc0038I Pass 107: suminf.   18.50798 (147) obj. 319.385 iterations 119
Cbc0038I Pass 108: suminf.   15.20319 (142) obj. 319.385 iterations 41
Cbc0038I Pass 109: suminf.   14.57969 (148) obj. 319.385 iterations 60
Cbc0038I Pass 110: suminf.   16.58279 (133) obj. 319.385 iterations 123
Cbc0038I Pass 111: suminf.   16.29246 (130) obj. 319.385 iterations 33
Cbc0038I Pass 112: suminf.   15.65439 (111) obj. 319.385 iterations 145
Cbc0038I Pass 113: suminf.   12.06620 (116) obj. 319.385 iterations 67
Cbc0038I Pass 114: suminf.   12.77067 (104) obj. 319.385 iterations 163
Cbc0038I Pass 115: suminf.   12.05843 (104) obj. 319.385 iterations 49
Cbc0038I Pass 116: suminf.    9.67398 (79) obj. 319.385 iterations 74
Cbc0038I Pass 117: suminf.    8.77535 (92) obj. 319.385 iterations 44
Cbc0038I Pass 118: suminf.    9.46785 (100) obj. 319.385 iterations 104
Cbc0038I Pass 119: suminf.    8.42806 (96) obj. 319.385 iterations 97
Cbc0038I Pass 120: suminf.    8.35473 (83) obj. 319.385 iterations 80
Cbc0038I Pass 121: suminf.    8.24405 (87) obj. 319.385 iterations 131
Cbc0038I Pass 122: suminf.    9.12538 (69) obj. 318.701 iterations 148
Cbc0038I Pass 123: suminf.    7.77022 (71) obj. 319.385 iterations 122
Cbc0038I Pass 124: suminf.   17.09208 (97) obj. 319.385 iterations 179
Cbc0038I Pass 125: suminf.   11.13975 (105) obj. 319.385 iterations 81
Cbc0038I Pass 126: suminf.   11.13975 (105) obj. 319.385 iterations 6
Cbc0038I Pass 127: suminf.    7.78436 (66) obj. 319.385 iterations 230
Cbc0038I Pass 128: suminf.    5.84781 (56) obj. 319.385 iterations 82
Cbc0038I Pass 129: suminf.    8.69201 (78) obj. 319.385 iterations 74
Cbc0038I Pass 130: suminf.    7.26980 (73) obj. 319.385 iterations 46
Cbc0038I Pass 131: suminf.    6.91516 (74) obj. 319.385 iterations 35
Cbc0038I Pass 132: suminf.   12.28205 (71) obj. 319.385 iterations 164
Cbc0038I Pass 133: suminf.    5.90400 (60) obj. 319.385 iterations 114
Cbc0038I Pass 134: suminf.    5.90400 (60) obj. 319.385 iterations 3
Cbc0038I Pass 135: suminf.   10.97826 (93) obj. 319.385 iterations 137
Cbc0038I Pass 136: suminf.    7.59549 (76) obj. 319.385 iterations 115
Cbc0038I Pass 137: suminf.    7.24355 (77) obj. 319.385 iterations 26
Cbc0038I Pass 138: suminf.    8.14593 (70) obj. 319.385 iterations 44
Cbc0038I Pass 139: suminf.    5.94816 (60) obj. 319.385 iterations 26
Cbc0038I Pass 140: suminf.    5.91637 (60) obj. 319.385 iterations 17
Cbc0038I Pass 141: suminf.   10.43251 (83) obj. 319.385 iterations 132
Cbc0038I Pass 142: suminf.    5.54619 (63) obj. 319.385 iterations 156
Cbc0038I Pass 143: suminf.   10.10589 (74) obj. 319.385 iterations 100
Cbc0038I Pass 144: suminf.    6.64471 (70) obj. 319.385 iterations 51
Cbc0038I Pass 145: suminf.    6.62975 (63) obj. 319.385 iterations 6
Cbc0038I Pass 146: suminf.    6.89823 (66) obj. 319.385 iterations 63
Cbc0038I Pass 147: suminf.    5.91637 (60) obj. 319.385 iterations 50
Cbc0038I Pass 148: suminf.    8.43151 (73) obj. 319.385 iterations 87
Cbc0038I Pass 149: suminf.    5.54619 (63) obj. 319.385 iterations 61
Cbc0038I Pass 150: suminf.    9.17975 (79) obj. 319.385 iterations 138
Cbc0038I Pass 151: suminf.    6.86972 (69) obj. 319.385 iterations 45
Cbc0038I Pass 152: suminf.    6.94027 (72) obj. 319.385 iterations 31
Cbc0038I Pass 153: suminf.    7.74195 (66) obj. 319.385 iterations 134
Cbc0038I Pass 154: suminf.    5.86686 (56) obj. 319.385 iterations 45
Cbc0038I Pass 155: suminf.   14.52654 (88) obj. 319.385 iterations 179
Cbc0038I Pass 156: suminf.    5.94816 (60) obj. 319.385 iterations 96
Cbc0038I Pass 157: suminf.    5.93450 (60) obj. 319.385 iterations 7
Cbc0038I Pass 158: suminf.   12.64058 (102) obj. 319.385 iterations 142
Cbc0038I Pass 159: suminf.    7.51400 (84) obj. 319.385 iterations 133
Cbc0038I Pass 160: suminf.    6.89109 (84) obj. 319.385 iterations 10
Cbc0038I Pass 161: suminf.    6.87556 (86) obj. 319.385 iterations 9
Cbc0038I Pass 162: suminf.    7.82768 (81) obj. 319.385 iterations 94
Cbc0038I Pass 163: suminf.    5.88332 (68) obj. 319.385 iterations 36
Cbc0038I Pass 164: suminf.    7.57463 (96) obj. 319.385 iterations 89
Cbc0038I Pass 165: suminf.    5.89697 (68) obj. 319.385 iterations 109
Cbc0038I Pass 166: suminf.   47.76860 (271) obj. 319.385 iterations 548
Cbc0038I Pass 167: suminf.   81.54378 (342) obj. 319.385 iterations 672
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 182 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2630 rows 916 columns, reduced to 2251 rows 733 columns - 237 fixed gives 838, 246 - ok now
Cbc0038I Mini branch and bound did not improve solution (3.43 seconds)
Cbc0038I After 3.43 seconds - Feasibility pump exiting with objective of 335 - took 2.76 seconds
Cbc0012I Integer solution of 335 found by feasibility pump after 0 iterations and 0 nodes (3.43 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1766 rows 497 columns - 210 fixed gives 214, 39 - ok now
Cbc0031I 31 added rows had average density of 27.677419
Cbc0013I At root node, 31 cuts changed objective from 260.92695 to 269.31053 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 203 row cuts average 2.1 elements, 7 column cuts (7 active)  in 0.056 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 62 row cuts average 588.2 elements, 0 column cuts (0 active)  in 0.229 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 12 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 158 row cuts average 167.8 elements, 0 column cuts (0 active)  in 0.257 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 335 best solution, best possible 269.31053 (7.13 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1594 rows 438 columns - 181 fixed gives 107, 24 - ok now
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1564 rows 426 columns - 182 fixed gives 23, 9 - ok now
Cbc0010I After 100 nodes, 6 on tree, 335 best solution, best possible 274 (46.28 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1345 rows 405 columns - 168 fixed gives 123, 27 - ok now
Cbc0010I After 200 nodes, 3 on tree, 335 best solution, best possible 275 (71.24 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1439 rows 425 columns - 184 fixed gives 29, 11 - ok now
Cbc0010I After 300 nodes, 3 on tree, 335 best solution, best possible 277 (93.58 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 938 rows 261 columns
Cbc0010I After 400 nodes, 11 on tree, 335 best solution, best possible 278 (116.34 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1632 rows 462 columns - 203 fixed gives 146, 36 - ok now
Cbc0010I After 500 nodes, 8 on tree, 335 best solution, best possible 281 (140.73 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1551 rows 419 columns - 178 fixed gives 102, 19 - ok now
Cbc0010I After 600 nodes, 7 on tree, 335 best solution, best possible 281 (166.96 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1021 rows 290 columns
Cbc0010I After 700 nodes, 9 on tree, 335 best solution, best possible 281 (188.69 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1348 rows 400 columns - 161 fixed gives 148, 28 - ok now
Cbc0010I After 800 nodes, 5 on tree, 335 best solution, best possible 281 (206.64 seconds)
Cbc0010I After 900 nodes, 11 on tree, 335 best solution, best possible 282 (225.05 seconds)
Cbc0010I After 1000 nodes, 10 on tree, 335 best solution, best possible 282 (238.87 seconds)
Cbc0010I After 1100 nodes, 8 on tree, 335 best solution, best possible 284 (257.46 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 936 rows 263 columns
Cbc0010I After 1200 nodes, 15 on tree, 335 best solution, best possible 285 (273.02 seconds)
Cbc0010I After 1300 nodes, 12 on tree, 335 best solution, best possible 286 (286.41 seconds)
Cbc0010I After 1400 nodes, 27 on tree, 335 best solution, best possible 286 (298.77 seconds)
Cbc0010I After 1500 nodes, 9 on tree, 335 best solution, best possible 286 (312.01 seconds)
Cbc0010I After 1600 nodes, 9 on tree, 335 best solution, best possible 286 (323.06 seconds)
Cbc0010I After 1700 nodes, 9 on tree, 335 best solution, best possible 287 (332.46 seconds)
Cbc0010I After 1800 nodes, 10 on tree, 335 best solution, best possible 288 (343.51 seconds)
Cbc0010I After 1900 nodes, 21 on tree, 335 best solution, best possible 289 (352.55 seconds)
Cbc0010I After 2000 nodes, 12 on tree, 335 best solution, best possible 289 (361.07 seconds)
Cbc0010I After 2100 nodes, 27 on tree, 335 best solution, best possible 289 (371.14 seconds)
Cbc0010I After 2200 nodes, 30 on tree, 335 best solution, best possible 289 (380.35 seconds)
Cbc0010I After 2300 nodes, 13 on tree, 335 best solution, best possible 289 (391.91 seconds)
Cbc0010I After 2400 nodes, 8 on tree, 335 best solution, best possible 289 (400.77 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1430 rows 392 columns - 175 fixed gives 167, 32 - ok now
Cbc0010I After 2500 nodes, 12 on tree, 335 best solution, best possible 289 (407.88 seconds)
Cbc0010I After 2600 nodes, 27 on tree, 335 best solution, best possible 289 (415.39 seconds)
Cbc0010I After 2700 nodes, 32 on tree, 335 best solution, best possible 289 (422.94 seconds)
Cbc0010I After 2800 nodes, 29 on tree, 335 best solution, best possible 289 (432.23 seconds)
Cbc0010I After 2900 nodes, 23 on tree, 335 best solution, best possible 289 (441.54 seconds)
Cbc0010I After 3000 nodes, 26 on tree, 335 best solution, best possible 289 (448.16 seconds)
Cbc0010I After 3100 nodes, 23 on tree, 335 best solution, best possible 289 (456.75 seconds)
Cbc0010I After 3200 nodes, 19 on tree, 335 best solution, best possible 289 (465.07 seconds)
Cbc0010I After 3300 nodes, 20 on tree, 335 best solution, best possible 289 (473.63 seconds)
Cbc0010I After 3400 nodes, 15 on tree, 335 best solution, best possible 289 (480.85 seconds)
Cbc0010I After 3500 nodes, 11 on tree, 335 best solution, best possible 289 (486.71 seconds)
Cbc0010I After 3600 nodes, 10 on tree, 335 best solution, best possible 289 (496.08 seconds)
Cbc0038I Full problem 2630 rows 916 columns, reduced to 1116 rows 327 columns
Cbc0004I Integer solution of 290 found after 2191446 iterations and 3693 nodes (505.09 seconds)
Cbc0001I Search completed - best objective 290, took 2191446 iterations and 3693 nodes (505.09 seconds)
Cbc0032I Strong branching done 16752 times (1200166 iterations), fathomed 240 nodes and fixed 1034 variables
Cbc0035I Maximum depth 60, 0 variables fixed on reduced cost
Cuts at root node changed objective from 260.927 to 269.311
Probing was tried 711 times and created 129865 cuts of which 0 were active after adding rounds of cuts (2.465 seconds)
Gomory was tried 10 times and created 62 cuts of which 0 were active after adding rounds of cuts (0.229 seconds)
Knapsack was tried 396 times and created 2442 cuts of which 0 were active after adding rounds of cuts (0.351 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
TwoMirCuts was tried 396 times and created 9279 cuts of which 0 were active after adding rounds of cuts (0.803 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
ImplicationCuts was tried 46 times and created 658 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)

Result - Optimal solution found

Objective value:                290.00000000
Enumerated nodes:               3693
Total iterations:               2191446
Time (CPU seconds):             505.17
Time (Wallclock seconds):       505.64

Total time (CPU seconds):       505.18   (Wallclock seconds):       505.66

