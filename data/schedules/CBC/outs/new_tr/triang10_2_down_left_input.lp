Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_tr/order/triang10_2_down_left_input.lp sec 1800 solve solu solutions/new_tr/triang10_2_down_left_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 329 - 4.14 seconds
Cgl0002I 1778 variables fixed
Cgl0003I 0 fixed, 1 tightened bounds, 1603 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 247 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 24 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 6699 rows, 2298 columns (2298 integer (2243 of which binary)) and 21836 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 2298 objects (2298 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 871 integers unsatisfied sum - 226.018
Cbc0038I Pass   1: (14.83 seconds) suminf.  103.58979 (803) obj. 423.95 iterations 3226
Cbc0038I Pass   2: (15.04 seconds) suminf.   94.19768 (801) obj. 428.222 iterations 471
Cbc0038I Pass   3: (15.11 seconds) suminf.   93.15243 (789) obj. 428.405 iterations 128
Cbc0038I Pass   4: (15.15 seconds) suminf.   92.72131 (795) obj. 427.968 iterations 78
Cbc0038I Pass   5: (15.18 seconds) suminf.   92.50391 (778) obj. 427.183 iterations 35
Cbc0038I Pass   6: (15.22 seconds) suminf.   92.07476 (775) obj. 427.053 iterations 81
Cbc0038I Pass   7: (15.50 seconds) suminf.   78.95050 (769) obj. 423.399 iterations 647
Cbc0038I Pass   8: (15.55 seconds) suminf.   77.57581 (752) obj. 423.35 iterations 97
Cbc0038I Pass   9: (15.71 seconds) suminf.   74.37984 (747) obj. 422.692 iterations 322
Cbc0038I Pass  10: (15.73 seconds) suminf.   73.26696 (745) obj. 423.032 iterations 34
Cbc0038I Pass  11: (15.85 seconds) suminf.   75.89878 (739) obj. 423.988 iterations 214
Cbc0038I Pass  12: (15.96 seconds) suminf.   73.98198 (752) obj. 421.28 iterations 185
Cbc0038I Pass  13: (16.11 seconds) suminf.   74.18660 (720) obj. 424.512 iterations 299
Cbc0038I Pass  14: (16.16 seconds) suminf.   76.00575 (736) obj. 423.265 iterations 93
Cbc0038I Pass  15: (16.29 seconds) suminf.   73.72826 (750) obj. 421.992 iterations 218
Cbc0038I Pass  16: (16.43 seconds) suminf.   76.95224 (715) obj. 423.363 iterations 265
Cbc0038I Pass  17: (16.47 seconds) suminf.   77.48736 (731) obj. 422.193 iterations 57
Cbc0038I Pass  18: (16.61 seconds) suminf.   75.90759 (735) obj. 424.38 iterations 259
Cbc0038I Pass  19: (16.70 seconds) suminf.   76.01457 (731) obj. 423.152 iterations 159
Cbc0038I Pass  20: (16.95 seconds) suminf.   73.53801 (690) obj. 428.386 iterations 589
Cbc0038I Pass  21: (17.00 seconds) suminf.   73.53728 (689) obj. 428.65 iterations 92
Cbc0038I Pass  22: (17.05 seconds) suminf.   71.99314 (684) obj. 428.646 iterations 102
Cbc0038I Pass  23: (17.27 seconds) suminf.   69.92030 (690) obj. 423.546 iterations 498
Cbc0038I Pass  24: (17.34 seconds) suminf.   68.21995 (701) obj. 423.165 iterations 138
Cbc0038I Pass  25: (17.39 seconds) suminf.   68.36241 (703) obj. 422.772 iterations 91
Cbc0038I Pass  26: (17.56 seconds) suminf.   71.93293 (692) obj. 422.102 iterations 384
Cbc0038I Pass  27: (17.63 seconds) suminf.   69.96048 (712) obj. 421.581 iterations 127
Cbc0038I Pass  28: (17.78 seconds) suminf.   70.67609 (683) obj. 421.317 iterations 333
Cbc0038I Pass  29: (17.88 seconds) suminf.   67.85754 (675) obj. 421.817 iterations 169
Cbc0038I Pass  30: (17.93 seconds) suminf.   66.47970 (681) obj. 420.843 iterations 108
Cbc0038I Pass  31: (18.06 seconds) suminf.   62.71988 (664) obj. 420.226 iterations 277
Cbc0038I Pass  32: (18.15 seconds) suminf.   59.36554 (665) obj. 418.996 iterations 186
Cbc0038I Pass  33: (18.32 seconds) suminf.   60.22361 (681) obj. 418.924 iterations 369
Cbc0038I Pass  34: (18.34 seconds) suminf.   60.14739 (690) obj. 419.066 iterations 18
Cbc0038I Pass  35: (18.52 seconds) suminf.   56.96608 (668) obj. 418.785 iterations 428
Cbc0038I Pass  36: (18.58 seconds) suminf.   56.14500 (672) obj. 419.447 iterations 111
Cbc0038I Pass  37: (18.62 seconds) suminf.   54.74108 (679) obj. 418.836 iterations 76
Cbc0038I Pass  38: (18.89 seconds) suminf.   49.62437 (667) obj. 417 iterations 666
Cbc0038I Pass  39: (18.92 seconds) suminf.   50.06192 (680) obj. 417 iterations 50
Cbc0038I Pass  40: (19.06 seconds) suminf.   51.16026 (666) obj. 440.391 iterations 322
Cbc0038I Pass  41: (19.14 seconds) suminf.   48.65075 (684) obj. 431.993 iterations 140
Cbc0038I Pass  42: (19.20 seconds) suminf.   46.93484 (665) obj. 417 iterations 114
Cbc0038I Pass  43: (19.35 seconds) suminf.   46.86154 (627) obj. 417 iterations 332
Cbc0038I Pass  44: (19.47 seconds) suminf.   49.31409 (651) obj. 418.999 iterations 205
Cbc0038I Pass  45: (19.59 seconds) suminf.   46.73429 (647) obj. 418.863 iterations 220
Cbc0038I Pass  46: (19.68 seconds) suminf.   48.37850 (651) obj. 420.266 iterations 166
Cbc0038I Pass  47: (19.87 seconds) suminf.   48.92334 (613) obj. 417.739 iterations 457
Cbc0038I Pass  48: (19.92 seconds) suminf.   47.38087 (629) obj. 417.307 iterations 128
Cbc0038I Pass  49: (20.01 seconds) suminf.   47.75857 (620) obj. 419.338 iterations 160
Cbc0038I Pass  50: (20.18 seconds) suminf.   47.13522 (641) obj. 471.371 iterations 363
Cbc0038I Pass  51: (20.25 seconds) suminf.   46.68887 (662) obj. 470.672 iterations 132
Cbc0038I Pass  52: (20.29 seconds) suminf.   46.35012 (663) obj. 472.276 iterations 64
Cbc0038I Pass  53: (20.52 seconds) suminf.   41.27441 (630) obj. 465.852 iterations 630
Cbc0038I Pass  54: (20.71 seconds) suminf.   38.85564 (626) obj. 442.142 iterations 428
Cbc0038I Pass  55: (20.72 seconds) suminf.   38.85564 (626) obj. 442.142 iterations 1
Cbc0038I Pass  56: (20.92 seconds) suminf.   40.27081 (652) obj. 418 iterations 536
Cbc0038I Pass  57: (20.99 seconds) suminf.   39.73507 (617) obj. 418 iterations 153
Cbc0038I Pass  58: (21.13 seconds) suminf.   40.00596 (623) obj. 426.717 iterations 350
Cbc0038I Pass  59: (21.29 seconds) suminf.   41.80625 (626) obj. 425.938 iterations 387
Cbc0038I Pass  60: (21.46 seconds) suminf.   41.47558 (647) obj. 418 iterations 407
Cbc0038I Pass  61: (21.54 seconds) suminf.   38.61511 (642) obj. 418.176 iterations 177
Cbc0038I Pass  62: (21.70 seconds) suminf.   38.42729 (639) obj. 420.117 iterations 347
Cbc0038I Pass  63: (21.75 seconds) suminf.   38.22147 (618) obj. 419.04 iterations 99
Cbc0038I Pass  64: (21.92 seconds) suminf.   42.39579 (645) obj. 418 iterations 419
Cbc0038I Pass  65: (22.07 seconds) suminf.   39.78581 (630) obj. 418 iterations 309
Cbc0038I Pass  66: (22.09 seconds) suminf.   38.97888 (634) obj. 418 iterations 41
Cbc0038I Pass  67: (22.25 seconds) suminf.   40.89143 (656) obj. 417.934 iterations 365
Cbc0038I Pass  68: (22.42 seconds) suminf.   38.32108 (623) obj. 418 iterations 300
Cbc0038I Pass  69: (22.51 seconds) suminf.   38.22147 (618) obj. 419.04 iterations 180
Cbc0038I Pass  70: (22.72 seconds) suminf.   46.38412 (657) obj. 417.987 iterations 550
Cbc0038I Pass  71: (22.84 seconds) suminf.   42.28381 (652) obj. 417.992 iterations 242
Cbc0038I Pass  72: (22.94 seconds) suminf.   43.62842 (660) obj. 418.022 iterations 178
Cbc0038I Pass  73: (23.17 seconds) suminf.   44.62456 (647) obj. 439.416 iterations 629
Cbc0038I Pass  74: (23.27 seconds) suminf.   41.64286 (665) obj. 438.955 iterations 167
Cbc0038I Pass  75: (23.31 seconds) suminf.   42.43847 (656) obj. 438.967 iterations 82
Cbc0038I Pass  76: (23.55 seconds) suminf.   33.82311 (626) obj. 443.895 iterations 598
Cbc0038I Pass  77: (23.67 seconds) suminf.   34.71433 (644) obj. 441.11 iterations 272
Cbc0038I Pass  78: (23.78 seconds) suminf.   35.73236 (639) obj. 435.665 iterations 208
Cbc0038I Pass  79: (23.95 seconds) suminf.   40.09216 (593) obj. 433.765 iterations 502
Cbc0038I Pass  80: (24.14 seconds) suminf.   36.68747 (641) obj. 438.908 iterations 504
Cbc0038I Pass  81: (24.19 seconds) suminf.   36.36255 (633) obj. 439.012 iterations 112
Cbc0038I Pass  82: (24.36 seconds) suminf.   36.22993 (627) obj. 440.026 iterations 443
Cbc0038I Pass  83: (24.50 seconds) suminf.   35.22373 (634) obj. 434.515 iterations 334
Cbc0038I Pass  84: (24.57 seconds) suminf.   34.74554 (628) obj. 435.221 iterations 195
Cbc0038I Pass  85: (24.75 seconds) suminf.   37.72449 (608) obj. 437.61 iterations 479
Cbc0038I Pass  86: (24.90 seconds) suminf.   35.98891 (645) obj. 436.106 iterations 385
Cbc0038I Pass  87: (24.97 seconds) suminf.   35.66506 (643) obj. 436.1 iterations 184
Cbc0038I Pass  88: (25.11 seconds) suminf.   35.94276 (620) obj. 439.463 iterations 345
Cbc0038I Pass  89: (25.18 seconds) suminf.   35.19430 (626) obj. 435.585 iterations 179
Cbc0038I Pass  90: (25.22 seconds) suminf.   35.06650 (623) obj. 435.591 iterations 81
Cbc0038I Pass  91: (25.26 seconds) suminf.   34.74554 (628) obj. 435.221 iterations 104
Cbc0038I Pass  92: (25.41 seconds) suminf.   34.83132 (621) obj. 437.943 iterations 393
Cbc0038I Pass  93: (25.54 seconds) suminf.   35.79373 (645) obj. 436.007 iterations 342
Cbc0038I Pass  94: (25.60 seconds) suminf.   35.72974 (654) obj. 435.066 iterations 144
Cbc0038I Pass  95: (25.74 seconds) suminf.   36.42211 (621) obj. 437.79 iterations 394
Cbc0038I Pass  96: (25.86 seconds) suminf.   35.89002 (641) obj. 435.637 iterations 257
Cbc0038I Pass  97: (26.05 seconds) suminf.   41.72762 (562) obj. 437.715 iterations 518
Cbc0038I Pass  98: (26.16 seconds) suminf.   41.85472 (552) obj. 438.796 iterations 219
Cbc0038I Pass  99: (26.32 seconds) suminf.   40.01193 (543) obj. 456.135 iterations 398
Cbc0038I Pass 100: (26.77 seconds) suminf.   64.31758 (547) obj. 572.355 iterations 1490
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 836 integers at bound fixed and 0 continuous
Cbc0038I Full problem 6699 rows 2298 columns, reduced to 3707 rows 1220 columns - too large
Cbc0038I Mini branch and bound did not improve solution (28.25 seconds)
Cbc0038I After 28.25 seconds - Feasibility pump exiting - took 14.82 seconds
Cbc0031I 25 added rows had average density of 12.28
Cbc0013I At root node, 25 cuts changed objective from 329 to 329 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 102 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.196 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 30 row cuts average 249.1 elements, 0 column cuts (0 active)  in 1.091 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 22 row cuts average 6.1 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 11.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 58 row cuts average 12.9 elements, 0 column cuts (0 active)  in 0.439 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 329 (39.01 seconds)
Cbc0010I After 100 nodes, 19 on tree, 1e+50 best solution, best possible 329 (241.65 seconds)
Cbc0010I After 200 nodes, 25 on tree, 1e+50 best solution, best possible 329 (414.90 seconds)
Cbc0010I After 300 nodes, 41 on tree, 1e+50 best solution, best possible 329 (566.55 seconds)
Cbc0010I After 400 nodes, 38 on tree, 1e+50 best solution, best possible 329 (724.63 seconds)
Cbc0010I After 500 nodes, 37 on tree, 1e+50 best solution, best possible 329 (901.83 seconds)
Cbc0010I After 600 nodes, 34 on tree, 1e+50 best solution, best possible 329 (1045.72 seconds)
Cbc0010I After 700 nodes, 19 on tree, 1e+50 best solution, best possible 329 (1230.77 seconds)
Cbc0010I After 800 nodes, 6 on tree, 1e+50 best solution, best possible 329 (1390.14 seconds)
Cbc0010I After 900 nodes, 30 on tree, 1e+50 best solution, best possible 329 (1590.48 seconds)
Cbc0010I After 1000 nodes, 43 on tree, 1e+50 best solution, best possible 329 (1730.88 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 329), took 2135059 iterations and 1043 nodes (1795.56 seconds)
Cbc0032I Strong branching done 10776 times (937370 iterations), fathomed 53 nodes and fixed 637 variables
Cbc0035I Maximum depth 49, 0 variables fixed on reduced cost
Cuts at root node changed objective from 329 to 329
Probing was tried 195 times and created 21793 cuts of which 0 were active after adding rounds of cuts (1.069 seconds)
Gomory was tried 178 times and created 625 cuts of which 0 were active after adding rounds of cuts (3.286 seconds)
Knapsack was tried 178 times and created 973 cuts of which 0 were active after adding rounds of cuts (0.412 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.027 seconds)
MixedIntegerRounding2 was tried 10 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.028 seconds)
FlowCover was tried 10 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.021 seconds)
TwoMirCuts was tried 10 times and created 58 cuts of which 0 were active after adding rounds of cuts (0.439 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.085 seconds)
ImplicationCuts was tried 31 times and created 29 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)

Result - Stopped on time limit

No feasible solution found
Lower bound:                    329.000
Enumerated nodes:               1043
Total iterations:               2135059
Time (CPU seconds):             1795.56
Time (Wallclock seconds):       1800.09

Total time (CPU seconds):       1795.61   (Wallclock seconds):       1800.15

