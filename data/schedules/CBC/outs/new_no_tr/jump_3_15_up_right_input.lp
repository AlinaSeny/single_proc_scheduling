Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/jump_3_15_up_right_input.lp sec 1800 solve solu solutions/new_no_tr/jump_3_15_up_right_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 20480 - 0.01 seconds
Cgl0002I 30 variables fixed
Cgl0003I 0 fixed, 2 tightened bounds, 112 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0004I processed model has 568 rows, 207 columns (207 integer (191 of which binary)) and 1862 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 207 objects (207 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 95 integers unsatisfied sum - 30.4239
Cbc0038I Pass   1: suminf.    4.89707 (33) obj. 24513.9 iterations 261
Cbc0038I Pass   2: suminf.    1.65471 (9) obj. 24576 iterations 32
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 24576 iterations 12
Cbc0038I Solution found of 24576
Cbc0038I Cleaned solution of 24576
Cbc0038I Before mini branch and bound, 100 integers at bound fixed and 0 continuous
Cbc0038I Full problem 568 rows 207 columns, reduced to 354 rows 107 columns - 14 fixed gives 261, 76 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 17 rows 6 columns
Cbc0038I Mini branch and bound improved solution from 24576 to 24576 (0.05 seconds)
Cbc0038I Round again with cutoff of 24165.5
Cbc0038I Reduced cost fixing fixed 6 variables on major pass 2
Cbc0038I Pass   4: suminf.    4.93103 (40) obj. 24165 iterations 33
Cbc0038I Pass   5: suminf.    2.25879 (20) obj. 24165.5 iterations 38
Cbc0038I Pass   6: suminf.    3.03352 (23) obj. 24165.5 iterations 177
Cbc0038I Pass   7: suminf.    3.86750 (24) obj. 24165.5 iterations 55
Cbc0038I Pass   8: suminf.    3.89833 (31) obj. 24165.5 iterations 7
Cbc0038I Pass   9: suminf.    6.93090 (18) obj. 24165.5 iterations 162
Cbc0038I Pass  10: suminf.    3.34058 (16) obj. 24165.5 iterations 34
Cbc0038I Pass  11: suminf.    2.21210 (20) obj. 24165.5 iterations 20
Cbc0038I Pass  12: suminf.    8.13627 (20) obj. 24165.5 iterations 138
Cbc0038I Pass  13: suminf.    1.99085 (15) obj. 24165.5 iterations 68
Cbc0038I Pass  14: suminf.   24.52081 (91) obj. 24165.5 iterations 235
Cbc0038I Pass  15: suminf.    8.90215 (46) obj. 24165.5 iterations 93
Cbc0038I Pass  16: suminf.    6.88449 (30) obj. 24165.5 iterations 38
Cbc0038I Pass  17: suminf.    5.44771 (28) obj. 24165.5 iterations 20
Cbc0038I Pass  18: suminf.    4.72227 (20) obj. 24165.5 iterations 86
Cbc0038I Pass  19: suminf.    0.70111 (19) obj. 24165.5 iterations 21
Cbc0038I Pass  20: suminf.    4.16315 (25) obj. 24165.5 iterations 107
Cbc0038I Pass  21: suminf.    3.35056 (23) obj. 24165.5 iterations 24
Cbc0038I Pass  22: suminf.    5.74865 (22) obj. 24165.5 iterations 57
Cbc0038I Pass  23: suminf.    1.66731 (6) obj. 24165.5 iterations 80
Cbc0038I Pass  24: suminf.    1.66731 (6) obj. 24165.5 iterations 8
Cbc0038I Pass  25: suminf.    2.25101 (6) obj. 24165.5 iterations 13
Cbc0038I Pass  26: suminf.   13.74549 (61) obj. 24165.5 iterations 111
Cbc0038I Pass  27: suminf.    8.06944 (47) obj. 24165.5 iterations 87
Cbc0038I Pass  28: suminf.    4.44394 (33) obj. 24165.5 iterations 78
Cbc0038I Pass  29: suminf.    4.44016 (33) obj. 24165.5 iterations 7
Cbc0038I Pass  30: suminf.    5.27621 (25) obj. 24165.5 iterations 91
Cbc0038I Pass  31: suminf.    3.49095 (14) obj. 24165.5 iterations 48
Cbc0038I Pass  32: suminf.    2.25101 (6) obj. 24165.5 iterations 28
Cbc0038I Pass  33: suminf.    2.25101 (6) obj. 24165.5 iterations 2
Cbc0038I Pass  34: suminf.    1.66731 (6) obj. 24165.5 iterations 8
Cbc0038I Pass  35: suminf.    5.96418 (64) obj. 24165.5 iterations 136
Cbc0038I Pass  36: suminf.    3.21411 (18) obj. 24165.5 iterations 67
Cbc0038I Pass  37: suminf.    2.25101 (6) obj. 24165.5 iterations 44
Cbc0038I Pass  38: suminf.    2.25101 (6) obj. 24165.5 iterations 3
Cbc0038I Pass  39: suminf.    1.66731 (6) obj. 24165.5 iterations 23
Cbc0038I Pass  40: suminf.   12.84694 (77) obj. 24165.5 iterations 124
Cbc0038I Pass  41: suminf.    6.19561 (40) obj. 24165.5 iterations 95
Cbc0038I Pass  42: suminf.    6.20266 (35) obj. 24165.5 iterations 26
Cbc0038I Pass  43: suminf.    7.96941 (26) obj. 24165.5 iterations 66
Cbc0038I Pass  44: suminf.    6.52926 (39) obj. 24165.5 iterations 43
Cbc0038I Pass  45: suminf.    9.78330 (53) obj. 24165.5 iterations 152
Cbc0038I Pass  46: suminf.    6.57539 (28) obj. 24165.5 iterations 88
Cbc0038I Pass  47: suminf.    4.45313 (29) obj. 24165.5 iterations 61
Cbc0038I Pass  48: suminf.    4.08825 (29) obj. 24165.5 iterations 17
Cbc0038I Pass  49: suminf.    5.27445 (27) obj. 24165.5 iterations 79
Cbc0038I Pass  50: suminf.    3.47483 (22) obj. 24165.5 iterations 31
Cbc0038I Pass  51: suminf.    5.14274 (32) obj. 24165.5 iterations 65
Cbc0038I Pass  52: suminf.    5.92254 (27) obj. 24165.5 iterations 178
Cbc0038I Pass  53: suminf.    2.91433 (20) obj. 24165.5 iterations 69
Cbc0038I Pass  54: suminf.    5.08584 (26) obj. 24165.5 iterations 59
Cbc0038I Pass  55: suminf.    5.25403 (26) obj. 24165.5 iterations 157
Cbc0038I Pass  56: suminf.    2.37418 (23) obj. 24165.5 iterations 61
Cbc0038I Pass  57: suminf.    4.55394 (21) obj. 24165.5 iterations 81
Cbc0038I Pass  58: suminf.    4.99955 (26) obj. 24165.5 iterations 24
Cbc0038I Pass  59: suminf.    3.44574 (22) obj. 24165.5 iterations 50
Cbc0038I Pass  60: suminf.    3.26885 (23) obj. 24165.5 iterations 11
Cbc0038I Pass  61: suminf.    5.10036 (24) obj. 24165.5 iterations 97
Cbc0038I Pass  62: suminf.    1.99712 (19) obj. 24165.5 iterations 86
Cbc0038I Pass  63: suminf.    2.25101 (6) obj. 24165.5 iterations 29
Cbc0038I Pass  64: suminf.    1.66731 (6) obj. 24165.5 iterations 11
Cbc0038I Pass  65: suminf.   14.64874 (72) obj. 24165.5 iterations 176
Cbc0038I Pass  66: suminf.   11.26980 (61) obj. 24165.5 iterations 117
Cbc0038I Pass  67: suminf.   11.21933 (63) obj. 24165.5 iterations 32
Cbc0038I Pass  68: suminf.    4.11055 (21) obj. 24165.5 iterations 164
Cbc0038I Pass  69: suminf.    3.16083 (22) obj. 24165.5 iterations 35
Cbc0038I Pass  70: suminf.    4.30448 (23) obj. 24165.5 iterations 58
Cbc0038I Pass  71: suminf.    3.87745 (23) obj. 24165.5 iterations 9
Cbc0038I Pass  72: suminf.    2.60123 (7) obj. 24165.5 iterations 59
Cbc0038I Pass  73: suminf.    2.25101 (6) obj. 24165.5 iterations 34
Cbc0038I Pass  74: suminf.    1.66731 (6) obj. 24165.5 iterations 31
Cbc0038I Pass  75: suminf.   16.79200 (82) obj. 24165.5 iterations 144
Cbc0038I Pass  76: suminf.    4.02029 (31) obj. 24165.5 iterations 94
Cbc0038I Pass  77: suminf.    4.02029 (31) obj. 24165.5 iterations 3
Cbc0038I Pass  78: suminf.    0.84184 (18) obj. 24165.5 iterations 70
Cbc0038I Pass  79: suminf.    0.82061 (20) obj. 24165.5 iterations 28
Cbc0038I Pass  80: suminf.    6.93090 (18) obj. 24165.5 iterations 109
Cbc0038I Pass  81: suminf.    3.34058 (16) obj. 24165.5 iterations 41
Cbc0038I Pass  82: suminf.    2.21210 (20) obj. 24165.5 iterations 33
Cbc0038I Pass  83: suminf.    8.13627 (20) obj. 24165.5 iterations 133
Cbc0038I Pass  84: suminf.    1.99085 (15) obj. 24165.5 iterations 82
Cbc0038I Pass  85: suminf.   13.24461 (61) obj. 24165.5 iterations 91
Cbc0038I Pass  86: suminf.    9.07368 (40) obj. 24165.5 iterations 62
Cbc0038I Pass  87: suminf.    7.58645 (41) obj. 24165.5 iterations 26
Cbc0038I Pass  88: suminf.    7.69482 (39) obj. 24165.5 iterations 67
Cbc0038I Pass  89: suminf.    6.33205 (35) obj. 24165.5 iterations 48
Cbc0038I Pass  90: suminf.    5.49526 (41) obj. 24165.5 iterations 18
Cbc0038I Pass  91: suminf.   11.85750 (58) obj. 24165.5 iterations 106
Cbc0038I Pass  92: suminf.    7.28556 (30) obj. 24165.5 iterations 132
Cbc0038I Pass  93: suminf.    3.84875 (16) obj. 24165.5 iterations 164
Cbc0038I Pass  94: suminf.    2.00321 (16) obj. 24165.5 iterations 17
Cbc0038I Pass  95: suminf.    0.82061 (20) obj. 24165.5 iterations 57
Cbc0038I Pass  96: suminf.    6.93090 (18) obj. 24165.5 iterations 136
Cbc0038I Pass  97: suminf.    3.34058 (16) obj. 24165.5 iterations 39
Cbc0038I Pass  98: suminf.    2.21210 (20) obj. 24165.5 iterations 20
Cbc0038I Pass  99: suminf.    8.13627 (20) obj. 24165.5 iterations 164
Cbc0038I Pass 100: suminf.    1.99085 (15) obj. 24165.5 iterations 67
Cbc0038I Pass 101: suminf.   15.23332 (66) obj. 24165.5 iterations 142
Cbc0038I Pass 102: suminf.    8.04352 (38) obj. 24165.5 iterations 65
Cbc0038I Pass 103: suminf.   20.07963 (81) obj. 24165.5 iterations 149
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 568 rows 207 columns, reduced to 541 rows 194 columns - 47 fixed gives 297, 95 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.35 seconds)
Cbc0038I After 0.35 seconds - Feasibility pump exiting with objective of 24576 - took 0.32 seconds
Cbc0012I Integer solution of 24576 found by feasibility pump after 0 iterations and 0 nodes (0.35 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 340 rows 101 columns - 41 fixed gives 195, 49 - ok now
Cbc0031I 18 added rows had average density of 56.444444
Cbc0013I At root node, 18 cuts changed objective from 20480 to 20480 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 29 row cuts average 2.9 elements, 7 column cuts (7 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 21 row cuts average 89.2 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 196 row cuts average 126.7 elements, 0 column cuts (0 active)  in 0.059 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 24576 best solution, best possible 20480 (0.58 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 347 rows 104 columns - 43 fixed gives 207, 55 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 337 rows 100 columns - 42 fixed gives 202, 53 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 337 rows 100 columns - 42 fixed gives 202, 53 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 337 rows 100 columns - 42 fixed gives 202, 53 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 337 rows 100 columns - 42 fixed gives 202, 53 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 337 rows 100 columns - 42 fixed gives 202, 53 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 337 rows 100 columns - 42 fixed gives 202, 53 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 337 rows 100 columns - 42 fixed gives 202, 53 - ok now
Cbc0010I After 1000 nodes, 2 on tree, 24576 best solution, best possible 20797 (11.51 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 389 rows 123 columns - 47 fixed gives 216, 59 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 342 rows 102 columns - 42 fixed gives 207, 55 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 338 rows 101 columns - 42 fixed gives 202, 53 - ok now
Cbc0010I After 2000 nodes, 2 on tree, 24576 best solution, best possible 20797 (21.17 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 338 rows 101 columns - 42 fixed gives 202, 53 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 342 rows 103 columns - 41 fixed gives 207, 55 - ok now
Cbc0010I After 3000 nodes, 2 on tree, 24576 best solution, best possible 20797 (28.69 seconds)
Cbc0010I After 4000 nodes, 3 on tree, 24576 best solution, best possible 20797 (36.21 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 336 rows 101 columns - 40 fixed gives 210, 56 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 336 rows 101 columns - 40 fixed gives 210, 56 - ok now
Cbc0010I After 5000 nodes, 2 on tree, 24576 best solution, best possible 20797 (41.88 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 336 rows 101 columns - 40 fixed gives 210, 56 - ok now
Cbc0038I Full problem 568 rows 207 columns, reduced to 176 rows 58 columns
Cbc0010I After 6000 nodes, 3 on tree, 24576 best solution, best possible 21790 (46.48 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 336 rows 101 columns - 40 fixed gives 210, 56 - ok now
Cbc0010I After 7000 nodes, 1 on tree, 24576 best solution, best possible 21903 (52.00 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 331 rows 99 columns - 40 fixed gives 205, 54 - ok now
Cbc0010I After 8000 nodes, 1 on tree, 24576 best solution, best possible 22003 (56.87 seconds)
Cbc0010I After 9000 nodes, 4 on tree, 24576 best solution, best possible 22094 (61.85 seconds)
Cbc0010I After 10000 nodes, 3 on tree, 24576 best solution, best possible 22175 (66.27 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 66 rows 23 columns
Cbc0010I After 11000 nodes, 3 on tree, 24576 best solution, best possible 22249 (70.84 seconds)
Cbc0010I After 12000 nodes, 5 on tree, 24576 best solution, best possible 22343 (75.68 seconds)
Cbc0010I After 13000 nodes, 3 on tree, 24576 best solution, best possible 22427 (80.28 seconds)
Cbc0010I After 14000 nodes, 2 on tree, 24576 best solution, best possible 22427 (84.68 seconds)
Cbc0010I After 15000 nodes, 3 on tree, 24576 best solution, best possible 22576 (89.56 seconds)
Cbc0010I After 16000 nodes, 3 on tree, 24576 best solution, best possible 22640 (93.77 seconds)
Cbc0010I After 17000 nodes, 4 on tree, 24576 best solution, best possible 22706 (97.96 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 97 rows 35 columns
Cbc0010I After 18000 nodes, 5 on tree, 24576 best solution, best possible 22706 (102.59 seconds)
Cbc0010I After 19000 nodes, 4 on tree, 24576 best solution, best possible 22837 (106.81 seconds)
Cbc0010I After 20000 nodes, 2 on tree, 24576 best solution, best possible 22929 (111.98 seconds)
Cbc0010I After 21000 nodes, 2 on tree, 24576 best solution, best possible 23024 (117.76 seconds)
Cbc0010I After 22000 nodes, 2 on tree, 24576 best solution, best possible 23112 (123.20 seconds)
Cbc0010I After 23000 nodes, 3 on tree, 24576 best solution, best possible 23204 (128.31 seconds)
Cbc0010I After 24000 nodes, 1 on tree, 24576 best solution, best possible 23304 (134.17 seconds)
Cbc0010I After 25000 nodes, 5 on tree, 24576 best solution, best possible 23381 (138.78 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 331 rows 99 columns - 40 fixed gives 205, 54 - ok now
Cbc0010I After 26000 nodes, 4 on tree, 24576 best solution, best possible 23466 (143.35 seconds)
Cbc0010I After 27000 nodes, 3 on tree, 24576 best solution, best possible 23555 (148.31 seconds)
Cbc0010I After 28000 nodes, 2 on tree, 24576 best solution, best possible 23597 (153.58 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 99 rows 36 columns
Cbc0010I After 29000 nodes, 5 on tree, 24576 best solution, best possible 23641 (158.81 seconds)
Cbc0010I After 30000 nodes, 5 on tree, 24576 best solution, best possible 23673 (163.12 seconds)
Cbc0010I After 31000 nodes, 4 on tree, 24576 best solution, best possible 23705 (167.46 seconds)
Cbc0010I After 32000 nodes, 1 on tree, 24576 best solution, best possible 23738 (172.00 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 203 rows 65 columns
Cbc0010I After 33000 nodes, 3 on tree, 24576 best solution, best possible 23772 (176.64 seconds)
Cbc0010I After 34000 nodes, 2 on tree, 24576 best solution, best possible 23812 (182.04 seconds)
Cbc0010I After 35000 nodes, 1 on tree, 24576 best solution, best possible 23842 (187.13 seconds)
Cbc0010I After 36000 nodes, 3 on tree, 24576 best solution, best possible 23872 (192.05 seconds)
Cbc0010I After 37000 nodes, 2 on tree, 24576 best solution, best possible 23904 (196.69 seconds)
Cbc0010I After 38000 nodes, 5 on tree, 24576 best solution, best possible 23934 (201.32 seconds)
Cbc0010I After 39000 nodes, 4 on tree, 24576 best solution, best possible 23964 (206.13 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 313 rows 96 columns - 45 fixed gives 81, 20 - ok now
Cbc0010I After 40000 nodes, 6 on tree, 24576 best solution, best possible 23994 (210.85 seconds)
Cbc0010I After 41000 nodes, 3 on tree, 24576 best solution, best possible 24026 (215.28 seconds)
Cbc0010I After 42000 nodes, 1 on tree, 24576 best solution, best possible 24062 (219.87 seconds)
Cbc0010I After 43000 nodes, 3 on tree, 24576 best solution, best possible 24096 (224.15 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 312 rows 98 columns - 44 fixed gives 60, 15 - ok now
Cbc0010I After 44000 nodes, 4 on tree, 24576 best solution, best possible 24132 (228.34 seconds)
Cbc0010I After 45000 nodes, 3 on tree, 24576 best solution, best possible 24173 (232.41 seconds)
Cbc0010I After 46000 nodes, 3 on tree, 24576 best solution, best possible 24210 (236.64 seconds)
Cbc0038I Full problem 568 rows 207 columns, reduced to 331 rows 99 columns - 40 fixed gives 205, 54 - ok now
Cbc0010I After 47000 nodes, 3 on tree, 24576 best solution, best possible 24248 (240.76 seconds)
Cbc0010I After 48000 nodes, 1 on tree, 24576 best solution, best possible 24289 (245.18 seconds)
Cbc0010I After 49000 nodes, 3 on tree, 24576 best solution, best possible 24335 (249.69 seconds)
Cbc0010I After 50000 nodes, 4 on tree, 24576 best solution, best possible 24380 (254.30 seconds)
Cbc0010I After 51000 nodes, 3 on tree, 24576 best solution, best possible 24428 (258.76 seconds)
Cbc0010I After 52000 nodes, 2 on tree, 24576 best solution, best possible 24481 (263.34 seconds)
Cbc0010I After 53000 nodes, 2 on tree, 24576 best solution, best possible 24531 (268.03 seconds)
Cbc0001I Search completed - best objective 24576, took 3133545 iterations and 53894 nodes (272.09 seconds)
Cbc0032I Strong branching done 105200 times (2269400 iterations), fathomed 10175 nodes and fixed 14592 variables
Cbc0035I Maximum depth 4099, 6 variables fixed on reduced cost
Cuts at root node changed objective from 20480 to 20480
Probing was tried 9 times and created 36 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
Gomory was tried 9 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Knapsack was tried 9 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
FlowCover was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
TwoMirCuts was tried 9 times and created 196 cuts of which 0 were active after adding rounds of cuts (0.059 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ImplicationCuts was tried 55 times and created 93 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)

Result - Optimal solution found

Objective value:                24576.00000000
Enumerated nodes:               53894
Total iterations:               3133545
Time (CPU seconds):             272.09
Time (Wallclock seconds):       290.87

Total time (CPU seconds):       272.10   (Wallclock seconds):       290.88

