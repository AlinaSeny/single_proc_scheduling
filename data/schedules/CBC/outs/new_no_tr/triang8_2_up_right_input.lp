Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/triang8_2_up_right_input.lp sec 1800 solve solu solutions/new_no_tr/triang8_2_up_right_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 290.555 - 0.38 seconds
Cgl0002I 155 variables fixed
Cgl0003I 0 fixed, 21 tightened bounds, 1008 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 18 tightened bounds, 651 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 22 tightened bounds, 479 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 13 tightened bounds, 309 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 11 tightened bounds, 250 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 5 tightened bounds, 157 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 55 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 4764 rows, 1627 columns (1627 integer (1590 of which binary)) and 15909 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1627 objects (1627 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 680 integers unsatisfied sum - 212.544
Cbc0038I Pass   1: (2.14 seconds) suminf.   90.83352 (541) obj. 441.76 iterations 2275
Cbc0038I Pass   2: (2.28 seconds) suminf.   84.24790 (513) obj. 447.509 iterations 746
Cbc0038I Pass   3: (2.33 seconds) suminf.   81.31738 (510) obj. 456.453 iterations 189
Cbc0038I Pass   4: (2.37 seconds) suminf.   80.73467 (510) obj. 456.786 iterations 141
Cbc0038I Pass   5: (2.46 seconds) suminf.   73.15216 (556) obj. 456.134 iterations 433
Cbc0038I Pass   6: (2.49 seconds) suminf.   72.32054 (556) obj. 455.889 iterations 93
Cbc0038I Pass   7: (2.50 seconds) suminf.   72.43414 (564) obj. 455.852 iterations 34
Cbc0038I Pass   8: (2.60 seconds) suminf.   68.22925 (532) obj. 487.866 iterations 505
Cbc0038I Pass   9: (2.66 seconds) suminf.   68.35788 (548) obj. 493.764 iterations 199
Cbc0038I Pass  10: (2.67 seconds) suminf.   68.51204 (555) obj. 493.752 iterations 27
Cbc0038I Pass  11: (2.69 seconds) suminf.   67.95703 (527) obj. 492.94 iterations 82
Cbc0038I Pass  12: (2.74 seconds) suminf.   68.79178 (538) obj. 498.662 iterations 196
Cbc0038I Pass  13: (2.80 seconds) suminf.   67.53733 (527) obj. 493.26 iterations 238
Cbc0038I Pass  14: (2.82 seconds) suminf.   67.69466 (517) obj. 494.016 iterations 30
Cbc0038I Pass  15: (2.87 seconds) suminf.   69.61096 (514) obj. 489.829 iterations 212
Cbc0038I Pass  16: (2.94 seconds) suminf.   68.64744 (494) obj. 492.52 iterations 284
Cbc0038I Pass  17: (2.97 seconds) suminf.   68.80010 (512) obj. 490.996 iterations 147
Cbc0038I Pass  18: (2.99 seconds) suminf.   68.72721 (506) obj. 490.817 iterations 56
Cbc0038I Pass  19: (3.04 seconds) suminf.   65.85549 (504) obj. 489.238 iterations 213
Cbc0038I Pass  20: (3.08 seconds) suminf.   64.84896 (504) obj. 490.549 iterations 162
Cbc0038I Pass  21: (3.16 seconds) suminf.   64.87670 (521) obj. 497.509 iterations 341
Cbc0038I Pass  22: (3.20 seconds) suminf.   63.86705 (514) obj. 497.469 iterations 144
Cbc0038I Pass  23: (3.22 seconds) suminf.   63.59813 (504) obj. 498.633 iterations 89
Cbc0038I Pass  24: (3.26 seconds) suminf.   61.98430 (507) obj. 513.83 iterations 145
Cbc0038I Pass  25: (3.29 seconds) suminf.   61.53911 (495) obj. 533.25 iterations 116
Cbc0038I Pass  26: (3.35 seconds) suminf.   64.01234 (476) obj. 563.37 iterations 297
Cbc0038I Pass  27: (3.37 seconds) suminf.   62.62079 (480) obj. 563.395 iterations 45
Cbc0038I Pass  28: (3.40 seconds) suminf.   61.09696 (486) obj. 563.6 iterations 100
Cbc0038I Pass  29: (3.42 seconds) suminf.   63.83697 (480) obj. 563.33 iterations 91
Cbc0038I Pass  30: (3.45 seconds) suminf.   62.71022 (477) obj. 563.393 iterations 100
Cbc0038I Pass  31: (3.49 seconds) suminf.   60.98742 (476) obj. 562.106 iterations 166
Cbc0038I Pass  32: (3.53 seconds) suminf.   64.83070 (458) obj. 556.222 iterations 159
Cbc0038I Pass  33: (3.54 seconds) suminf.   65.18383 (460) obj. 558.571 iterations 41
Cbc0038I Pass  34: (3.56 seconds) suminf.   62.02414 (463) obj. 558.999 iterations 41
Cbc0038I Pass  35: (3.57 seconds) suminf.   61.80801 (479) obj. 559.137 iterations 44
Cbc0038I Pass  36: (3.61 seconds) suminf.   64.20549 (464) obj. 559.406 iterations 144
Cbc0038I Pass  37: (3.63 seconds) suminf.   62.80238 (483) obj. 562.287 iterations 115
Cbc0038I Pass  38: (3.70 seconds) suminf.   65.50595 (482) obj. 554.46 iterations 325
Cbc0038I Pass  39: (3.74 seconds) suminf.   63.11682 (477) obj. 560.493 iterations 132
Cbc0038I Pass  40: (3.81 seconds) suminf.   65.52234 (471) obj. 558.894 iterations 332
Cbc0038I Pass  41: (3.84 seconds) suminf.   62.27280 (463) obj. 559.498 iterations 128
Cbc0038I Pass  42: (3.86 seconds) suminf.   61.53912 (458) obj. 559.412 iterations 58
Cbc0038I Pass  43: (3.94 seconds) suminf.   58.39534 (460) obj. 565.159 iterations 386
Cbc0038I Pass  44: (3.97 seconds) suminf.   56.19347 (457) obj. 564.425 iterations 147
Cbc0038I Pass  45: (4.00 seconds) suminf.   55.36122 (462) obj. 564.293 iterations 94
Cbc0038I Pass  46: (4.02 seconds) suminf.   53.96599 (463) obj. 564.101 iterations 69
Cbc0038I Pass  47: (4.03 seconds) suminf.   53.01377 (476) obj. 563.961 iterations 31
Cbc0038I Pass  48: (4.14 seconds) suminf.   44.59331 (370) obj. 505.673 iterations 587
Cbc0038I Pass  49: (4.19 seconds) suminf.   43.32494 (365) obj. 507.851 iterations 248
Cbc0038I Pass  50: (4.23 seconds) suminf.   45.26955 (353) obj. 513.714 iterations 198
Cbc0038I Pass  51: (4.29 seconds) suminf.   43.07679 (364) obj. 517.496 iterations 281
Cbc0038I Pass  52: (4.39 seconds) suminf.   44.02103 (373) obj. 505.816 iterations 609
Cbc0038I Pass  53: (4.43 seconds) suminf.   43.04492 (390) obj. 508.898 iterations 183
Cbc0038I Pass  54: (4.52 seconds) suminf.   43.25006 (377) obj. 492.175 iterations 463
Cbc0038I Pass  55: (4.55 seconds) suminf.   41.40754 (394) obj. 489.4 iterations 126
Cbc0038I Pass  56: (4.62 seconds) suminf.   40.81150 (334) obj. 496.119 iterations 377
Cbc0038I Pass  57: (4.64 seconds) suminf.   40.99149 (338) obj. 493.242 iterations 121
Cbc0038I Pass  58: (4.69 seconds) suminf.   41.10672 (342) obj. 492.108 iterations 269
Cbc0038I Pass  59: (4.73 seconds) suminf.   40.13925 (352) obj. 493.339 iterations 190
Cbc0038I Pass  60: (4.79 seconds) suminf.   41.29317 (336) obj. 486.412 iterations 362
Cbc0038I Pass  61: (4.82 seconds) suminf.   40.31956 (360) obj. 489.768 iterations 125
Cbc0038I Pass  62: (4.89 seconds) suminf.   39.04907 (340) obj. 508.69 iterations 380
Cbc0038I Pass  63: (4.90 seconds) suminf.   39.06418 (343) obj. 507.622 iterations 44
Cbc0038I Pass  64: (4.98 seconds) suminf.   36.30990 (359) obj. 497.983 iterations 468
Cbc0038I Pass  65: (4.99 seconds) suminf.   36.33976 (357) obj. 497.894 iterations 26
Cbc0038I Pass  66: (5.06 seconds) suminf.   34.45179 (323) obj. 511.306 iterations 381
Cbc0038I Pass  67: (5.07 seconds) suminf.   34.67189 (320) obj. 511.602 iterations 22
Cbc0038I Pass  68: (5.11 seconds) suminf.   34.41218 (329) obj. 509.419 iterations 166
Cbc0038I Pass  69: (5.14 seconds) suminf.   32.01319 (312) obj. 507.268 iterations 186
Cbc0038I Pass  70: (5.20 seconds) suminf.   30.38908 (295) obj. 495.778 iterations 299
Cbc0038I Pass  71: (5.21 seconds) suminf.   30.36509 (300) obj. 499.806 iterations 29
Cbc0038I Pass  72: (5.26 seconds) suminf.   30.38244 (312) obj. 490.116 iterations 312
Cbc0038I Pass  73: (5.31 seconds) suminf.   29.07489 (295) obj. 492.726 iterations 274
Cbc0038I Pass  74: (5.37 seconds) suminf.   34.41645 (289) obj. 494.006 iterations 306
Cbc0038I Pass  75: (5.40 seconds) suminf.   33.89018 (306) obj. 492.911 iterations 147
Cbc0038I Pass  76: (5.43 seconds) suminf.   31.84897 (339) obj. 495.947 iterations 164
Cbc0038I Pass  77: (5.47 seconds) suminf.   29.91848 (315) obj. 499.454 iterations 189
Cbc0038I Pass  78: (5.54 seconds) suminf.   28.80880 (283) obj. 494.824 iterations 411
Cbc0038I Pass  79: (5.56 seconds) suminf.   27.99916 (289) obj. 491.562 iterations 118
Cbc0038I Pass  80: (5.64 seconds) suminf.   24.15598 (251) obj. 494.596 iterations 535
Cbc0038I Pass  81: (5.69 seconds) suminf.   22.92149 (230) obj. 521.112 iterations 240
Cbc0038I Pass  82: (5.70 seconds) suminf.   22.11614 (230) obj. 521.09 iterations 77
Cbc0038I Pass  83: (5.78 seconds) suminf.   17.20107 (217) obj. 484.981 iterations 494
Cbc0038I Pass  84: (5.81 seconds) suminf.   16.86245 (196) obj. 485.003 iterations 157
Cbc0038I Pass  85: (5.88 seconds) suminf.   16.56677 (192) obj. 480.24 iterations 426
Cbc0038I Pass  86: (5.91 seconds) suminf.   13.46209 (190) obj. 475.432 iterations 162
Cbc0038I Pass  87: (5.95 seconds) suminf.   13.77949 (178) obj. 464.31 iterations 319
Cbc0038I Pass  88: (5.96 seconds) suminf.   12.75014 (178) obj. 464.148 iterations 33
Cbc0038I Pass  89: (6.06 seconds) suminf.    8.92536 (132) obj. 423 iterations 779
Cbc0038I Pass  90: (6.08 seconds) suminf.    7.47452 (140) obj. 423 iterations 111
Cbc0038I Pass  91: (6.10 seconds) suminf.    8.32161 (139) obj. 423 iterations 134
Cbc0038I Pass  92: (6.11 seconds) suminf.    8.13453 (143) obj. 423 iterations 17
Cbc0038I Pass  93: (6.15 seconds) suminf.   10.88365 (139) obj. 422.778 iterations 266
Cbc0038I Pass  94: (6.16 seconds) suminf.    9.86571 (144) obj. 422.788 iterations 71
Cbc0038I Pass  95: (6.17 seconds) suminf.    9.84050 (146) obj. 422.788 iterations 26
Cbc0038I Pass  96: (6.22 seconds) suminf.    4.56829 (120) obj. 423 iterations 369
Cbc0038I Pass  97: (6.23 seconds) suminf.    4.53723 (122) obj. 423 iterations 32
Cbc0038I Pass  98: (6.40 seconds) suminf.    0.63889 (17) obj. 423 iterations 1149
Cbc0038I Pass  99: (6.41 seconds) suminf.    0.63889 (17) obj. 423 iterations 0
Cbc0038I Pass 100: (6.67 seconds) suminf.   60.73790 (379) obj. 499.154 iterations 1753
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 398 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 3590 rows 1156 columns - too large
Cbc0038I Mini branch and bound did not improve solution (6.74 seconds)
Cbc0038I After 6.74 seconds - Feasibility pump exiting - took 5.07 seconds
Cbc0031I 56 added rows had average density of 11.892857
Cbc0013I At root node, 56 cuts changed objective from 290.60929 to 311 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 9 row cuts average 4.1 elements, 1 column cuts (1 active)  in 0.125 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 77 row cuts average 467.7 elements, 0 column cuts (0 active)  in 0.563 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 11 row cuts average 8.3 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 4 row cuts average 8.5 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 215 row cuts average 15.8 elements, 0 column cuts (0 active)  in 0.226 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 52.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 311 (13.68 seconds)
Cbc0010I After 100 nodes, 4 on tree, 1e+50 best solution, best possible 318 (97.63 seconds)
Cbc0010I After 200 nodes, 6 on tree, 1e+50 best solution, best possible 318 (142.74 seconds)
Cbc0010I After 300 nodes, 7 on tree, 1e+50 best solution, best possible 318 (197.18 seconds)
Cbc0010I After 400 nodes, 12 on tree, 1e+50 best solution, best possible 318 (249.15 seconds)
Cbc0010I After 500 nodes, 17 on tree, 1e+50 best solution, best possible 318 (294.64 seconds)
Cbc0010I After 600 nodes, 14 on tree, 1e+50 best solution, best possible 318 (334.97 seconds)
Cbc0010I After 700 nodes, 17 on tree, 1e+50 best solution, best possible 318 (385.50 seconds)
Cbc0010I After 800 nodes, 19 on tree, 1e+50 best solution, best possible 318 (449.64 seconds)
Cbc0010I After 900 nodes, 36 on tree, 1e+50 best solution, best possible 318 (501.06 seconds)
Cbc0010I After 1000 nodes, 64 on tree, 1e+50 best solution, best possible 318 (558.91 seconds)
Cbc0010I After 1100 nodes, 53 on tree, 1e+50 best solution, best possible 323 (619.63 seconds)
Cbc0010I After 1200 nodes, 48 on tree, 1e+50 best solution, best possible 323 (664.78 seconds)
Cbc0010I After 1300 nodes, 45 on tree, 1e+50 best solution, best possible 323 (711.54 seconds)
Cbc0010I After 1400 nodes, 42 on tree, 1e+50 best solution, best possible 323 (754.76 seconds)
Cbc0010I After 1500 nodes, 35 on tree, 1e+50 best solution, best possible 323 (804.20 seconds)
Cbc0010I After 1600 nodes, 25 on tree, 1e+50 best solution, best possible 323 (846.58 seconds)
Cbc0010I After 1700 nodes, 20 on tree, 1e+50 best solution, best possible 323 (889.86 seconds)
Cbc0010I After 1800 nodes, 9 on tree, 1e+50 best solution, best possible 323 (935.50 seconds)
Cbc0010I After 1900 nodes, 13 on tree, 1e+50 best solution, best possible 323 (981.71 seconds)
Cbc0010I After 2000 nodes, 3 on tree, 1e+50 best solution, best possible 337 (1025.57 seconds)
Cbc0010I After 2100 nodes, 6 on tree, 1e+50 best solution, best possible 337 (1083.19 seconds)
Cbc0010I After 2200 nodes, 3 on tree, 1e+50 best solution, best possible 337 (1131.46 seconds)
Cbc0010I After 2300 nodes, 14 on tree, 1e+50 best solution, best possible 337 (1177.55 seconds)
Cbc0010I After 2400 nodes, 5 on tree, 1e+50 best solution, best possible 338 (1218.25 seconds)
Cbc0010I After 2500 nodes, 4 on tree, 1e+50 best solution, best possible 340 (1254.55 seconds)
Cbc0010I After 2600 nodes, 13 on tree, 1e+50 best solution, best possible 341 (1291.81 seconds)
Cbc0010I After 2700 nodes, 4 on tree, 1e+50 best solution, best possible 342 (1323.01 seconds)
Cbc0010I After 2800 nodes, 6 on tree, 1e+50 best solution, best possible 344 (1351.67 seconds)
Cbc0010I After 2900 nodes, 7 on tree, 1e+50 best solution, best possible 347 (1380.81 seconds)
Cbc0010I After 3000 nodes, 4 on tree, 1e+50 best solution, best possible 351 (1411.25 seconds)
Cbc0010I After 3100 nodes, 8 on tree, 1e+50 best solution, best possible 351 (1432.28 seconds)
Cbc0010I After 3200 nodes, 9 on tree, 1e+50 best solution, best possible 353 (1453.77 seconds)
Cbc0010I After 3300 nodes, 17 on tree, 1e+50 best solution, best possible 354 (1474.51 seconds)
Cbc0010I After 3400 nodes, 9 on tree, 1e+50 best solution, best possible 355 (1494.83 seconds)
Cbc0010I After 3500 nodes, 18 on tree, 1e+50 best solution, best possible 355 (1513.75 seconds)
Cbc0010I After 3600 nodes, 21 on tree, 1e+50 best solution, best possible 355 (1534.25 seconds)
Cbc0010I After 3700 nodes, 14 on tree, 1e+50 best solution, best possible 355 (1556.87 seconds)
Cbc0010I After 3800 nodes, 12 on tree, 1e+50 best solution, best possible 355 (1574.23 seconds)
Cbc0010I After 3900 nodes, 15 on tree, 1e+50 best solution, best possible 355 (1590.53 seconds)
Cbc0010I After 4000 nodes, 16 on tree, 1e+50 best solution, best possible 355 (1620.08 seconds)
Cbc0010I After 4100 nodes, 16 on tree, 1e+50 best solution, best possible 355 (1638.07 seconds)
Cbc0010I After 4200 nodes, 14 on tree, 1e+50 best solution, best possible 355 (1663.40 seconds)
Cbc0010I After 4300 nodes, 12 on tree, 1e+50 best solution, best possible 355 (1684.63 seconds)
Cbc0010I After 4400 nodes, 15 on tree, 1e+50 best solution, best possible 356 (1704.70 seconds)
Cbc0010I After 4500 nodes, 7 on tree, 1e+50 best solution, best possible 357 (1719.16 seconds)
Cbc0010I After 4600 nodes, 27 on tree, 1e+50 best solution, best possible 358 (1735.20 seconds)
Cbc0010I After 4700 nodes, 22 on tree, 1e+50 best solution, best possible 358 (1762.43 seconds)
Cbc0010I After 4800 nodes, 25 on tree, 1e+50 best solution, best possible 358 (1781.15 seconds)
Cbc0010I After 4900 nodes, 7 on tree, 1e+50 best solution, best possible 359 (1797.81 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 359), took 3718097 iterations and 4906 nodes (1798.73 seconds)
Cbc0032I Strong branching done 32300 times (2608088 iterations), fathomed 501 nodes and fixed 3009 variables
Cbc0035I Maximum depth 82, 0 variables fixed on reduced cost
Cuts at root node changed objective from 290.609 to 311
Probing was tried 967 times and created 85232 cuts of which 0 were active after adding rounds of cuts (6.058 seconds)
Gomory was tried 706 times and created 751 cuts of which 0 were active after adding rounds of cuts (4.482 seconds)
Knapsack was tried 706 times and created 3429 cuts of which 0 were active after adding rounds of cuts (1.112 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
FlowCover was tried 10 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
TwoMirCuts was tried 706 times and created 14576 cuts of which 0 were active after adding rounds of cuts (1.609 seconds)
ZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.041 seconds)
ImplicationCuts was tried 47 times and created 13 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)

Result - Stopped on time limit

No feasible solution found
Lower bound:                    359.000
Enumerated nodes:               4906
Total iterations:               3718097
Time (CPU seconds):             1798.73
Time (Wallclock seconds):       1809.88

Total time (CPU seconds):       1798.75   (Wallclock seconds):       1809.91

