Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/jump_2_35_reverse_tiers_input.lp sec 1800 solve solu solutions/new_no_tr/jump_2_35_reverse_tiers_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 35840 - 0.34 seconds
Cgl0002I 97 variables fixed
Cgl0003I 0 fixed, 13 tightened bounds, 751 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 10 tightened bounds, 260 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0004I processed model has 3731 rows, 1224 columns (1224 integer (1188 of which binary)) and 12702 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1224 objects (1224 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 665 integers unsatisfied sum - 205.385
Cbc0038I Pass   1: (1.53 seconds) suminf.   74.99874 (725) obj. 50038.7 iterations 1932
Cbc0038I Pass   2: (1.64 seconds) suminf.   66.39926 (716) obj. 52398.6 iterations 529
Cbc0038I Pass   3: (1.73 seconds) suminf.   58.54557 (731) obj. 52192.1 iterations 416
Cbc0038I Pass   4: (1.80 seconds) suminf.   54.66385 (712) obj. 52201.1 iterations 355
Cbc0038I Pass   5: (1.94 seconds) suminf.   52.95124 (736) obj. 52596.4 iterations 680
Cbc0038I Pass   6: (1.99 seconds) suminf.   50.64416 (716) obj. 52494 iterations 217
Cbc0038I Pass   7: (2.04 seconds) suminf.   51.24817 (727) obj. 52599.6 iterations 270
Cbc0038I Pass   8: (2.08 seconds) suminf.   50.75829 (733) obj. 53087.5 iterations 144
Cbc0038I Pass   9: (2.21 seconds) suminf.   50.82293 (723) obj. 61008.4 iterations 671
Cbc0038I Pass  10: (2.29 seconds) suminf.   47.56517 (724) obj. 60265.2 iterations 309
Cbc0038I Pass  11: (2.34 seconds) suminf.   47.23935 (731) obj. 60776.1 iterations 193
Cbc0038I Pass  12: (2.53 seconds) suminf.   42.08112 (712) obj. 60196.4 iterations 865
Cbc0038I Pass  13: (2.56 seconds) suminf.   42.81890 (743) obj. 62127.2 iterations 116
Cbc0038I Pass  14: (2.68 seconds) suminf.   49.08516 (702) obj. 61444.3 iterations 511
Cbc0038I Pass  15: (2.74 seconds) suminf.   48.80172 (696) obj. 61366.5 iterations 206
Cbc0038I Pass  16: (2.80 seconds) suminf.   47.81720 (678) obj. 61291.8 iterations 190
Cbc0038I Pass  17: (2.89 seconds) suminf.   51.83605 (667) obj. 60807.2 iterations 373
Cbc0038I Pass  18: (2.99 seconds) suminf.   49.51402 (689) obj. 61420.6 iterations 469
Cbc0038I Pass  19: (3.04 seconds) suminf.   49.35661 (657) obj. 61254.3 iterations 157
Cbc0038I Pass  20: (3.16 seconds) suminf.   55.81044 (646) obj. 58324.1 iterations 530
Cbc0038I Pass  21: (3.23 seconds) suminf.   57.14964 (663) obj. 58147.5 iterations 271
Cbc0038I Pass  22: (3.29 seconds) suminf.   55.47398 (651) obj. 58075.3 iterations 257
Cbc0038I Pass  23: (3.46 seconds) suminf.   42.39506 (673) obj. 59727.2 iterations 770
Cbc0038I Pass  24: (3.49 seconds) suminf.   42.50377 (689) obj. 59662.9 iterations 99
Cbc0038I Pass  25: (3.61 seconds) suminf.   43.03067 (708) obj. 59342.4 iterations 536
Cbc0038I Pass  26: (3.70 seconds) suminf.   40.54596 (692) obj. 59659.4 iterations 369
Cbc0038I Pass  27: (3.77 seconds) suminf.   41.61953 (706) obj. 59668.1 iterations 297
Cbc0038I Pass  28: (3.83 seconds) suminf.   40.57784 (680) obj. 59648.1 iterations 242
Cbc0038I Pass  29: (3.87 seconds) suminf.   40.46222 (682) obj. 59632.3 iterations 138
Cbc0038I Pass  30: (3.95 seconds) suminf.   43.10107 (693) obj. 59599.1 iterations 314
Cbc0038I Pass  31: (4.16 seconds) suminf.   67.04874 (720) obj. 73532.8 iterations 1180
Cbc0038I Pass  32: (4.31 seconds) suminf.   45.69608 (682) obj. 75082.1 iterations 756
Cbc0038I Pass  33: (4.37 seconds) suminf.   42.04447 (694) obj. 75165.3 iterations 231
Cbc0038I Pass  34: (4.40 seconds) suminf.   41.22798 (685) obj. 75151.1 iterations 105
Cbc0038I Pass  35: (4.51 seconds) suminf.   41.36011 (703) obj. 75661.6 iterations 492
Cbc0038I Pass  36: (4.57 seconds) suminf.   41.22050 (713) obj. 75562.9 iterations 227
Cbc0038I Pass  37: (4.60 seconds) suminf.   40.48496 (706) obj. 75478.5 iterations 80
Cbc0038I Pass  38: (4.68 seconds) suminf.   44.18212 (707) obj. 75507.5 iterations 310
Cbc0038I Pass  39: (4.73 seconds) suminf.   42.43348 (698) obj. 75338.2 iterations 154
Cbc0038I Pass  40: (4.83 seconds) suminf.   41.73721 (710) obj. 75496.3 iterations 422
Cbc0038I Pass  41: (4.88 seconds) suminf.   42.11068 (720) obj. 75452.9 iterations 140
Cbc0038I Pass  42: (4.99 seconds) suminf.   46.81805 (693) obj. 75509.7 iterations 456
Cbc0038I Pass  43: (5.05 seconds) suminf.   43.15939 (709) obj. 75554.4 iterations 221
Cbc0038I Pass  44: (5.17 seconds) suminf.   44.19983 (709) obj. 75214.4 iterations 459
Cbc0038I Pass  45: (5.19 seconds) suminf.   43.99908 (717) obj. 75233.9 iterations 50
Cbc0038I Pass  46: (5.29 seconds) suminf.   41.93635 (689) obj. 75553 iterations 443
Cbc0038I Pass  47: (5.34 seconds) suminf.   42.14205 (693) obj. 75392.5 iterations 182
Cbc0038I Pass  48: (5.45 seconds) suminf.   44.67517 (698) obj. 75260.4 iterations 419
Cbc0038I Pass  49: (5.52 seconds) suminf.   41.31379 (700) obj. 75315.5 iterations 234
Cbc0038I Pass  50: (5.63 seconds) suminf.   40.76768 (682) obj. 75544.4 iterations 468
Cbc0038I Pass  51: (5.68 seconds) suminf.   38.75101 (683) obj. 75667.2 iterations 181
Cbc0038I Pass  52: (5.69 seconds) suminf.   38.78233 (686) obj. 75670.7 iterations 8
Cbc0038I Pass  53: (5.77 seconds) suminf.   41.03971 (688) obj. 75654.3 iterations 315
Cbc0038I Pass  54: (5.84 seconds) suminf.   39.32404 (688) obj. 75566.8 iterations 273
Cbc0038I Pass  55: (5.94 seconds) suminf.   41.15087 (673) obj. 75497.1 iterations 441
Cbc0038I Pass  56: (5.98 seconds) suminf.   37.66779 (662) obj. 75497.8 iterations 143
Cbc0038I Pass  57: (6.00 seconds) suminf.   37.84320 (665) obj. 75459.4 iterations 80
Cbc0038I Pass  58: (6.11 seconds) suminf.   42.28815 (666) obj. 75660.6 iterations 490
Cbc0038I Pass  59: (6.18 seconds) suminf.   38.74571 (663) obj. 75577.8 iterations 322
Cbc0038I Pass  60: (6.27 seconds) suminf.   37.86710 (692) obj. 75514.2 iterations 356
Cbc0038I Pass  61: (6.33 seconds) suminf.   37.64428 (690) obj. 75515.3 iterations 192
Cbc0038I Pass  62: (6.41 seconds) suminf.   39.00731 (681) obj. 75509 iterations 329
Cbc0038I Pass  63: (6.46 seconds) suminf.   38.00385 (672) obj. 75480.4 iterations 167
Cbc0038I Pass  64: (6.55 seconds) suminf.   40.21606 (654) obj. 75573.5 iterations 469
Cbc0038I Pass  65: (6.60 seconds) suminf.   38.19842 (654) obj. 75526.9 iterations 195
Cbc0038I Pass  66: (6.63 seconds) suminf.   37.93474 (672) obj. 75505.6 iterations 104
Cbc0038I Pass  67: (6.72 seconds) suminf.   41.36801 (658) obj. 75693.2 iterations 401
Cbc0038I Pass  68: (6.78 seconds) suminf.   37.86126 (677) obj. 75769.1 iterations 246
Cbc0038I Pass  69: (6.81 seconds) suminf.   38.32810 (675) obj. 75791 iterations 116
Cbc0038I Pass  70: (6.92 seconds) suminf.   44.12939 (651) obj. 75859 iterations 490
Cbc0038I Pass  71: (7.01 seconds) suminf.   40.32092 (683) obj. 75840.8 iterations 390
Cbc0038I Pass  72: (7.11 seconds) suminf.   42.55123 (681) obj. 75793.5 iterations 457
Cbc0038I Pass  73: (7.17 seconds) suminf.   39.47316 (666) obj. 75683.4 iterations 215
Cbc0038I Pass  74: (7.23 seconds) suminf.   37.27027 (670) obj. 75654.7 iterations 236
Cbc0038I Pass  75: (7.32 seconds) suminf.   43.77955 (644) obj. 75544.9 iterations 450
Cbc0038I Pass  76: (7.38 seconds) suminf.   40.23262 (661) obj. 75632.1 iterations 219
Cbc0038I Pass  77: (7.40 seconds) suminf.   39.91393 (655) obj. 75593.8 iterations 77
Cbc0038I Pass  78: (7.52 seconds) suminf.   45.98147 (650) obj. 76007 iterations 616
Cbc0038I Pass  79: (7.58 seconds) suminf.   41.63848 (658) obj. 76201.6 iterations 215
Cbc0038I Pass  80: (7.61 seconds) suminf.   39.54529 (661) obj. 75853.6 iterations 90
Cbc0038I Pass  81: (7.71 seconds) suminf.   43.20455 (657) obj. 75854.2 iterations 494
Cbc0038I Pass  82: (7.77 seconds) suminf.   41.92720 (665) obj. 75815.4 iterations 224
Cbc0038I Pass  83: (7.81 seconds) suminf.   39.91436 (670) obj. 75792.4 iterations 124
Cbc0038I Pass  84: (7.84 seconds) suminf.   38.96797 (668) obj. 75810 iterations 89
Cbc0038I Pass  85: (7.95 seconds) suminf.   43.78370 (673) obj. 75621.5 iterations 482
Cbc0038I Pass  86: (8.03 seconds) suminf.   40.69912 (670) obj. 75536.5 iterations 306
Cbc0038I Pass  87: (8.09 seconds) suminf.   39.70837 (672) obj. 75394.5 iterations 175
Cbc0038I Pass  88: (8.20 seconds) suminf.   41.48207 (661) obj. 75884.2 iterations 482
Cbc0038I Pass  89: (8.24 seconds) suminf.   40.89127 (655) obj. 75780.1 iterations 150
Cbc0038I Pass  90: (8.31 seconds) suminf.   37.48353 (652) obj. 75564.7 iterations 298
Cbc0038I Pass  91: (8.42 seconds) suminf.   48.36368 (636) obj. 76020.6 iterations 515
Cbc0038I Pass  92: (8.50 seconds) suminf.   43.57792 (683) obj. 76001.4 iterations 306
Cbc0038I Pass  93: (8.56 seconds) suminf.   42.28796 (679) obj. 75838.6 iterations 175
Cbc0038I Pass  94: (8.70 seconds) suminf.   52.49712 (658) obj. 76368.1 iterations 586
Cbc0038I Pass  95: (8.77 seconds) suminf.   46.18105 (671) obj. 76536.2 iterations 294
Cbc0038I Pass  96: (8.81 seconds) suminf.   44.08518 (683) obj. 76582 iterations 116
Cbc0038I Pass  97: (8.84 seconds) suminf.   43.94319 (681) obj. 76583 iterations 86
Cbc0038I Pass  98: (8.95 seconds) suminf.   46.24466 (655) obj. 75936.5 iterations 422
Cbc0038I Pass  99: (9.02 seconds) suminf.   41.03959 (655) obj. 75602.7 iterations 247
Cbc0038I Pass 100: (9.26 seconds) suminf.   76.11725 (691) obj. 82811.2 iterations 1209
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 76 integers at bound fixed and 0 continuous
Cbc0038I Full problem 3731 rows 1224 columns, reduced to 3524 rows 1138 columns - too large
Cbc0038I Mini branch and bound did not improve solution (9.29 seconds)
Cbc0038I After 9.29 seconds - Feasibility pump exiting - took 8.19 seconds
Cbc0031I 50 added rows had average density of 10.1
Cbc0013I At root node, 50 cuts changed objective from 35840 to 41984 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 16 row cuts average 3.6 elements, 0 column cuts (0 active)  in 0.076 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 75 row cuts average 129.8 elements, 0 column cuts (0 active)  in 0.358 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 201 row cuts average 15.7 elements, 0 column cuts (0 active)  in 0.181 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 41984 (14.85 seconds)
Cbc0010I After 100 nodes, 4 on tree, 1e+50 best solution, best possible 41984 (51.77 seconds)
Cbc0010I After 200 nodes, 7 on tree, 1e+50 best solution, best possible 41985 (104.61 seconds)
Cbc0010I After 300 nodes, 9 on tree, 1e+50 best solution, best possible 41989 (148.88 seconds)
Cbc0010I After 400 nodes, 22 on tree, 1e+50 best solution, best possible 41990 (197.21 seconds)
Cbc0010I After 500 nodes, 23 on tree, 1e+50 best solution, best possible 41990 (224.15 seconds)
Cbc0010I After 600 nodes, 12 on tree, 1e+50 best solution, best possible 41990 (250.23 seconds)
Cbc0010I After 700 nodes, 12 on tree, 1e+50 best solution, best possible 41990 (284.39 seconds)
Cbc0010I After 800 nodes, 18 on tree, 1e+50 best solution, best possible 41990 (312.32 seconds)
Cbc0010I After 900 nodes, 23 on tree, 1e+50 best solution, best possible 41990 (338.49 seconds)
Cbc0010I After 1000 nodes, 15 on tree, 1e+50 best solution, best possible 41990 (361.14 seconds)
Cbc0010I After 1100 nodes, 27 on tree, 1e+50 best solution, best possible 41990 (390.42 seconds)
Cbc0010I After 1200 nodes, 19 on tree, 1e+50 best solution, best possible 41990 (422.18 seconds)
Cbc0010I After 1300 nodes, 16 on tree, 1e+50 best solution, best possible 41990 (448.02 seconds)
Cbc0010I After 1400 nodes, 4 on tree, 1e+50 best solution, best possible 41991 (480.23 seconds)
Cbc0010I After 1500 nodes, 2 on tree, 1e+50 best solution, best possible 41991 (507.19 seconds)
Cbc0010I After 1600 nodes, 11 on tree, 1e+50 best solution, best possible 41993 (547.16 seconds)
Cbc0010I After 1700 nodes, 2 on tree, 1e+50 best solution, best possible 41995 (574.75 seconds)
Cbc0010I After 1800 nodes, 13 on tree, 1e+50 best solution, best possible 41995 (624.00 seconds)
Cbc0010I After 1900 nodes, 5 on tree, 1e+50 best solution, best possible 41995 (676.52 seconds)
Cbc0010I After 2000 nodes, 8 on tree, 1e+50 best solution, best possible 41996 (712.07 seconds)
Cbc0010I After 2100 nodes, 4 on tree, 1e+50 best solution, best possible 41999 (734.40 seconds)
Cbc0010I After 2200 nodes, 11 on tree, 1e+50 best solution, best possible 42003 (755.36 seconds)
Cbc0010I After 2300 nodes, 2 on tree, 1e+50 best solution, best possible 42006 (777.14 seconds)
Cbc0010I After 2400 nodes, 5 on tree, 1e+50 best solution, best possible 42010 (799.79 seconds)
Cbc0010I After 2500 nodes, 4 on tree, 1e+50 best solution, best possible 42013 (819.66 seconds)
Cbc0010I After 2600 nodes, 4 on tree, 1e+50 best solution, best possible 42018 (847.72 seconds)
Cbc0010I After 2700 nodes, 1 on tree, 1e+50 best solution, best possible 42024 (871.46 seconds)
Cbc0010I After 2800 nodes, 6 on tree, 1e+50 best solution, best possible 42027 (893.86 seconds)
Cbc0010I After 2900 nodes, 4 on tree, 1e+50 best solution, best possible 42029 (917.35 seconds)
Cbc0010I After 3000 nodes, 2 on tree, 1e+50 best solution, best possible 42038 (953.32 seconds)
Cbc0010I After 3100 nodes, 3 on tree, 1e+50 best solution, best possible 42045 (982.90 seconds)
Cbc0010I After 3200 nodes, 2 on tree, 1e+50 best solution, best possible 42054 (1026.09 seconds)
Cbc0010I After 3300 nodes, 6 on tree, 1e+50 best solution, best possible 42059 (1052.14 seconds)
Cbc0010I After 3400 nodes, 1 on tree, 1e+50 best solution, best possible 42068 (1088.75 seconds)
Cbc0010I After 3500 nodes, 2 on tree, 1e+50 best solution, best possible 42072 (1113.20 seconds)
Cbc0010I After 3600 nodes, 11 on tree, 1e+50 best solution, best possible 42081 (1157.46 seconds)
Cbc0010I After 3700 nodes, 1 on tree, 1e+50 best solution, best possible 42087 (1191.16 seconds)
Cbc0010I After 3800 nodes, 1 on tree, 1e+50 best solution, best possible 42095 (1229.31 seconds)
Cbc0010I After 3900 nodes, 4 on tree, 1e+50 best solution, best possible 42101 (1272.96 seconds)
Cbc0010I After 4000 nodes, 5 on tree, 1e+50 best solution, best possible 42107 (1304.64 seconds)
Cbc0010I After 4100 nodes, 3 on tree, 1e+50 best solution, best possible 42112 (1331.34 seconds)
Cbc0010I After 4200 nodes, 5 on tree, 1e+50 best solution, best possible 42119 (1365.54 seconds)
Cbc0010I After 4300 nodes, 5 on tree, 1e+50 best solution, best possible 42126 (1398.01 seconds)
Cbc0010I After 4400 nodes, 2 on tree, 1e+50 best solution, best possible 42133 (1437.48 seconds)
Cbc0010I After 4500 nodes, 2 on tree, 1e+50 best solution, best possible 42142 (1488.93 seconds)
Cbc0010I After 4600 nodes, 5 on tree, 1e+50 best solution, best possible 42150 (1523.52 seconds)
Cbc0010I After 4700 nodes, 7 on tree, 1e+50 best solution, best possible 42160 (1566.50 seconds)
Cbc0010I After 4800 nodes, 4 on tree, 1e+50 best solution, best possible 42167 (1605.31 seconds)
Cbc0010I After 4900 nodes, 4 on tree, 1e+50 best solution, best possible 42173 (1637.40 seconds)
Cbc0010I After 5000 nodes, 4 on tree, 1e+50 best solution, best possible 42181 (1678.05 seconds)
Cbc0010I After 5100 nodes, 5 on tree, 1e+50 best solution, best possible 42189 (1714.46 seconds)
Cbc0010I After 5200 nodes, 4 on tree, 1e+50 best solution, best possible 42197 (1747.43 seconds)
Cbc0010I After 5300 nodes, 4 on tree, 1e+50 best solution, best possible 42203 (1775.60 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 42203), took 5504112 iterations and 5347 nodes (1799.52 seconds)
Cbc0032I Strong branching done 22508 times (1684679 iterations), fathomed 442 nodes and fixed 2921 variables
Cbc0035I Maximum depth 229, 0 variables fixed on reduced cost
Cuts at root node changed objective from 35840 to 41984
Probing was tried 10 times and created 16 cuts of which 0 were active after adding rounds of cuts (0.076 seconds)
Gomory was tried 3909 times and created 5828 cuts of which 0 were active after adding rounds of cuts (22.857 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.012 seconds)
TwoMirCuts was tried 3909 times and created 58395 cuts of which 0 were active after adding rounds of cuts (7.993 seconds)
ZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.040 seconds)

Result - Stopped on time limit

No feasible solution found
Lower bound:                    42203.000
Enumerated nodes:               5347
Total iterations:               5504112
Time (CPU seconds):             1799.52
Time (Wallclock seconds):       1815.57

Total time (CPU seconds):       1799.53   (Wallclock seconds):       1815.59

