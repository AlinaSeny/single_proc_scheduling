Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/default35_default_input.lp sec 1800 solve solu solutions/new_no_tr/default35_default_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 28672 - 0.38 seconds
Cgl0002I 118 variables fixed
Cgl0003I 0 fixed, 27 tightened bounds, 912 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 17 tightened bounds, 349 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 4 tightened bounds, 62 strengthened rows, 0 substitutions
Cgl0004I processed model has 4131 rows, 1401 columns (1401 integer (1365 of which binary)) and 14020 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1401 objects (1401 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 761 integers unsatisfied sum - 246.245
Cbc0038I Pass   1: (0.78 seconds) suminf.   33.82167 (195) obj. 45954.9 iterations 1432
Cbc0038I Pass   2: (0.90 seconds) suminf.   15.43783 (178) obj. 49054.7 iterations 1116
Cbc0038I Pass   3: (0.91 seconds) suminf.   15.58805 (179) obj. 49055.4 iterations 79
Cbc0038I Pass   4: (0.98 seconds) suminf.    9.44652 (91) obj. 48779.3 iterations 491
Cbc0038I Pass   5: (1.04 seconds) suminf.    8.11895 (98) obj. 48686.1 iterations 544
Cbc0038I Pass   6: (1.06 seconds) suminf.    6.68595 (101) obj. 48726.7 iterations 106
Cbc0038I Pass   7: (1.16 seconds) suminf.    6.95376 (72) obj. 42908 iterations 931
Cbc0038I Pass   8: (1.24 seconds) suminf.    3.91995 (98) obj. 42500.9 iterations 550
Cbc0038I Pass   9: (1.48 seconds) suminf.    4.66952 (48) obj. 49074.1 iterations 2203
Cbc0038I Pass  10: (1.51 seconds) suminf.    0.00000 (0) obj. 49152 iterations 155
Cbc0038I Solution found of 49152
Cbc0038I Cleaned solution of 49152
Cbc0038I Before mini branch and bound, 535 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (1.56 seconds)
Cbc0038I Round again with cutoff of 47103.1
Cbc0038I Pass  11: (1.56 seconds) suminf.   33.82167 (195) obj. 45954.9 iterations 0
Cbc0038I Pass  12: (1.64 seconds) suminf.   16.10697 (157) obj. 47103.1 iterations 710
Cbc0038I Pass  13: (1.67 seconds) suminf.   15.44942 (136) obj. 47103.1 iterations 270
Cbc0038I Pass  14: (1.74 seconds) suminf.   10.33378 (123) obj. 43097.7 iterations 678
Cbc0038I Pass  15: (1.85 seconds) suminf.    5.01602 (71) obj. 45988.2 iterations 902
Cbc0038I Pass  16: (1.89 seconds) suminf.    4.53610 (94) obj. 46008.4 iterations 295
Cbc0038I Pass  17: (1.93 seconds) suminf.    1.13049 (43) obj. 41984 iterations 300
Cbc0038I Pass  18: (1.93 seconds) suminf.    1.12940 (44) obj. 41984 iterations 19
Cbc0038I Pass  19: (1.99 seconds) suminf.    1.30062 (7) obj. 47103.1 iterations 346
Cbc0038I Pass  20: (2.00 seconds) suminf.    0.10009 (1) obj. 47103.1 iterations 45
Cbc0038I Solution found of 47103.1
Cbc0038I Branch and bound needed to clear up 1 general integers
Cbc0038I Full problem 4132 rows 1401 columns, reduced to 0 rows 0 columns
Cbc0038I Cleaned solution of 41984
Cbc0038I Before mini branch and bound, 550 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 3019 rows 851 columns - 533 fixed gives 112, 38 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 6 rows 3 columns
Cbc0038I Mini branch and bound did not improve solution (2.23 seconds)
Cbc0038I Round again with cutoff of 39320.8
Cbc0038I Pass  21: (2.24 seconds) suminf.   37.39928 (198) obj. 39320 iterations 39
Cbc0038I Pass  22: (2.32 seconds) suminf.   17.90520 (207) obj. 39320.8 iterations 707
Cbc0038I Pass  23: (2.32 seconds) suminf.   17.90520 (207) obj. 39320.8 iterations 15
Cbc0038I Pass  24: (2.41 seconds) suminf.    8.92679 (127) obj. 39320.8 iterations 729
Cbc0038I Pass  25: (2.43 seconds) suminf.    7.55160 (138) obj. 39320.8 iterations 110
Cbc0038I Pass  26: (2.60 seconds) suminf.    8.70683 (71) obj. 39320.8 iterations 1590
Cbc0038I Pass  27: (2.63 seconds) suminf.    2.99348 (43) obj. 39320.8 iterations 164
Cbc0038I Pass  28: (2.67 seconds) suminf.    5.49990 (63) obj. 39320.8 iterations 330
Cbc0038I Pass  29: (2.69 seconds) suminf.    5.15691 (64) obj. 39320.8 iterations 76
Cbc0038I Pass  30: (2.70 seconds) suminf.    4.57092 (58) obj. 39320.8 iterations 86
Cbc0038I Pass  31: (2.89 seconds) suminf.    3.05148 (12) obj. 39320.8 iterations 1330
Cbc0038I Pass  32: (2.99 seconds) suminf.    1.90225 (27) obj. 39320.8 iterations 855
Cbc0038I Pass  33: (3.16 seconds) suminf.    0.62181 (16) obj. 39320.8 iterations 1475
Cbc0038I Pass  34: (3.17 seconds) suminf.    0.62181 (16) obj. 39320.8 iterations 2
Cbc0038I Pass  35: (3.23 seconds) suminf.    1.52905 (22) obj. 39320.8 iterations 386
Cbc0038I Pass  36: (3.25 seconds) suminf.    1.26034 (23) obj. 39320.8 iterations 108
Cbc0038I Pass  37: (3.26 seconds) suminf.    0.19992 (1) obj. 39320.8 iterations 68
Cbc0038I Solution found of 39320.8
Cbc0038I Branch and bound needed to clear up 1 general integers
Cbc0038I Full problem 4132 rows 1401 columns, reduced to 0 rows 0 columns
Cbc0038I Cleaned solution of 38912
Cbc0038I Before mini branch and bound, 529 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 3064 rows 872 columns - 520 fixed gives 308, 73 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 92 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (3.47 seconds)
Cbc0038I Round again with cutoff of 35839.3
Cbc0038I Pass  38: (3.49 seconds) suminf.   49.08411 (198) obj. 35839.3 iterations 98
Cbc0038I Pass  39: (3.57 seconds) suminf.   24.14061 (143) obj. 35839.3 iterations 670
Cbc0038I Pass  40: (3.61 seconds) suminf.   17.78231 (117) obj. 35839.3 iterations 288
Cbc0038I Pass  41: (3.75 seconds) suminf.   16.04087 (124) obj. 35839.3 iterations 1287
Cbc0038I Pass  42: (3.87 seconds) suminf.   14.83883 (173) obj. 35839.3 iterations 1169
Cbc0038I Pass  43: (3.88 seconds) suminf.   14.77576 (207) obj. 35839.3 iterations 35
Cbc0038I Pass  44: (3.92 seconds) suminf.   11.29852 (147) obj. 35839.3 iterations 324
Cbc0038I Pass  45: (3.94 seconds) suminf.   10.63544 (150) obj. 35839.3 iterations 109
Cbc0038I Pass  46: (3.98 seconds) suminf.   10.08314 (150) obj. 35839.3 iterations 312
Cbc0038I Pass  47: (4.01 seconds) suminf.    7.82113 (153) obj. 35839.3 iterations 233
Cbc0038I Pass  48: (4.21 seconds) suminf.    6.64547 (84) obj. 35839.3 iterations 1671
Cbc0038I Pass  49: (4.27 seconds) suminf.    5.19171 (121) obj. 35839.3 iterations 418
Cbc0038I Pass  50: (4.28 seconds) suminf.    5.20454 (121) obj. 35839.3 iterations 44
Cbc0038I Pass  51: (4.35 seconds) suminf.    9.02852 (55) obj. 35839.3 iterations 573
Cbc0038I Pass  52: (4.39 seconds) suminf.    8.50021 (113) obj. 35839.3 iterations 217
Cbc0038I Pass  53: (4.59 seconds) suminf.    6.16480 (47) obj. 35839.3 iterations 1614
Cbc0038I Pass  54: (4.63 seconds) suminf.    2.66789 (48) obj. 35839.3 iterations 266
Cbc0038I Pass  55: (4.86 seconds) suminf.    4.89568 (49) obj. 35839.3 iterations 1959
Cbc0038I Pass  56: (4.94 seconds) suminf.    1.40880 (30) obj. 35839.3 iterations 633
Cbc0038I Pass  57: (4.98 seconds) suminf.    0.30130 (28) obj. 35839.3 iterations 207
Cbc0038I Pass  58: (4.98 seconds) suminf.    0.30130 (26) obj. 35839.3 iterations 4
Cbc0038I Pass  59: (4.98 seconds) suminf.    0.30130 (26) obj. 35839.3 iterations 0
Cbc0038I Pass  60: (5.14 seconds) suminf.   65.67871 (319) obj. 35839.3 iterations 1333
Cbc0038I Pass  61: (5.32 seconds) suminf.   26.16514 (200) obj. 35839.3 iterations 1459
Cbc0038I Pass  62: (5.39 seconds) suminf.   18.80696 (155) obj. 35839.3 iterations 553
Cbc0038I Pass  63: (5.41 seconds) suminf.   17.26753 (148) obj. 35839.3 iterations 106
Cbc0038I Pass  64: (5.43 seconds) suminf.   15.07202 (149) obj. 35839.3 iterations 185
Cbc0038I Pass  65: (5.45 seconds) suminf.    7.93200 (102) obj. 35839.3 iterations 153
Cbc0038I Pass  66: (5.46 seconds) suminf.    7.93200 (102) obj. 35839.3 iterations 16
Cbc0038I Pass  67: (5.63 seconds) suminf.    5.36801 (41) obj. 35839.3 iterations 1341
Cbc0038I Pass  68: (5.67 seconds) suminf.    1.35353 (39) obj. 35839.3 iterations 289
Cbc0038I Pass  69: (5.77 seconds) suminf.    5.01311 (130) obj. 35839.3 iterations 865
Cbc0038I Pass  70: (5.78 seconds) suminf.    4.96444 (131) obj. 35839.3 iterations 102
Cbc0038I Pass  71: (5.79 seconds) suminf.    4.96444 (131) obj. 35839.3 iterations 40
Cbc0038I Pass  72: (6.00 seconds) suminf.   72.67123 (354) obj. 35839.3 iterations 1795
Cbc0038I No solution found this major pass
Cbc0038I After 6.00 seconds - Feasibility pump exiting with objective of 38912 - took 5.42 seconds
Cbc0012I Integer solution of 38912 found by feasibility pump after 0 iterations and 0 nodes (6.00 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2871 rows 779 columns - 518 fixed gives 64, 23 - ok now
Cbc0031I 72 added rows had average density of 20.388889
Cbc0013I At root node, 72 cuts changed objective from 28672 to 29626.519 in 23 passes
Cbc0014I Cut generator 0 (Probing) - 83 row cuts average 3.4 elements, 7 column cuts (7 active)  in 0.237 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 230 row cuts average 226.2 elements, 0 column cuts (0 active)  in 1.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 24.3 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.054 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 351 row cuts average 20.1 elements, 0 column cuts (0 active)  in 0.242 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 38912 best solution, best possible 29626.519 (36.92 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2697 rows 758 columns - 448 fixed gives 59, 18 - ok now
Cbc0010I After 100 nodes, 12 on tree, 38912 best solution, best possible 29626.519 (149.98 seconds)
Cbc0010I After 200 nodes, 32 on tree, 38912 best solution, best possible 29626.519 (254.77 seconds)
Cbc0010I After 300 nodes, 49 on tree, 38912 best solution, best possible 29626.519 (356.10 seconds)
Cbc0010I After 400 nodes, 66 on tree, 38912 best solution, best possible 29626.519 (446.77 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2447 rows 680 columns - 409 fixed gives 25, 10 - ok now
Cbc0010I After 500 nodes, 78 on tree, 38912 best solution, best possible 29626.519 (524.21 seconds)
Cbc0010I After 600 nodes, 87 on tree, 38912 best solution, best possible 29626.519 (605.79 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2646 rows 740 columns - 449 fixed gives 39, 15 - ok now
Cbc0010I After 700 nodes, 97 on tree, 38912 best solution, best possible 29626.519 (689.98 seconds)
Cbc0010I After 800 nodes, 70 on tree, 38912 best solution, best possible 29626.519 (767.02 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2963 rows 836 columns - 497 fixed gives 39, 16 - ok now
Cbc0010I After 900 nodes, 32 on tree, 38912 best solution, best possible 29626.519 (831.18 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2569 rows 710 columns - 432 fixed gives 49, 19 - ok now
Cbc0010I After 1000 nodes, 8 on tree, 38912 best solution, best possible 29626.519 (895.84 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2805 rows 794 columns - 471 fixed gives 34, 14 - ok now
Cbc0010I After 1100 nodes, 16 on tree, 38912 best solution, best possible 29626.519 (963.31 seconds)
Cbc0010I After 1200 nodes, 23 on tree, 38912 best solution, best possible 29626.519 (1032.76 seconds)
Cbc0010I After 1300 nodes, 37 on tree, 38912 best solution, best possible 29626.519 (1101.31 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2611 rows 708 columns - 453 fixed gives 22, 9 - ok now
Cbc0010I After 1400 nodes, 46 on tree, 38912 best solution, best possible 29626.519 (1183.88 seconds)
Cbc0010I After 1500 nodes, 57 on tree, 38912 best solution, best possible 29626.519 (1240.01 seconds)
Cbc0010I After 1600 nodes, 63 on tree, 38912 best solution, best possible 29626.519 (1301.70 seconds)
Cbc0010I After 1700 nodes, 72 on tree, 38912 best solution, best possible 29626.519 (1375.67 seconds)
Cbc0010I After 1800 nodes, 85 on tree, 38912 best solution, best possible 29626.519 (1427.69 seconds)
Cbc0010I After 1900 nodes, 76 on tree, 38912 best solution, best possible 29626.519 (1442.28 seconds)
Cbc0010I After 2000 nodes, 86 on tree, 38912 best solution, best possible 29626.519 (1476.01 seconds)
Cbc0010I After 2100 nodes, 86 on tree, 38912 best solution, best possible 29626.519 (1500.54 seconds)
Cbc0010I After 2200 nodes, 85 on tree, 38912 best solution, best possible 29626.519 (1518.14 seconds)
Cbc0010I After 2300 nodes, 90 on tree, 38912 best solution, best possible 29626.519 (1550.74 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 738 rows 211 columns
Cbc0010I After 2400 nodes, 88 on tree, 38912 best solution, best possible 29626.519 (1584.27 seconds)
Cbc0010I After 2500 nodes, 89 on tree, 38912 best solution, best possible 29626.519 (1601.29 seconds)
Cbc0010I After 2600 nodes, 93 on tree, 38912 best solution, best possible 29626.519 (1628.93 seconds)
Cbc0010I After 2700 nodes, 88 on tree, 38912 best solution, best possible 29626.519 (1669.29 seconds)
Cbc0010I After 2800 nodes, 98 on tree, 38912 best solution, best possible 29626.519 (1702.06 seconds)
Cbc0010I After 2900 nodes, 92 on tree, 38912 best solution, best possible 29626.519 (1725.71 seconds)
Cbc0010I After 3000 nodes, 95 on tree, 38912 best solution, best possible 29626.519 (1754.08 seconds)
Cbc0010I After 3100 nodes, 79 on tree, 38912 best solution, best possible 29626.519 (1780.63 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 38912 (best possible 29626.519), took 6157248 iterations and 3156 nodes (1799.97 seconds)
Cbc0032I Strong branching done 19900 times (1452210 iterations), fathomed 475 nodes and fixed 2919 variables
Cbc0035I Maximum depth 770, 0 variables fixed on reduced cost
Cuts at root node changed objective from 28672 to 29626.5
Probing was tried 624 times and created 56961 cuts of which 0 were active after adding rounds of cuts (3.663 seconds)
Gomory was tried 381 times and created 497 cuts of which 0 were active after adding rounds of cuts (3.251 seconds)
Knapsack was tried 23 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.041 seconds)
Clique was tried 23 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.054 seconds)
MixedIntegerRounding2 was tried 23 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.038 seconds)
FlowCover was tried 23 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.027 seconds)
TwoMirCuts was tried 381 times and created 6296 cuts of which 0 were active after adding rounds of cuts (1.296 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.045 seconds)
ImplicationCuts was tried 33 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)

Result - Stopped on time limit

Objective value:                38912.00000000
Lower bound:                    29626.519
Gap:                            0.31
Enumerated nodes:               3156
Total iterations:               6157248
Time (CPU seconds):             1800.17
Time (Wallclock seconds):       1801.18

Total time (CPU seconds):       1800.18   (Wallclock seconds):       1801.19

