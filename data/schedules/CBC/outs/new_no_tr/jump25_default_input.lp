Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/jump25_default_input.lp sec 1800 solve solu solutions/new_no_tr/jump25_default_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 25600 - 0.06 seconds
Cgl0002I 68 variables fixed
Cgl0003I 0 fixed, 8 tightened bounds, 207 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 18 strengthened rows, 0 substitutions
Cgl0004I processed model has 1577 rows, 516 columns (516 integer (490 of which binary)) and 5425 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 516 objects (516 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 324 integers unsatisfied sum - 113.92
Cbc0038I Pass   1: suminf.   39.05249 (209) obj. 38455.9 iterations 601
Cbc0038I Pass   2: suminf.   28.28979 (188) obj. 40822.2 iterations 242
Cbc0038I Pass   3: suminf.   29.36007 (176) obj. 40765.2 iterations 65
Cbc0038I Pass   4: suminf.   24.99604 (157) obj. 38301.6 iterations 236
Cbc0038I Pass   5: suminf.   21.45837 (147) obj. 37413.3 iterations 185
Cbc0038I Pass   6: suminf.   19.40156 (138) obj. 37408.4 iterations 214
Cbc0038I Pass   7: suminf.   15.26139 (108) obj. 36072.3 iterations 364
Cbc0038I Pass   8: suminf.   12.52224 (92) obj. 36134.4 iterations 116
Cbc0038I Pass   9: suminf.   12.50314 (78) obj. 38742.5 iterations 139
Cbc0038I Pass  10: suminf.    8.69687 (69) obj. 38801.1 iterations 47
Cbc0038I Pass  11: suminf.    8.96409 (68) obj. 38780.9 iterations 40
Cbc0038I Pass  12: suminf.    3.93142 (47) obj. 47508 iterations 106
Cbc0038I Pass  13: suminf.    3.56441 (45) obj. 47478 iterations 68
Cbc0038I Pass  14: suminf.    2.00389 (33) obj. 48092.3 iterations 113
Cbc0038I Pass  15: suminf.    1.72483 (38) obj. 48070.4 iterations 40
Cbc0038I Pass  16: suminf.    0.31277 (10) obj. 48080.1 iterations 79
Cbc0038I Pass  17: suminf.    0.28936 (9) obj. 48080.1 iterations 5
Cbc0038I Pass  18: suminf.    0.27015 (8) obj. 48078.9 iterations 21
Cbc0038I Pass  19: suminf.   31.62965 (175) obj. 43740.3 iterations 488
Cbc0038I Pass  20: suminf.   21.04003 (120) obj. 43816.4 iterations 218
Cbc0038I Pass  21: suminf.   19.46263 (118) obj. 43261.2 iterations 69
Cbc0038I Pass  22: suminf.   19.49631 (116) obj. 43230.8 iterations 43
Cbc0038I Pass  23: suminf.   13.95571 (105) obj. 43977.7 iterations 146
Cbc0038I Pass  24: suminf.   12.91710 (92) obj. 43253 iterations 69
Cbc0038I Pass  25: suminf.    6.81770 (67) obj. 43946.4 iterations 95
Cbc0038I Pass  26: suminf.    2.86462 (35) obj. 44400.5 iterations 57
Cbc0038I Pass  27: suminf.    2.86462 (35) obj. 44400.5 iterations 0
Cbc0038I Pass  28: suminf.    3.01561 (23) obj. 47646.4 iterations 421
Cbc0038I Pass  29: suminf.    0.48075 (13) obj. 48128 iterations 64
Cbc0038I Pass  30: suminf.    0.76192 (17) obj. 47883.8 iterations 19
Cbc0038I Pass  31: suminf.    1.92029 (14) obj. 47397.6 iterations 87
Cbc0038I Pass  32: suminf.    1.23399 (12) obj. 48938.7 iterations 8
Cbc0038I Pass  33: suminf.    0.00000 (0) obj. 46080 iterations 20
Cbc0038I Solution found of 46080
Cbc0038I Cleaned solution of 46080
Cbc0038I Before mini branch and bound, 75 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1424 rows 441 columns - 55 fixed gives 1124, 347 - still too large
Cbc0038I Full problem 1577 rows 516 columns, reduced to 987 rows 304 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.65 seconds)
Cbc0038I Round again with cutoff of 44038.4
Cbc0038I Pass  34: suminf.   39.05249 (209) obj. 38455.9 iterations 0
Cbc0038I Pass  35: suminf.   28.28979 (188) obj. 40822.2 iterations 195
Cbc0038I Pass  36: suminf.   29.36007 (176) obj. 40765.2 iterations 84
Cbc0038I Pass  37: suminf.   23.91496 (140) obj. 38231.1 iterations 273
Cbc0038I Pass  38: suminf.   22.28702 (145) obj. 37542 iterations 176
Cbc0038I Pass  39: suminf.   16.49260 (128) obj. 38832.6 iterations 185
Cbc0038I Pass  40: suminf.   15.48014 (127) obj. 38922.9 iterations 16
Cbc0038I Pass  41: suminf.   16.21865 (102) obj. 37225.1 iterations 258
Cbc0038I Pass  42: suminf.   14.89621 (105) obj. 37685.5 iterations 71
Cbc0038I Pass  43: suminf.   11.05157 (83) obj. 38341 iterations 201
Cbc0038I Pass  44: suminf.   11.77373 (81) obj. 38260 iterations 26
Cbc0038I Pass  45: suminf.    3.34443 (37) obj. 40960 iterations 183
Cbc0038I Pass  46: suminf.    2.80867 (37) obj. 40960 iterations 8
Cbc0038I Pass  47: suminf.    0.00000 (0) obj. 40960 iterations 49
Cbc0038I Solution found of 40960
Cbc0038I Cleaned solution of 40960
Cbc0038I Before mini branch and bound, 110 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1354 rows 406 columns - 170 fixed gives 533, 141 - still too large
Cbc0038I Full problem 1577 rows 516 columns, reduced to 213 rows 77 columns
Cbc0038I Mini branch and bound did not improve solution (0.92 seconds)
Cbc0038I Round again with cutoff of 37901.9
Cbc0038I Pass  48: suminf.   39.76638 (208) obj. 37901 iterations 6
Cbc0038I Pass  49: suminf.   29.58383 (186) obj. 37901.9 iterations 248
Cbc0038I Pass  50: suminf.   29.54352 (181) obj. 37901.9 iterations 88
Cbc0038I Pass  51: suminf.   27.35129 (174) obj. 37901.9 iterations 190
Cbc0038I Pass  52: suminf.   27.46947 (183) obj. 37901.9 iterations 22
Cbc0038I Pass  53: suminf.   22.81585 (155) obj. 37901.9 iterations 189
Cbc0038I Pass  54: suminf.   20.73186 (145) obj. 37901.9 iterations 102
Cbc0038I Pass  55: suminf.   20.31998 (138) obj. 37901.9 iterations 158
Cbc0038I Pass  56: suminf.   17.67194 (131) obj. 37901.9 iterations 266
Cbc0038I Pass  57: suminf.   15.15982 (139) obj. 37901.9 iterations 133
Cbc0038I Pass  58: suminf.   14.11132 (129) obj. 37901.9 iterations 77
Cbc0038I Pass  59: suminf.   15.99566 (113) obj. 37901.9 iterations 344
Cbc0038I Pass  60: suminf.   14.35473 (109) obj. 37901.9 iterations 108
Cbc0038I Pass  61: suminf.    9.93862 (65) obj. 37901.9 iterations 211
Cbc0038I Pass  62: suminf.    9.01348 (69) obj. 37901.9 iterations 60
Cbc0038I Pass  63: suminf.    5.86690 (52) obj. 37901.9 iterations 184
Cbc0038I Pass  64: suminf.    4.67921 (46) obj. 37901.9 iterations 13
Cbc0038I Pass  65: suminf.    5.00449 (29) obj. 37901.9 iterations 140
Cbc0038I Pass  66: suminf.    5.02637 (28) obj. 37901.9 iterations 76
Cbc0038I Pass  67: suminf.    2.50480 (19) obj. 37901.9 iterations 110
Cbc0038I Pass  68: suminf.    1.92707 (16) obj. 37901.9 iterations 45
Cbc0038I Pass  69: suminf.    2.28185 (14) obj. 37901.9 iterations 84
Cbc0038I Pass  70: suminf.   33.27550 (154) obj. 37901.9 iterations 366
Cbc0038I Pass  71: suminf.   19.86681 (130) obj. 37901.9 iterations 343
Cbc0038I Pass  72: suminf.   18.49510 (105) obj. 37901.9 iterations 112
Cbc0038I Pass  73: suminf.   16.80949 (97) obj. 37901.9 iterations 80
Cbc0038I Pass  74: suminf.   17.95042 (106) obj. 37901.9 iterations 63
Cbc0038I Pass  75: suminf.    8.89244 (57) obj. 37901.9 iterations 273
Cbc0038I Pass  76: suminf.    8.89244 (57) obj. 37901.9 iterations 7
Cbc0038I Pass  77: suminf.    9.01371 (44) obj. 37901.9 iterations 164
Cbc0038I Pass  78: suminf.    7.11862 (38) obj. 37901.9 iterations 12
Cbc0038I Pass  79: suminf.    1.55135 (11) obj. 37901.9 iterations 142
Cbc0038I Pass  80: suminf.    1.55135 (11) obj. 37901.9 iterations 1
Cbc0038I Pass  81: suminf.    1.46323 (11) obj. 37901.9 iterations 45
Cbc0038I Pass  82: suminf.    0.68216 (11) obj. 37901.9 iterations 14
Cbc0038I Pass  83: suminf.    2.92134 (12) obj. 37901.9 iterations 80
Cbc0038I Pass  84: suminf.    2.61952 (12) obj. 37901.9 iterations 32
Cbc0038I Pass  85: suminf.    1.46323 (11) obj. 37901.9 iterations 58
Cbc0038I Pass  86: suminf.    0.68216 (11) obj. 37901.9 iterations 21
Cbc0038I Pass  87: suminf.    1.63248 (12) obj. 37901.9 iterations 35
Cbc0038I Pass  88: suminf.    1.32947 (11) obj. 37901.9 iterations 32
Cbc0038I Pass  89: suminf.    1.52572 (13) obj. 37901.9 iterations 58
Cbc0038I Pass  90: suminf.    0.74751 (13) obj. 37901.9 iterations 15
Cbc0038I Pass  91: suminf.    2.42044 (38) obj. 37901.9 iterations 131
Cbc0038I Pass  92: suminf.    2.18683 (37) obj. 37901.9 iterations 12
Cbc0038I Pass  93: suminf.    9.66509 (45) obj. 37901.9 iterations 155
Cbc0038I Pass  94: suminf.    8.23270 (38) obj. 37901.9 iterations 150
Cbc0038I Pass  95: suminf.    7.73463 (35) obj. 37901.9 iterations 171
Cbc0038I Pass  96: suminf.    4.32243 (28) obj. 37901.9 iterations 45
Cbc0038I Pass  97: suminf.    3.86535 (22) obj. 37901.9 iterations 55
Cbc0038I Pass  98: suminf.    1.67649 (16) obj. 37901.9 iterations 79
Cbc0038I Pass  99: suminf.    0.89541 (16) obj. 37901.9 iterations 14
Cbc0038I Pass 100: suminf.    1.79926 (23) obj. 37901.9 iterations 60
Cbc0038I Pass 101: suminf.    1.50012 (22) obj. 37901.9 iterations 21
Cbc0038I Pass 102: suminf.    2.37775 (24) obj. 37901.9 iterations 48
Cbc0038I Pass 103: suminf.    1.30252 (22) obj. 37901.9 iterations 16
Cbc0038I Pass 104: suminf.    2.42295 (38) obj. 37901.9 iterations 165
Cbc0038I Pass 105: suminf.    2.18932 (37) obj. 37901.9 iterations 23
Cbc0038I Pass 106: suminf.    9.24325 (43) obj. 37901.9 iterations 202
Cbc0038I Pass 107: suminf.    6.96428 (35) obj. 37901.9 iterations 134
Cbc0038I Pass 108: suminf.    7.02301 (43) obj. 37901.9 iterations 57
Cbc0038I Pass 109: suminf.    4.36539 (33) obj. 37901.9 iterations 224
Cbc0038I Pass 110: suminf.    3.86425 (33) obj. 37901.9 iterations 83
Cbc0038I Pass 111: suminf.    6.32761 (31) obj. 37901.9 iterations 140
Cbc0038I Pass 112: suminf.    4.65109 (42) obj. 37901.9 iterations 94
Cbc0038I Pass 113: suminf.    4.40300 (55) obj. 37901.9 iterations 289
Cbc0038I Pass 114: suminf.    3.87253 (29) obj. 37901.9 iterations 76
Cbc0038I Pass 115: suminf.    3.66335 (28) obj. 37901.9 iterations 185
Cbc0038I Pass 116: suminf.    5.69933 (26) obj. 37901.9 iterations 91
Cbc0038I Pass 117: suminf.    2.34555 (20) obj. 37901.9 iterations 87
Cbc0038I Pass 118: suminf.    2.29362 (20) obj. 37901.9 iterations 18
Cbc0038I Pass 119: suminf.    2.32492 (17) obj. 37901.9 iterations 71
Cbc0038I Pass 120: suminf.    0.68664 (12) obj. 37901.9 iterations 15
Cbc0038I Pass 121: suminf.    2.97152 (15) obj. 37901.9 iterations 77
Cbc0038I Pass 122: suminf.    1.55135 (11) obj. 37901.9 iterations 56
Cbc0038I Pass 123: suminf.    1.55492 (17) obj. 37901.9 iterations 58
Cbc0038I Pass 124: suminf.    0.77689 (17) obj. 37901.9 iterations 16
Cbc0038I Pass 125: suminf.    1.76684 (19) obj. 37901.9 iterations 66
Cbc0038I Pass 126: suminf.    1.47986 (18) obj. 37901.9 iterations 13
Cbc0038I Pass 127: suminf.    1.46323 (11) obj. 37901.9 iterations 151
Cbc0038I Pass 128: suminf.    0.68216 (11) obj. 37901.9 iterations 10
Cbc0038I Pass 129: suminf.    3.00830 (12) obj. 37901.9 iterations 51
Cbc0038I Pass 130: suminf.    2.70184 (12) obj. 37901.9 iterations 26
Cbc0038I Pass 131: suminf.    1.46323 (11) obj. 37901.9 iterations 44
Cbc0038I Pass 132: suminf.    0.68216 (11) obj. 37901.9 iterations 20
Cbc0038I Pass 133: suminf.    1.92289 (12) obj. 37901.9 iterations 48
Cbc0038I Pass 134: suminf.    1.55135 (11) obj. 37901.9 iterations 15
Cbc0038I Pass 135: suminf.    1.52572 (13) obj. 37901.9 iterations 36
Cbc0038I Pass 136: suminf.    0.74751 (13) obj. 37901.9 iterations 20
Cbc0038I Pass 137: suminf.    2.94473 (35) obj. 37901.9 iterations 131
Cbc0038I Pass 138: suminf.    2.58637 (33) obj. 37901.9 iterations 26
Cbc0038I Pass 139: suminf.    4.03559 (39) obj. 37901.9 iterations 67
Cbc0038I Pass 140: suminf.    1.70113 (34) obj. 37901.9 iterations 74
Cbc0038I Pass 141: suminf.    7.53666 (34) obj. 37901.9 iterations 135
Cbc0038I Pass 142: suminf.    2.90932 (25) obj. 37901.9 iterations 77
Cbc0038I Pass 143: suminf.    3.02651 (23) obj. 37901.9 iterations 58
Cbc0038I Pass 144: suminf.    1.04579 (18) obj. 37901.9 iterations 35
Cbc0038I Pass 145: suminf.    1.92289 (12) obj. 37901.9 iterations 37
Cbc0038I Pass 146: suminf.    1.55135 (11) obj. 37901.9 iterations 15
Cbc0038I Pass 147: suminf.   44.34424 (178) obj. 37901.9 iterations 486
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 54 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1468 rows 462 columns - 178 fixed gives 707, 209 - ok now
Cbc0038I Mini branch and bound did not improve solution (1.92 seconds)
Cbc0038I After 1.92 seconds - Feasibility pump exiting with objective of 40960 - took 1.81 seconds
Cbc0012I Integer solution of 40960 found by feasibility pump after 0 iterations and 0 nodes (1.92 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1241 rows 356 columns - 166 fixed gives 403, 89 - ok now
Cbc0031I 47 added rows had average density of 121.14894
Cbc0013I At root node, 47 cuts changed objective from 25673.493 to 28672 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 68 row cuts average 2.8 elements, 1 column cuts (1 active)  in 0.033 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 97 row cuts average 216.6 elements, 0 column cuts (0 active)  in 0.151 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 234 row cuts average 280.6 elements, 0 column cuts (0 active)  in 0.443 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 40960 best solution, best possible 28672 (4.44 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1258 rows 365 columns - 151 fixed gives 490, 119 - ok now
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1268 rows 370 columns - 154 fixed gives 501, 124 - ok now
Cbc0010I After 100 nodes, 1 on tree, 40960 best solution, best possible 28700 (22.55 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1261 rows 367 columns - 154 fixed gives 495, 121 - ok now
Cbc0010I After 200 nodes, 1 on tree, 40960 best solution, best possible 28750 (31.99 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1246 rows 363 columns - 145 fixed gives 482, 115 - ok now
Cbc0010I After 300 nodes, 1 on tree, 40960 best solution, best possible 28800 (44.32 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1250 rows 364 columns - 147 fixed gives 482, 115 - ok now
Cbc0010I After 400 nodes, 1 on tree, 40960 best solution, best possible 28850 (53.76 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1254 rows 366 columns - 147 fixed gives 477, 114 - ok now
Cbc0010I After 500 nodes, 1 on tree, 40960 best solution, best possible 28900 (63.08 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1251 rows 364 columns - 146 fixed gives 478, 114 - ok now
Cbc0010I After 600 nodes, 1 on tree, 40960 best solution, best possible 28950 (72.42 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1249 rows 365 columns - 147 fixed gives 474, 118 - ok now
Cbc0010I After 700 nodes, 1 on tree, 40960 best solution, best possible 29000 (82.67 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1247 rows 364 columns - 148 fixed gives 469, 115 - ok now
Cbc0010I After 800 nodes, 1 on tree, 40960 best solution, best possible 29050 (93.04 seconds)
Cbc0010I After 900 nodes, 1 on tree, 40960 best solution, best possible 29100 (103.21 seconds)
Cbc0010I After 1000 nodes, 1 on tree, 40960 best solution, best possible 29150 (114.01 seconds)
Cbc0010I After 1100 nodes, 1 on tree, 40960 best solution, best possible 29200 (125.35 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1264 rows 370 columns - 149 fixed gives 488, 118 - ok now
Cbc0010I After 1200 nodes, 1 on tree, 40960 best solution, best possible 29250 (134.61 seconds)
Cbc0010I After 1300 nodes, 1 on tree, 40960 best solution, best possible 29300 (144.47 seconds)
Cbc0010I After 1400 nodes, 1 on tree, 40960 best solution, best possible 29350 (154.71 seconds)
Cbc0010I After 1500 nodes, 1 on tree, 40960 best solution, best possible 29400 (162.82 seconds)
Cbc0010I After 1600 nodes, 1 on tree, 40960 best solution, best possible 29450 (169.16 seconds)
Cbc0010I After 1700 nodes, 1 on tree, 40960 best solution, best possible 29500 (175.93 seconds)
Cbc0010I After 1800 nodes, 2 on tree, 40960 best solution, best possible 30731.934 (184.26 seconds)
Cbc0010I After 1900 nodes, 44 on tree, 40960 best solution, best possible 30731.934 (191.36 seconds)
Cbc0010I After 2000 nodes, 51 on tree, 40960 best solution, best possible 30731.934 (202.03 seconds)
Cbc0010I After 2100 nodes, 51 on tree, 40960 best solution, best possible 30731.934 (213.71 seconds)
Cbc0010I After 2200 nodes, 56 on tree, 40960 best solution, best possible 30731.934 (223.41 seconds)
Cbc0010I After 2300 nodes, 62 on tree, 40960 best solution, best possible 30731.934 (234.25 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1236 rows 357 columns - 157 fixed gives 425, 94 - ok now
Cbc0010I After 2400 nodes, 63 on tree, 40960 best solution, best possible 30731.934 (245.69 seconds)
Cbc0010I After 2500 nodes, 68 on tree, 40960 best solution, best possible 30731.934 (255.61 seconds)
Cbc0010I After 2600 nodes, 72 on tree, 40960 best solution, best possible 30731.934 (266.14 seconds)
Cbc0010I After 2700 nodes, 77 on tree, 40960 best solution, best possible 30731.934 (276.60 seconds)
Cbc0010I After 2800 nodes, 83 on tree, 40960 best solution, best possible 30731.934 (285.79 seconds)
Cbc0010I After 2900 nodes, 88 on tree, 40960 best solution, best possible 30731.934 (295.37 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1246 rows 359 columns - 156 fixed gives 437, 98 - ok now
Cbc0010I After 3000 nodes, 95 on tree, 40960 best solution, best possible 30731.934 (304.44 seconds)
Cbc0010I After 3100 nodes, 102 on tree, 40960 best solution, best possible 30731.934 (312.88 seconds)
Cbc0010I After 3200 nodes, 104 on tree, 40960 best solution, best possible 30731.934 (322.30 seconds)
Cbc0010I After 3300 nodes, 110 on tree, 40960 best solution, best possible 30731.934 (330.58 seconds)
Cbc0010I After 3400 nodes, 115 on tree, 40960 best solution, best possible 30731.934 (342.41 seconds)
Cbc0010I After 3500 nodes, 119 on tree, 40960 best solution, best possible 30731.934 (353.34 seconds)
Cbc0010I After 3600 nodes, 120 on tree, 40960 best solution, best possible 30731.934 (361.18 seconds)
Cbc0010I After 3700 nodes, 133 on tree, 40960 best solution, best possible 30731.934 (369.86 seconds)
Cbc0010I After 3800 nodes, 152 on tree, 40960 best solution, best possible 30731.934 (378.70 seconds)
Cbc0010I After 3900 nodes, 172 on tree, 40960 best solution, best possible 30731.934 (386.05 seconds)
Cbc0010I After 4000 nodes, 214 on tree, 40960 best solution, best possible 30731.934 (392.13 seconds)
Cbc0010I After 4100 nodes, 223 on tree, 40960 best solution, best possible 30731.934 (400.38 seconds)
Cbc0010I After 4200 nodes, 230 on tree, 40960 best solution, best possible 30731.934 (409.47 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1107 rows 314 columns - 115 fixed gives 454, 113 - ok now
Cbc0010I After 4300 nodes, 246 on tree, 40960 best solution, best possible 30731.934 (417.62 seconds)
Cbc0010I After 4400 nodes, 254 on tree, 40960 best solution, best possible 30731.934 (426.11 seconds)
Cbc0010I After 4500 nodes, 263 on tree, 40960 best solution, best possible 30731.934 (435.12 seconds)
Cbc0010I After 4600 nodes, 263 on tree, 40960 best solution, best possible 30731.934 (444.16 seconds)
Cbc0010I After 4700 nodes, 263 on tree, 40960 best solution, best possible 30731.934 (452.06 seconds)
Cbc0010I After 4800 nodes, 262 on tree, 40960 best solution, best possible 30731.934 (460.67 seconds)
Cbc0010I After 4900 nodes, 266 on tree, 40960 best solution, best possible 30731.934 (469.34 seconds)
Cbc0010I After 5000 nodes, 265 on tree, 40960 best solution, best possible 30731.934 (479.01 seconds)
Cbc0010I After 5100 nodes, 265 on tree, 40960 best solution, best possible 31747 (489.18 seconds)
Cbc0010I After 5200 nodes, 264 on tree, 40960 best solution, best possible 31747 (499.26 seconds)
Cbc0010I After 5300 nodes, 264 on tree, 40960 best solution, best possible 31747 (510.13 seconds)
Cbc0010I After 5400 nodes, 264 on tree, 40960 best solution, best possible 31747 (521.35 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1108 rows 317 columns - 116 fixed gives 449, 110 - ok now
Cbc0010I After 5500 nodes, 264 on tree, 40960 best solution, best possible 31747 (531.42 seconds)
Cbc0010I After 5600 nodes, 264 on tree, 40960 best solution, best possible 31747 (541.67 seconds)
Cbc0010I After 5700 nodes, 264 on tree, 40960 best solution, best possible 31747 (550.61 seconds)
Cbc0010I After 5800 nodes, 264 on tree, 40960 best solution, best possible 31747 (558.92 seconds)
Cbc0010I After 5900 nodes, 265 on tree, 40960 best solution, best possible 31747 (567.36 seconds)
Cbc0010I After 6000 nodes, 266 on tree, 40960 best solution, best possible 31747 (575.50 seconds)
Cbc0010I After 6100 nodes, 268 on tree, 40960 best solution, best possible 31747 (584.94 seconds)
Cbc0010I After 6200 nodes, 268 on tree, 40960 best solution, best possible 31747 (594.32 seconds)
Cbc0010I After 6300 nodes, 268 on tree, 40960 best solution, best possible 31747 (605.74 seconds)
Cbc0010I After 6400 nodes, 268 on tree, 40960 best solution, best possible 31747 (616.57 seconds)
Cbc0010I After 6500 nodes, 268 on tree, 40960 best solution, best possible 31747 (627.55 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1230 rows 355 columns - 155 fixed gives 400, 91 - ok now
Cbc0010I After 6600 nodes, 269 on tree, 40960 best solution, best possible 31747 (637.80 seconds)
Cbc0010I After 6700 nodes, 268 on tree, 40960 best solution, best possible 31747 (647.51 seconds)
Cbc0010I After 6800 nodes, 268 on tree, 40960 best solution, best possible 31747 (656.96 seconds)
Cbc0010I After 6900 nodes, 276 on tree, 40960 best solution, best possible 31747 (666.29 seconds)
Cbc0010I After 7000 nodes, 276 on tree, 40960 best solution, best possible 31747 (675.33 seconds)
Cbc0010I After 7100 nodes, 278 on tree, 40960 best solution, best possible 31747 (683.66 seconds)
Cbc0038I Full problem 1577 rows 516 columns, reduced to 1103 rows 315 columns - 116 fixed gives 435, 107 - ok now
Cbc0010I After 7200 nodes, 279 on tree, 40960 best solution, best possible 31747 (691.65 seconds)
Cbc0010I After 7300 nodes, 280 on tree, 40960 best solution, best possible 31747 (701.43 seconds)
Cbc0010I After 7400 nodes, 283 on tree, 40960 best solution, best possible 31747 (709.17 seconds)
Cbc0010I After 7500 nodes, 293 on tree, 40960 best solution, best possible 31747 (713.01 seconds)
Cbc0004I Integer solution of 33792 found after 4350531 iterations and 7544 nodes (714.06 seconds)
Cbc0010I After 7600 nodes, 242 on tree, 33792 best solution, best possible 31758 (725.91 seconds)
Cbc0010I After 7700 nodes, 191 on tree, 33792 best solution, best possible 31758 (744.44 seconds)
Cbc0010I After 7800 nodes, 125 on tree, 33792 best solution, best possible 31758 (758.97 seconds)
Cbc0010I After 7900 nodes, 52 on tree, 33792 best solution, best possible 32195 (770.28 seconds)
Cbc0010I After 8000 nodes, 10 on tree, 33792 best solution, best possible 33643 (775.85 seconds)
Cbc0001I Search completed - best objective 33792, took 4769252 iterations and 8022 nodes (776.78 seconds)
Cbc0032I Strong branching done 22428 times (1415916 iterations), fathomed 2131 nodes and fixed 2430 variables
Cbc0035I Maximum depth 2952, 0 variables fixed on reduced cost
Cuts at root node changed objective from 25673.5 to 28672
Probing was tried 6828 times and created 71631 cuts of which 0 were active after adding rounds of cuts (7.697 seconds)
Gomory was tried 6764 times and created 38423 cuts of which 0 were active after adding rounds of cuts (14.254 seconds)
Knapsack was tried 10 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
FlowCover was tried 10 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
TwoMirCuts was tried 6764 times and created 30576 cuts of which 0 were active after adding rounds of cuts (6.028 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
ImplicationCuts was tried 50 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                33792.00000000
Enumerated nodes:               8022
Total iterations:               4769252
Time (CPU seconds):             776.82
Time (Wallclock seconds):       787.75

Total time (CPU seconds):       776.83   (Wallclock seconds):       787.77

