Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/triang8_0_reverse_tiers_input.lp sec 1800 solve solu solutions/new_no_tr/triang8_0_reverse_tiers_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 215.116 - 1.03 seconds
Cgl0002I 155 variables fixed
Cgl0003I 0 fixed, 21 tightened bounds, 966 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 17 tightened bounds, 638 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 20 tightened bounds, 442 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 5 tightened bounds, 226 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 9 tightened bounds, 168 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 6 tightened bounds, 127 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 8 tightened bounds, 116 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 4 tightened bounds, 70 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 27 strengthened rows, 0 substitutions
Cgl0004I processed model has 4764 rows, 1627 columns (1627 integer (1590 of which binary)) and 16019 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1627 objects (1627 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 780 integers unsatisfied sum - 236.115
Cbc0038I Pass   1: (2.77 seconds) suminf.  120.57979 (685) obj. 323.26 iterations 1935
Cbc0038I Pass   2: (2.98 seconds) suminf.   65.36317 (782) obj. 325.808 iterations 1025
Cbc0038I Pass   3: (3.05 seconds) suminf.   60.26169 (791) obj. 325.596 iterations 305
Cbc0038I Pass   4: (3.15 seconds) suminf.   58.13821 (806) obj. 325.159 iterations 413
Cbc0038I Pass   5: (3.33 seconds) suminf.   56.06266 (810) obj. 351.642 iterations 772
Cbc0038I Pass   6: (3.45 seconds) suminf.   53.84857 (818) obj. 353.16 iterations 469
Cbc0038I Pass   7: (3.51 seconds) suminf.   53.43400 (815) obj. 353.551 iterations 204
Cbc0038I Pass   8: (3.67 seconds) suminf.   58.34401 (800) obj. 345.304 iterations 705
Cbc0038I Pass   9: (3.75 seconds) suminf.   55.00049 (811) obj. 347.041 iterations 318
Cbc0038I Pass  10: (3.83 seconds) suminf.   56.32548 (836) obj. 356.839 iterations 272
Cbc0038I Pass  11: (3.86 seconds) suminf.   56.31196 (839) obj. 356.637 iterations 115
Cbc0038I Pass  12: (3.93 seconds) suminf.   55.56300 (816) obj. 358.904 iterations 260
Cbc0038I Pass  13: (3.94 seconds) suminf.   55.50852 (815) obj. 358.866 iterations 6
Cbc0038I Pass  14: (4.14 seconds) suminf.   56.09143 (834) obj. 375.26 iterations 890
Cbc0038I Pass  15: (4.27 seconds) suminf.   50.23522 (850) obj. 385.505 iterations 528
Cbc0038I Pass  16: (4.41 seconds) suminf.   46.39768 (841) obj. 392.407 iterations 546
Cbc0038I Pass  17: (4.49 seconds) suminf.   46.65512 (848) obj. 386.29 iterations 345
Cbc0038I Pass  18: (4.64 seconds) suminf.   50.25718 (851) obj. 395.897 iterations 658
Cbc0038I Pass  19: (4.76 seconds) suminf.   48.19729 (861) obj. 394.128 iterations 507
Cbc0038I Pass  20: (4.79 seconds) suminf.   48.08331 (855) obj. 393.672 iterations 75
Cbc0038I Pass  21: (4.93 seconds) suminf.   50.13204 (827) obj. 382.768 iterations 615
Cbc0038I Pass  22: (4.99 seconds) suminf.   47.40541 (849) obj. 381.41 iterations 286
Cbc0038I Pass  23: (5.03 seconds) suminf.   46.72260 (855) obj. 382.91 iterations 124
Cbc0038I Pass  24: (5.14 seconds) suminf.   49.63046 (839) obj. 383.243 iterations 564
Cbc0038I Pass  25: (5.25 seconds) suminf.   46.28714 (810) obj. 382.744 iterations 488
Cbc0038I Pass  26: (5.36 seconds) suminf.   50.84652 (823) obj. 395.474 iterations 488
Cbc0038I Pass  27: (5.49 seconds) suminf.   45.22488 (817) obj. 383.867 iterations 611
Cbc0038I Pass  28: (5.62 seconds) suminf.   47.69218 (845) obj. 384.813 iterations 522
Cbc0038I Pass  29: (5.71 seconds) suminf.   46.03904 (818) obj. 382.365 iterations 378
Cbc0038I Pass  30: (5.85 seconds) suminf.   52.39243 (835) obj. 385.362 iterations 574
Cbc0038I Pass  31: (5.93 seconds) suminf.   47.58555 (814) obj. 383.418 iterations 339
Cbc0038I Pass  32: (6.05 seconds) suminf.   47.42774 (851) obj. 381.397 iterations 484
Cbc0038I Pass  33: (6.14 seconds) suminf.   45.23606 (847) obj. 383.79 iterations 406
Cbc0038I Pass  34: (6.19 seconds) suminf.   44.79119 (831) obj. 385.983 iterations 176
Cbc0038I Pass  35: (6.28 seconds) suminf.   48.17198 (838) obj. 382.145 iterations 388
Cbc0038I Pass  36: (6.37 seconds) suminf.   44.58673 (824) obj. 382.545 iterations 421
Cbc0038I Pass  37: (6.48 seconds) suminf.   48.77545 (848) obj. 380.255 iterations 466
Cbc0038I Pass  38: (6.58 seconds) suminf.   45.04251 (850) obj. 382.35 iterations 416
Cbc0038I Pass  39: (6.63 seconds) suminf.   44.94519 (832) obj. 402.534 iterations 154
Cbc0038I Pass  40: (6.75 seconds) suminf.   46.45016 (844) obj. 401.15 iterations 499
Cbc0038I Pass  41: (6.85 seconds) suminf.   44.80193 (830) obj. 401.336 iterations 403
Cbc0038I Pass  42: (6.99 seconds) suminf.   46.13697 (861) obj. 399.361 iterations 593
Cbc0038I Pass  43: (7.07 seconds) suminf.   44.25793 (823) obj. 402.776 iterations 318
Cbc0038I Pass  44: (7.19 seconds) suminf.   47.77876 (843) obj. 400.703 iterations 493
Cbc0038I Pass  45: (7.30 seconds) suminf.   44.27505 (845) obj. 402.093 iterations 443
Cbc0038I Pass  46: (7.41 seconds) suminf.   45.83280 (853) obj. 403.933 iterations 491
Cbc0038I Pass  47: (7.51 seconds) suminf.   43.81177 (840) obj. 402.953 iterations 496
Cbc0038I Pass  48: (7.57 seconds) suminf.   43.08761 (851) obj. 403.015 iterations 218
Cbc0038I Pass  49: (7.68 seconds) suminf.   44.90529 (856) obj. 403.461 iterations 442
Cbc0038I Pass  50: (7.76 seconds) suminf.   43.32171 (861) obj. 403.069 iterations 330
Cbc0038I Pass  51: (7.86 seconds) suminf.   44.65939 (870) obj. 402.772 iterations 429
Cbc0038I Pass  52: (7.95 seconds) suminf.   43.67635 (852) obj. 396.77 iterations 372
Cbc0038I Pass  53: (8.05 seconds) suminf.   44.33307 (827) obj. 403.791 iterations 469
Cbc0038I Pass  54: (8.12 seconds) suminf.   44.09784 (844) obj. 402.563 iterations 217
Cbc0038I Pass  55: (8.29 seconds) suminf.   45.77167 (874) obj. 400.37 iterations 709
Cbc0038I Pass  56: (8.39 seconds) suminf.   44.40113 (836) obj. 402.063 iterations 375
Cbc0038I Pass  57: (8.53 seconds) suminf.   44.74421 (894) obj. 404.107 iterations 571
Cbc0038I Pass  58: (8.64 seconds) suminf.   44.54252 (860) obj. 403.573 iterations 461
Cbc0038I Pass  59: (8.80 seconds) suminf.   45.00118 (851) obj. 398.85 iterations 663
Cbc0038I Pass  60: (8.87 seconds) suminf.   44.15262 (809) obj. 397.714 iterations 325
Cbc0038I Pass  61: (8.99 seconds) suminf.   44.37910 (859) obj. 403.154 iterations 579
Cbc0038I Pass  62: (9.07 seconds) suminf.   43.32171 (861) obj. 403.069 iterations 307
Cbc0038I Pass  63: (9.20 seconds) suminf.   46.48950 (865) obj. 400.893 iterations 599
Cbc0038I Pass  64: (9.30 seconds) suminf.   44.46630 (836) obj. 402.186 iterations 451
Cbc0038I Pass  65: (9.44 seconds) suminf.   43.92419 (828) obj. 407.116 iterations 600
Cbc0038I Pass  66: (9.51 seconds) suminf.   43.48551 (829) obj. 407.102 iterations 245
Cbc0038I Pass  67: (9.65 seconds) suminf.   45.30028 (849) obj. 399.251 iterations 633
Cbc0038I Pass  68: (9.74 seconds) suminf.   43.94650 (837) obj. 396.861 iterations 346
Cbc0038I Pass  69: (9.84 seconds) suminf.   44.84997 (840) obj. 403.429 iterations 461
Cbc0038I Pass  70: (9.89 seconds) suminf.   43.66312 (862) obj. 403.179 iterations 304
Cbc0038I Pass  71: (10.03 seconds) suminf.   45.00542 (861) obj. 399.075 iterations 580
Cbc0038I Pass  72: (10.12 seconds) suminf.   43.55023 (818) obj. 398.012 iterations 388
Cbc0038I Pass  73: (10.25 seconds) suminf.   45.07627 (874) obj. 403.094 iterations 597
Cbc0038I Pass  74: (10.35 seconds) suminf.   43.32171 (861) obj. 403.069 iterations 466
Cbc0038I Pass  75: (10.47 seconds) suminf.   45.42323 (845) obj. 399.383 iterations 535
Cbc0038I Pass  76: (10.55 seconds) suminf.   43.67635 (852) obj. 396.77 iterations 425
Cbc0038I Pass  77: (10.71 seconds) suminf.   45.86850 (862) obj. 381.634 iterations 759
Cbc0038I Pass  78: (10.82 seconds) suminf.   43.76365 (858) obj. 383.024 iterations 428
Cbc0038I Pass  79: (10.87 seconds) suminf.   45.18489 (833) obj. 382.854 iterations 160
Cbc0038I Pass  80: (10.99 seconds) suminf.   45.37460 (891) obj. 384.092 iterations 485
Cbc0038I Pass  81: (11.11 seconds) suminf.   44.25383 (859) obj. 382.622 iterations 445
Cbc0038I Pass  82: (11.22 seconds) suminf.   47.91190 (855) obj. 381.804 iterations 481
Cbc0038I Pass  83: (11.30 seconds) suminf.   43.81913 (829) obj. 383.738 iterations 292
Cbc0038I Pass  84: (11.46 seconds) suminf.   45.91611 (862) obj. 379.974 iterations 681
Cbc0038I Pass  85: (11.57 seconds) suminf.   43.80038 (866) obj. 382.697 iterations 460
Cbc0038I Pass  86: (11.63 seconds) suminf.   44.34722 (855) obj. 382.75 iterations 189
Cbc0038I Pass  87: (11.76 seconds) suminf.   45.65650 (853) obj. 382.122 iterations 528
Cbc0038I Pass  88: (11.86 seconds) suminf.   43.95746 (858) obj. 383.157 iterations 376
Cbc0038I Pass  89: (12.01 seconds) suminf.   47.41486 (865) obj. 387.628 iterations 614
Cbc0038I Pass  90: (12.11 seconds) suminf.   44.14040 (855) obj. 382.699 iterations 419
Cbc0038I Pass  91: (12.18 seconds) suminf.   44.34722 (855) obj. 382.75 iterations 199
Cbc0038I Pass  92: (12.29 seconds) suminf.   45.55903 (857) obj. 382.406 iterations 474
Cbc0038I Pass  93: (12.37 seconds) suminf.   43.95746 (858) obj. 383.157 iterations 296
Cbc0038I Pass  94: (12.52 seconds) suminf.   46.26996 (849) obj. 383.29 iterations 667
Cbc0038I Pass  95: (12.63 seconds) suminf.   45.09003 (832) obj. 382.601 iterations 467
Cbc0038I Pass  96: (12.67 seconds) suminf.   44.36231 (818) obj. 381.491 iterations 126
Cbc0038I Pass  97: (12.79 seconds) suminf.   45.96323 (848) obj. 383.228 iterations 496
Cbc0038I Pass  98: (12.87 seconds) suminf.   43.76365 (858) obj. 383.024 iterations 291
Cbc0038I Pass  99: (12.92 seconds) suminf.   45.18489 (833) obj. 382.854 iterations 176
Cbc0038I Pass 100: (13.29 seconds) suminf.   83.14930 (874) obj. 535.872 iterations 1746
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 195 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 4220 rows 1412 columns - too large
Cbc0038I Mini branch and bound did not improve solution (13.32 seconds)
Cbc0038I After 13.32 seconds - Feasibility pump exiting - took 10.97 seconds
Cbc0031I 25 added rows had average density of 19.4
Cbc0013I At root node, 25 cuts changed objective from 215.32674 to 232 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 4.0 elements, 2 column cuts (2 active)  in 0.112 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 38 row cuts average 318.6 elements, 0 column cuts (0 active)  in 0.575 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 90 row cuts average 18.1 elements, 0 column cuts (0 active)  in 0.252 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 87 row cuts average 40.7 elements, 0 column cuts (0 active)  in 0.511 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 232 (19.37 seconds)
Cbc0010I After 100 nodes, 6 on tree, 1e+50 best solution, best possible 240 (117.04 seconds)
Cbc0010I After 200 nodes, 14 on tree, 1e+50 best solution, best possible 240 (167.39 seconds)
Cbc0010I After 300 nodes, 32 on tree, 1e+50 best solution, best possible 240 (225.55 seconds)
Cbc0010I After 400 nodes, 49 on tree, 1e+50 best solution, best possible 240 (289.11 seconds)
Cbc0010I After 500 nodes, 59 on tree, 1e+50 best solution, best possible 240 (338.96 seconds)
Cbc0010I After 600 nodes, 69 on tree, 1e+50 best solution, best possible 240 (390.40 seconds)
Cbc0010I After 700 nodes, 78 on tree, 1e+50 best solution, best possible 240 (444.18 seconds)
Cbc0010I After 800 nodes, 94 on tree, 1e+50 best solution, best possible 240 (493.95 seconds)
Cbc0010I After 900 nodes, 98 on tree, 1e+50 best solution, best possible 240 (541.56 seconds)
Cbc0010I After 1000 nodes, 114 on tree, 1e+50 best solution, best possible 240 (588.03 seconds)
Cbc0010I After 1100 nodes, 110 on tree, 1e+50 best solution, best possible 244 (645.22 seconds)
Cbc0010I After 1200 nodes, 104 on tree, 1e+50 best solution, best possible 244 (696.42 seconds)
Cbc0010I After 1300 nodes, 96 on tree, 1e+50 best solution, best possible 244 (748.01 seconds)
Cbc0010I After 1400 nodes, 88 on tree, 1e+50 best solution, best possible 244 (794.28 seconds)
Cbc0010I After 1500 nodes, 91 on tree, 1e+50 best solution, best possible 244 (849.52 seconds)
Cbc0010I After 1600 nodes, 92 on tree, 1e+50 best solution, best possible 244 (902.79 seconds)
Cbc0010I After 1700 nodes, 83 on tree, 1e+50 best solution, best possible 244 (954.44 seconds)
Cbc0010I After 1800 nodes, 83 on tree, 1e+50 best solution, best possible 244 (1017.01 seconds)
Cbc0010I After 1900 nodes, 83 on tree, 1e+50 best solution, best possible 244 (1066.50 seconds)
Cbc0010I After 2000 nodes, 82 on tree, 1e+50 best solution, best possible 244 (1122.61 seconds)
Cbc0010I After 2100 nodes, 88 on tree, 1e+50 best solution, best possible 244 (1169.76 seconds)
Cbc0010I After 2200 nodes, 78 on tree, 1e+50 best solution, best possible 244 (1214.03 seconds)
Cbc0010I After 2300 nodes, 64 on tree, 1e+50 best solution, best possible 244 (1260.87 seconds)
Cbc0010I After 2400 nodes, 55 on tree, 1e+50 best solution, best possible 244 (1301.94 seconds)
Cbc0010I After 2500 nodes, 50 on tree, 1e+50 best solution, best possible 244 (1340.64 seconds)
Cbc0010I After 2600 nodes, 46 on tree, 1e+50 best solution, best possible 244 (1370.95 seconds)
Cbc0010I After 2700 nodes, 44 on tree, 1e+50 best solution, best possible 244 (1405.85 seconds)
Cbc0010I After 2800 nodes, 40 on tree, 1e+50 best solution, best possible 244 (1445.24 seconds)
Cbc0010I After 2900 nodes, 33 on tree, 1e+50 best solution, best possible 244 (1470.25 seconds)
Cbc0010I After 3000 nodes, 47 on tree, 1e+50 best solution, best possible 244 (1494.49 seconds)
Cbc0010I After 3100 nodes, 31 on tree, 1e+50 best solution, best possible 244 (1524.70 seconds)
Cbc0010I After 3200 nodes, 31 on tree, 1e+50 best solution, best possible 244 (1555.01 seconds)
Cbc0010I After 3300 nodes, 45 on tree, 1e+50 best solution, best possible 244 (1590.42 seconds)
Cbc0010I After 3400 nodes, 31 on tree, 1e+50 best solution, best possible 244 (1619.01 seconds)
Cbc0010I After 3500 nodes, 35 on tree, 1e+50 best solution, best possible 244 (1644.80 seconds)
Cbc0010I After 3600 nodes, 46 on tree, 1e+50 best solution, best possible 244 (1673.34 seconds)
Cbc0010I After 3700 nodes, 48 on tree, 1e+50 best solution, best possible 244 (1704.08 seconds)
Cbc0010I After 3800 nodes, 35 on tree, 1e+50 best solution, best possible 244 (1746.40 seconds)
Cbc0010I After 3900 nodes, 35 on tree, 1e+50 best solution, best possible 244 (1781.74 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 244), took 3625138 iterations and 3959 nodes (1799.70 seconds)
Cbc0032I Strong branching done 30244 times (2409489 iterations), fathomed 490 nodes and fixed 2992 variables
Cbc0035I Maximum depth 77, 0 variables fixed on reduced cost
Cuts at root node changed objective from 215.327 to 232
Probing was tried 10 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.112 seconds)
Gomory was tried 579 times and created 537 cuts of which 0 were active after adding rounds of cuts (4.788 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.031 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.020 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
TwoMirCuts was tried 579 times and created 14164 cuts of which 0 were active after adding rounds of cuts (1.681 seconds)
ZeroHalf was tried 579 times and created 1507 cuts of which 0 were active after adding rounds of cuts (22.457 seconds)

Result - Stopped on time limit

No feasible solution found
Lower bound:                    244.000
Enumerated nodes:               3959
Total iterations:               3625138
Time (CPU seconds):             1799.70
Time (Wallclock seconds):       1806.78

Total time (CPU seconds):       1799.71   (Wallclock seconds):       1806.80

