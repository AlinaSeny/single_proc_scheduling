Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/jump_2_20_up_right_input.lp sec 1800 solve solu solutions/new_no_tr/jump_2_20_up_right_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 29167.5 - 0.03 seconds
Cgl0002I 58 variables fixed
Cgl0003I 0 fixed, 10 tightened bounds, 246 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 7 tightened bounds, 116 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0004I processed model has 1132 rows, 387 columns (387 integer (366 of which binary)) and 3745 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 387 objects (387 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 217 integers unsatisfied sum - 74.4789
Cbc0038I Pass   1: suminf.   36.32596 (179) obj. 43509.3 iterations 468
Cbc0038I Pass   2: suminf.   27.67592 (168) obj. 44891.9 iterations 174
Cbc0038I Pass   3: suminf.   25.44698 (146) obj. 46326.2 iterations 45
Cbc0038I Pass   4: suminf.   24.52461 (138) obj. 45847 iterations 82
Cbc0038I Pass   5: suminf.   23.37517 (138) obj. 45623.3 iterations 32
Cbc0038I Pass   6: suminf.   20.82029 (107) obj. 48310.8 iterations 100
Cbc0038I Pass   7: suminf.   18.24130 (113) obj. 48903.8 iterations 60
Cbc0038I Pass   8: suminf.   12.17215 (76) obj. 43427 iterations 168
Cbc0038I Pass   9: suminf.   10.61526 (78) obj. 42489.2 iterations 67
Cbc0038I Pass  10: suminf.    9.84240 (76) obj. 43196.3 iterations 49
Cbc0038I Pass  11: suminf.    1.40740 (27) obj. 41984 iterations 144
Cbc0038I Pass  12: suminf.    1.40740 (27) obj. 41984 iterations 9
Cbc0038I Pass  13: suminf.    0.00000 (0) obj. 41984 iterations 33
Cbc0038I Solution found of 41984
Cbc0038I Cleaned solution of 41984
Cbc0038I Before mini branch and bound, 81 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1132 rows 387 columns, reduced to 963 rows 306 columns - 30 fixed gives 703, 221 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.25 seconds)
Cbc0038I Round again with cutoff of 40747.9
Cbc0038I Pass  14: suminf.   35.34682 (193) obj. 40747 iterations 46
Cbc0038I Pass  15: suminf.   27.87820 (158) obj. 40747.9 iterations 186
Cbc0038I Pass  16: suminf.   22.92699 (148) obj. 40747.9 iterations 126
Cbc0038I Pass  17: suminf.   17.24964 (107) obj. 40747.9 iterations 169
Cbc0038I Pass  18: suminf.   16.64684 (100) obj. 40747.9 iterations 45
Cbc0038I Pass  19: suminf.   13.83602 (88) obj. 40747.9 iterations 160
Cbc0038I Pass  20: suminf.   14.05776 (92) obj. 40747.9 iterations 22
Cbc0038I Pass  21: suminf.   10.75618 (76) obj. 40747.9 iterations 160
Cbc0038I Pass  22: suminf.    9.58028 (74) obj. 40747.9 iterations 48
Cbc0038I Pass  23: suminf.    5.79656 (57) obj. 40747.9 iterations 60
Cbc0038I Pass  24: suminf.    5.74069 (59) obj. 40747.9 iterations 13
Cbc0038I Pass  25: suminf.    5.15438 (35) obj. 40747.9 iterations 396
Cbc0038I Pass  26: suminf.    1.82012 (15) obj. 40747.9 iterations 142
Cbc0038I Pass  27: suminf.    1.52921 (16) obj. 40747.9 iterations 282
Cbc0038I Pass  28: suminf.    0.67415 (23) obj. 40747.9 iterations 40
Cbc0038I Pass  29: suminf.    2.93668 (21) obj. 40747.9 iterations 84
Cbc0038I Pass  30: suminf.    0.09991 (1) obj. 40747.9 iterations 42
Cbc0038I Solution found of 40747.9
Cbc0038I Branch and bound needed to clear up 1 general integers
Cbc0038I Full problem 1133 rows 387 columns, reduced to 0 rows 0 columns
Cbc0038I Cleaned solution of 39936
Cbc0038I Before mini branch and bound, 87 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1132 rows 387 columns, reduced to 952 rows 300 columns - 69 fixed gives 566, 165 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 126 rows 44 columns
Cbc0038I Mini branch and bound did not improve solution (0.44 seconds)
Cbc0038I Round again with cutoff of 37874.4
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.   36.99521 (211) obj. 37874.4 iterations 63
Cbc0038I Pass  32: suminf.   28.67637 (152) obj. 37874.4 iterations 217
Cbc0038I Pass  33: suminf.   22.77965 (137) obj. 37874.4 iterations 162
Cbc0038I Pass  34: suminf.   18.81188 (109) obj. 37874.4 iterations 162
Cbc0038I Pass  35: suminf.   18.09253 (109) obj. 37874.4 iterations 63
Cbc0038I Pass  36: suminf.    9.91565 (71) obj. 37874.4 iterations 345
Cbc0038I Pass  37: suminf.   10.02811 (70) obj. 37874.4 iterations 16
Cbc0038I Pass  38: suminf.    9.47839 (59) obj. 37874.4 iterations 235
Cbc0038I Pass  39: suminf.    9.48482 (65) obj. 37874.4 iterations 40
Cbc0038I Pass  40: suminf.    8.89081 (82) obj. 37874.4 iterations 188
Cbc0038I Pass  41: suminf.    5.80382 (57) obj. 37874.4 iterations 86
Cbc0038I Pass  42: suminf.    5.55357 (65) obj. 37874.4 iterations 76
Cbc0038I Pass  43: suminf.    4.54246 (38) obj. 37874.4 iterations 427
Cbc0038I Pass  44: suminf.    4.54246 (38) obj. 37874.4 iterations 0
Cbc0038I Pass  45: suminf.    3.77389 (35) obj. 37874.4 iterations 220
Cbc0038I Pass  46: suminf.    3.77389 (35) obj. 37874.4 iterations 2
Cbc0038I Pass  47: suminf.    6.44485 (42) obj. 37874.4 iterations 414
Cbc0038I Pass  48: suminf.    5.79997 (39) obj. 37874.4 iterations 71
Cbc0038I Pass  49: suminf.    3.14352 (46) obj. 37874.4 iterations 107
Cbc0038I Pass  50: suminf.    2.17755 (47) obj. 37874.4 iterations 152
Cbc0038I Pass  51: suminf.    2.82136 (28) obj. 37874.4 iterations 102
Cbc0038I Pass  52: suminf.    5.82475 (30) obj. 37874.4 iterations 150
Cbc0038I Pass  53: suminf.    5.82475 (30) obj. 37874.4 iterations 1
Cbc0038I Pass  54: suminf.    2.17780 (28) obj. 37874.4 iterations 186
Cbc0038I Pass  55: suminf.    1.96346 (27) obj. 37874.4 iterations 41
Cbc0038I Pass  56: suminf.    6.84295 (42) obj. 37874.4 iterations 94
Cbc0038I Pass  57: suminf.    5.81003 (41) obj. 37874.4 iterations 31
Cbc0038I Pass  58: suminf.    5.39031 (28) obj. 37874.4 iterations 209
Cbc0038I Pass  59: suminf.    1.64857 (21) obj. 37874.4 iterations 56
Cbc0038I Pass  60: suminf.    1.65778 (32) obj. 37874.4 iterations 67
Cbc0038I Pass  61: suminf.    3.34703 (25) obj. 37874.4 iterations 111
Cbc0038I Pass  62: suminf.    3.34180 (22) obj. 37874.4 iterations 28
Cbc0038I Pass  63: suminf.    5.17172 (26) obj. 37874.4 iterations 62
Cbc0038I Pass  64: suminf.    4.80824 (29) obj. 37874.4 iterations 23
Cbc0038I Pass  65: suminf.    2.44342 (24) obj. 37874.4 iterations 125
Cbc0038I Pass  66: suminf.    0.41807 (17) obj. 37874.4 iterations 115
Cbc0038I Pass  67: suminf.    4.40456 (19) obj. 37874.4 iterations 62
Cbc0038I Pass  68: suminf.    4.44390 (15) obj. 37874.4 iterations 131
Cbc0038I Pass  69: suminf.    3.07985 (24) obj. 37874.4 iterations 109
Cbc0038I Pass  70: suminf.    5.36312 (31) obj. 37874.4 iterations 159
Cbc0038I Pass  71: suminf.    4.98993 (31) obj. 37874.4 iterations 53
Cbc0038I Pass  72: suminf.    0.44930 (28) obj. 37874.4 iterations 167
Cbc0038I Pass  73: suminf.    0.41782 (19) obj. 37874.4 iterations 104
Cbc0038I Pass  74: suminf.    5.90214 (20) obj. 37874.4 iterations 88
Cbc0038I Pass  75: suminf.    1.82045 (24) obj. 37874.4 iterations 123
Cbc0038I Pass  76: suminf.    1.81375 (29) obj. 37874.4 iterations 69
Cbc0038I Pass  77: suminf.    5.00201 (34) obj. 37874.4 iterations 188
Cbc0038I Pass  78: suminf.    4.96063 (48) obj. 37874.4 iterations 52
Cbc0038I Pass  79: suminf.    6.69280 (33) obj. 37874.4 iterations 94
Cbc0038I Pass  80: suminf.    1.29070 (30) obj. 37874.4 iterations 145
Cbc0038I Pass  81: suminf.    6.87189 (38) obj. 37874.4 iterations 129
Cbc0038I Pass  82: suminf.    6.97537 (60) obj. 37874.4 iterations 56
Cbc0038I Pass  83: suminf.    0.42370 (23) obj. 37874.4 iterations 145
Cbc0038I Pass  84: suminf.    0.42370 (23) obj. 37874.4 iterations 15
Cbc0038I Pass  85: suminf.    3.57395 (20) obj. 37874.4 iterations 95
Cbc0038I Pass  86: suminf.    5.03815 (20) obj. 37874.4 iterations 74
Cbc0038I Pass  87: suminf.    1.98080 (23) obj. 37874.4 iterations 44
Cbc0038I Pass  88: suminf.    6.14553 (20) obj. 37874.4 iterations 102
Cbc0038I Pass  89: suminf.    2.29151 (21) obj. 37874.4 iterations 94
Cbc0038I Pass  90: suminf.    2.29985 (26) obj. 37874.4 iterations 56
Cbc0038I Pass  91: suminf.    5.08185 (29) obj. 37874.4 iterations 101
Cbc0038I Pass  92: suminf.    4.97375 (25) obj. 37874.4 iterations 36
Cbc0038I Pass  93: suminf.    4.45822 (23) obj. 37874.4 iterations 112
Cbc0038I Pass  94: suminf.    3.02471 (23) obj. 37874.4 iterations 69
Cbc0038I Pass  95: suminf.    2.82049 (24) obj. 37874.4 iterations 23
Cbc0038I Pass  96: suminf.    3.11086 (32) obj. 37874.4 iterations 56
Cbc0038I Pass  97: suminf.    2.29818 (79) obj. 37874.4 iterations 88
Cbc0038I Pass  98: suminf.   10.23841 (56) obj. 37874.4 iterations 275
Cbc0038I Pass  99: suminf.    5.48263 (47) obj. 37874.4 iterations 62
Cbc0038I Pass 100: suminf.    5.42817 (45) obj. 37874.4 iterations 42
Cbc0038I Pass 101: suminf.    2.47507 (30) obj. 37874.4 iterations 85
Cbc0038I Pass 102: suminf.    1.85415 (32) obj. 37874.4 iterations 20
Cbc0038I Pass 103: suminf.    6.12362 (34) obj. 37874.4 iterations 127
Cbc0038I Pass 104: suminf.    6.23071 (40) obj. 37874.4 iterations 16
Cbc0038I Pass 105: suminf.    3.42811 (27) obj. 37874.4 iterations 128
Cbc0038I Pass 106: suminf.    0.42356 (27) obj. 37874.4 iterations 92
Cbc0038I Pass 107: suminf.    5.40832 (19) obj. 37874.4 iterations 61
Cbc0038I Pass 108: suminf.    0.42155 (21) obj. 37874.4 iterations 40
Cbc0038I Pass 109: suminf.   23.27826 (107) obj. 37874.4 iterations 277
Cbc0038I Pass 110: suminf.   18.11416 (94) obj. 37874.4 iterations 191
Cbc0038I Pass 111: suminf.   16.92699 (93) obj. 37874.4 iterations 49
Cbc0038I Pass 112: suminf.   14.38572 (98) obj. 37874.4 iterations 55
Cbc0038I Pass 113: suminf.   12.73904 (93) obj. 37874.4 iterations 62
Cbc0038I Pass 114: suminf.   11.52883 (74) obj. 37874.4 iterations 96
Cbc0038I Pass 115: suminf.   10.86024 (76) obj. 37874.4 iterations 203
Cbc0038I Pass 116: suminf.    9.09922 (76) obj. 37874.4 iterations 56
Cbc0038I Pass 117: suminf.    7.90780 (73) obj. 37874.4 iterations 49
Cbc0038I Pass 118: suminf.    2.61194 (44) obj. 37874.4 iterations 203
Cbc0038I Pass 119: suminf.    1.19435 (23) obj. 37874.4 iterations 59
Cbc0038I Pass 120: suminf.    5.94742 (20) obj. 37874.4 iterations 120
Cbc0038I Pass 121: suminf.    2.41296 (19) obj. 37874.4 iterations 59
Cbc0038I Pass 122: suminf.    6.60805 (17) obj. 37874.4 iterations 148
Cbc0038I Pass 123: suminf.    1.82078 (23) obj. 37874.4 iterations 103
Cbc0038I Pass 124: suminf.    1.82078 (23) obj. 37874.4 iterations 8
Cbc0038I Pass 125: suminf.    5.70112 (25) obj. 37874.4 iterations 147
Cbc0038I Pass 126: suminf.    2.38764 (24) obj. 37874.4 iterations 109
Cbc0038I Pass 127: suminf.    1.61037 (24) obj. 37874.4 iterations 48
Cbc0038I Pass 128: suminf.    2.99317 (24) obj. 37874.4 iterations 80
Cbc0038I Pass 129: suminf.    2.93934 (22) obj. 37874.4 iterations 43
Cbc0038I Pass 130: suminf.   23.86407 (133) obj. 37874.4 iterations 320
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1132 rows 387 columns, reduced to 1050 rows 348 columns - 69 fixed gives 623, 191 - still too large
Cbc0038I Mini branch and bound did not improve solution (1.12 seconds)
Cbc0038I After 1.12 seconds - Feasibility pump exiting with objective of 39936 - took 1.03 seconds
Cbc0012I Integer solution of 39936 found by feasibility pump after 0 iterations and 0 nodes (1.12 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 823 rows 237 columns - 68 fixed gives 493, 136 - ok now
Cbc0031I 39 added rows had average density of 56.846154
Cbc0013I At root node, 39 cuts changed objective from 29632 to 33792 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 63 row cuts average 3.1 elements, 3 column cuts (3 active)  in 0.273 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 2310 row cuts average 346.5 elements, 0 column cuts (0 active)  in 0.938 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.065 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.060 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 358 row cuts average 160.1 elements, 0 column cuts (0 active)  in 0.326 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 24 row cuts average 7.0 elements, 0 column cuts (0 active)  in 0.490 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 39936 best solution, best possible 33792 (9.53 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 746 rows 225 columns - 60 fixed gives 465, 127 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 696 rows 211 columns - 61 fixed gives 382, 100 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 738 rows 221 columns - 65 fixed gives 433, 115 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 749 rows 226 columns - 60 fixed gives 465, 127 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 701 rows 211 columns - 61 fixed gives 380, 100 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 747 rows 225 columns - 60 fixed gives 463, 126 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 737 rows 221 columns - 60 fixed gives 451, 122 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 735 rows 220 columns - 60 fixed gives 440, 119 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 735 rows 220 columns - 60 fixed gives 451, 122 - ok now
Cbc0010I After 1000 nodes, 3 on tree, 39936 best solution, best possible 33824 (82.28 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 745 rows 224 columns - 61 fixed gives 459, 124 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 770 rows 232 columns - 59 fixed gives 484, 134 - ok now
Cbc0010I After 2000 nodes, 3 on tree, 39936 best solution, best possible 33824 (145.60 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 775 rows 231 columns - 60 fixed gives 496, 137 - ok now
Cbc0038I Full problem 1132 rows 387 columns, reduced to 722 rows 217 columns - 54 fixed gives 465, 127 - ok now
Cbc0010I After 3000 nodes, 3 on tree, 39936 best solution, best possible 33824 (208.49 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 738 rows 221 columns - 56 fixed gives 475, 130 - ok now
Cbc0010I After 4000 nodes, 3 on tree, 39936 best solution, best possible 33824 (264.14 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 716 rows 214 columns - 52 fixed gives 475, 130 - ok now
Cbc0010I After 5000 nodes, 3 on tree, 39936 best solution, best possible 33824 (311.75 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 596 rows 177 columns - 52 fixed gives 337, 80 - ok now
Cbc0010I After 6000 nodes, 3 on tree, 39936 best solution, best possible 33824 (360.81 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 706 rows 210 columns - 51 fixed gives 454, 122 - ok now
Cbc0010I After 7000 nodes, 2 on tree, 39936 best solution, best possible 33824 (414.18 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 735 rows 217 columns - 54 fixed gives 463, 126 - ok now
Cbc0010I After 8000 nodes, 3 on tree, 39936 best solution, best possible 33824 (465.21 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 205 rows 67 columns
Cbc0010I After 9000 nodes, 4 on tree, 39936 best solution, best possible 33824 (509.97 seconds)
Cbc0010I After 10000 nodes, 2 on tree, 39936 best solution, best possible 36635 (550.73 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 749 rows 218 columns - 60 fixed gives 475, 130 - ok now
Cbc0010I After 11000 nodes, 1 on tree, 39936 best solution, best possible 36793 (589.60 seconds)
Cbc0010I After 12000 nodes, 1 on tree, 39936 best solution, best possible 36956 (629.52 seconds)
Cbc0010I After 13000 nodes, 1 on tree, 39936 best solution, best possible 37131 (673.07 seconds)
Cbc0010I After 14000 nodes, 3 on tree, 39936 best solution, best possible 37306 (718.85 seconds)
Cbc0038I Full problem 1132 rows 387 columns, reduced to 745 rows 216 columns - 60 fixed gives 475, 129 - ok now
Cbc0010I After 15000 nodes, 2 on tree, 39936 best solution, best possible 37476 (763.78 seconds)
Cbc0010I After 16000 nodes, 3 on tree, 39936 best solution, best possible 37656 (807.85 seconds)
Cbc0010I After 17000 nodes, 1 on tree, 39936 best solution, best possible 37840 (853.00 seconds)
Cbc0016I Integer solution of 37888 found by strong branching after 7364874 iterations and 17292 nodes (865.29 seconds)
Cbc0001I Search completed - best objective 37888, took 7364874 iterations and 17292 nodes (865.32 seconds)
Cbc0032I Strong branching done 77858 times (2852470 iterations), fathomed 3621 nodes and fixed 15997 variables
Cbc0035I Maximum depth 4101, 3 variables fixed on reduced cost
Cuts at root node changed objective from 29632 to 33792
Probing was tried 100 times and created 66 cuts of which 0 were active after adding rounds of cuts (0.273 seconds)
Gomory was tried 13157 times and created 17758 cuts of which 0 were active after adding rounds of cuts (14.660 seconds)
Knapsack was tried 100 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.048 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.028 seconds)
MixedIntegerRounding2 was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.065 seconds)
FlowCover was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.060 seconds)
TwoMirCuts was tried 13157 times and created 104341 cuts of which 0 were active after adding rounds of cuts (7.192 seconds)
ZeroHalf was tried 100 times and created 24 cuts of which 0 were active after adding rounds of cuts (0.490 seconds)
ImplicationCuts was tried 88 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)

Result - Optimal solution found

Objective value:                37888.00000000
Enumerated nodes:               17292
Total iterations:               7364874
Time (CPU seconds):             865.38
Time (Wallclock seconds):       871.74

Total time (CPU seconds):       865.39   (Wallclock seconds):       871.75

