Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/default35_reverse_tiers_input.lp sec 1800 solve solu solutions/new_no_tr/default35_reverse_tiers_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 28672 - 0.33 seconds
Cgl0002I 118 variables fixed
Cgl0003I 0 fixed, 23 tightened bounds, 947 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 16 tightened bounds, 395 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 8 tightened bounds, 228 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 24 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0004I processed model has 4131 rows, 1401 columns (1401 integer (1365 of which binary)) and 13855 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1401 objects (1401 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 744 integers unsatisfied sum - 243.583
Cbc0038I Pass   1: (0.83 seconds) suminf.    3.81148 (24) obj. 35857.4 iterations 1508
Cbc0038I Pass   2: (0.85 seconds) suminf.    0.00000 (0) obj. 35840 iterations 149
Cbc0038I Solution found of 35840
Cbc0038I Cleaned solution of 35840
Cbc0038I Before mini branch and bound, 650 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2813 rows 751 columns - 83 fixed gives 1739, 456 - ok now
Cbc0038I Mini branch and bound did not improve solution (1.33 seconds)
Cbc0038I Round again with cutoff of 35122.3
Cbc0038I Pass   3: (1.34 seconds) suminf.    5.98708 (40) obj. 35122 iterations 20
Cbc0038I Pass   4: (1.45 seconds) suminf.    2.53701 (27) obj. 35122.3 iterations 1000
Cbc0038I Pass   5: (1.51 seconds) suminf.    1.11222 (10) obj. 35122.3 iterations 541
Cbc0038I Pass   6: (1.52 seconds) suminf.    1.11222 (10) obj. 35122.3 iterations 2
Cbc0038I Pass   7: (1.53 seconds) suminf.    0.68947 (6) obj. 35122.3 iterations 87
Cbc0038I Pass   8: (1.57 seconds) suminf.    0.80072 (6) obj. 35122.3 iterations 448
Cbc0038I Pass   9: (1.69 seconds) suminf.   44.88992 (247) obj. 35122.3 iterations 1238
Cbc0038I Pass  10: (1.79 seconds) suminf.   23.08322 (149) obj. 35122.3 iterations 849
Cbc0038I Pass  11: (1.81 seconds) suminf.   23.06110 (140) obj. 35122.3 iterations 92
Cbc0038I Pass  12: (1.86 seconds) suminf.    9.77762 (111) obj. 35122.3 iterations 363
Cbc0038I Pass  13: (1.88 seconds) suminf.    8.94230 (94) obj. 35122.3 iterations 153
Cbc0038I Pass  14: (1.95 seconds) suminf.    2.18489 (47) obj. 35122.3 iterations 556
Cbc0038I Pass  15: (2.04 seconds) suminf.    1.43515 (20) obj. 35122.3 iterations 682
Cbc0038I Pass  16: (2.13 seconds) suminf.    0.53064 (8) obj. 35122.3 iterations 628
Cbc0038I Pass  17: (2.14 seconds) suminf.    0.53064 (8) obj. 35122.3 iterations 23
Cbc0038I Pass  18: (2.15 seconds) suminf.    0.50009 (6) obj. 35122.3 iterations 28
Cbc0038I Pass  19: (2.39 seconds) suminf.   70.90588 (376) obj. 35122.3 iterations 2046
Cbc0038I Pass  20: (2.57 seconds) suminf.   35.16842 (212) obj. 35122.3 iterations 1369
Cbc0038I Pass  21: (2.60 seconds) suminf.   30.65040 (209) obj. 35122.3 iterations 157
Cbc0038I Pass  22: (2.60 seconds) suminf.   30.59242 (208) obj. 35122.3 iterations 18
Cbc0038I Pass  23: (2.68 seconds) suminf.   14.06667 (129) obj. 35122.3 iterations 680
Cbc0038I Pass  24: (2.74 seconds) suminf.    5.97314 (97) obj. 35122.3 iterations 399
Cbc0038I Pass  25: (2.76 seconds) suminf.    5.41911 (90) obj. 35122.3 iterations 156
Cbc0038I Pass  26: (2.79 seconds) suminf.    3.48518 (105) obj. 35122.3 iterations 274
Cbc0038I Pass  27: (2.80 seconds) suminf.    2.89610 (105) obj. 35122.3 iterations 56
Cbc0038I Pass  28: (2.81 seconds) suminf.    2.24996 (87) obj. 35122.3 iterations 65
Cbc0038I Pass  29: (2.82 seconds) suminf.    2.17249 (82) obj. 35122.3 iterations 68
Cbc0038I Pass  30: (2.89 seconds) suminf.    4.96611 (116) obj. 35122.3 iterations 519
Cbc0038I Pass  31: (2.90 seconds) suminf.    4.86580 (124) obj. 35122.3 iterations 74
Cbc0038I Pass  32: (3.10 seconds) suminf.    1.80477 (69) obj. 35122.3 iterations 1826
Cbc0038I Pass  33: (3.11 seconds) suminf.    1.80477 (69) obj. 35122.3 iterations 15
Cbc0038I Pass  34: (3.26 seconds) suminf.    7.59725 (100) obj. 35122.3 iterations 1024
Cbc0038I Pass  35: (3.27 seconds) suminf.    7.59725 (100) obj. 35122.3 iterations 24
Cbc0038I Pass  36: (3.46 seconds) suminf.    6.02891 (36) obj. 35122.3 iterations 1599
Cbc0038I Pass  37: (3.47 seconds) suminf.    6.03177 (35) obj. 35122.3 iterations 24
Cbc0038I Pass  38: (3.53 seconds) suminf.    3.94908 (39) obj. 35122.3 iterations 459
Cbc0038I Pass  39: (3.54 seconds) suminf.    3.94908 (39) obj. 35122.3 iterations 54
Cbc0038I Pass  40: (3.75 seconds) suminf.    8.42659 (72) obj. 35122.3 iterations 1590
Cbc0038I Pass  41: (3.82 seconds) suminf.    6.25190 (42) obj. 35122.3 iterations 495
Cbc0038I Pass  42: (3.84 seconds) suminf.    4.93256 (25) obj. 35122.3 iterations 129
Cbc0038I Pass  43: (3.85 seconds) suminf.    3.16382 (23) obj. 35122.3 iterations 21
Cbc0038I Pass  44: (3.86 seconds) suminf.    1.38275 (19) obj. 35122.3 iterations 115
Cbc0038I Pass  45: (3.87 seconds) suminf.    1.31493 (23) obj. 35122.3 iterations 71
Cbc0038I Rounding solution of 35122 is better than previous of 35840

Cbc0038I After 3.87 seconds - Feasibility pump exiting with objective of 35122 - took 3.25 seconds
Cbc0012I Integer solution of 35122 found by feasibility pump after 0 iterations and 0 nodes (3.87 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2817 rows 752 columns - 238 fixed gives 1453, 356 - ok now
Cbc0031I 58 added rows had average density of 13.931034
Cbc0013I At root node, 58 cuts changed objective from 28672 to 28672 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 26 row cuts average 3.6 elements, 4 column cuts (4 active)  in 0.117 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 19 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.407 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 100 row cuts average 16.4 elements, 0 column cuts (0 active)  in 0.187 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 35122 best solution, best possible 28672 (10.09 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2724 rows 729 columns - 226 fixed gives 1405, 331 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2915 rows 816 columns - 234 fixed gives 1553, 397 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 11 rows 5 columns
Cbc0010I After 100 nodes, 4 on tree, 35122 best solution, best possible 28682 (118.86 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2738 rows 727 columns - 225 fixed gives 1420, 340 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 200 nodes, 9 on tree, 35122 best solution, best possible 28684 (162.90 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2740 rows 727 columns - 226 fixed gives 1418, 339 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 300 nodes, 19 on tree, 35122 best solution, best possible 28684 (204.13 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2744 rows 729 columns - 227 fixed gives 1418, 339 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 400 nodes, 23 on tree, 35122 best solution, best possible 28684 (254.51 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2743 rows 728 columns - 227 fixed gives 1412, 337 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 500 nodes, 29 on tree, 35122 best solution, best possible 28684 (302.18 seconds)
Cbc0010I After 600 nodes, 37 on tree, 35122 best solution, best possible 28684 (349.89 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2586 rows 682 columns - 223 fixed gives 1308, 301 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 700 nodes, 43 on tree, 35122 best solution, best possible 28684 (393.70 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2741 rows 727 columns - 227 fixed gives 1412, 337 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 800 nodes, 48 on tree, 35122 best solution, best possible 28684 (440.48 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2617 rows 713 columns - 212 fixed gives 1371, 326 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 900 nodes, 59 on tree, 35122 best solution, best possible 28684 (489.95 seconds)
Cbc0010I After 1000 nodes, 61 on tree, 35122 best solution, best possible 28684 (538.16 seconds)
Cbc0010I After 1100 nodes, 59 on tree, 35122 best solution, best possible 28688 (577.01 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2636 rows 700 columns - 227 fixed gives 1382, 327 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 11 rows 5 columns
Cbc0010I After 1200 nodes, 60 on tree, 35122 best solution, best possible 28688 (613.52 seconds)
Cbc0010I After 1300 nodes, 66 on tree, 35122 best solution, best possible 28688 (659.41 seconds)
Cbc0010I After 1400 nodes, 64 on tree, 35122 best solution, best possible 28688 (706.78 seconds)
Cbc0010I After 1500 nodes, 60 on tree, 35122 best solution, best possible 28688 (749.64 seconds)
Cbc0010I After 1600 nodes, 59 on tree, 35122 best solution, best possible 28688 (803.69 seconds)
Cbc0010I After 1700 nodes, 59 on tree, 35122 best solution, best possible 28688 (844.84 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2663 rows 742 columns - 211 fixed gives 1422, 349 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 1800 nodes, 72 on tree, 35122 best solution, best possible 28688 (887.60 seconds)
Cbc0010I After 1900 nodes, 63 on tree, 35122 best solution, best possible 28688 (935.15 seconds)
Cbc0010I After 2000 nodes, 63 on tree, 35122 best solution, best possible 28688 (981.98 seconds)
Cbc0010I After 2100 nodes, 64 on tree, 35122 best solution, best possible 28688 (1026.46 seconds)
Cbc0010I After 2200 nodes, 63 on tree, 35122 best solution, best possible 28688 (1067.60 seconds)
Cbc0010I After 2300 nodes, 67 on tree, 35122 best solution, best possible 28688 (1129.27 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2568 rows 680 columns - 225 fixed gives 1321, 302 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 11 rows 5 columns
Cbc0010I After 2400 nodes, 60 on tree, 35122 best solution, best possible 28688 (1184.99 seconds)
Cbc0010I After 2500 nodes, 59 on tree, 35122 best solution, best possible 28688 (1235.06 seconds)
Cbc0010I After 2600 nodes, 59 on tree, 35122 best solution, best possible 28688 (1284.53 seconds)
Cbc0010I After 2700 nodes, 61 on tree, 35122 best solution, best possible 28688 (1328.35 seconds)
Cbc0010I After 2800 nodes, 60 on tree, 35122 best solution, best possible 28688 (1374.35 seconds)
Cbc0010I After 2900 nodes, 59 on tree, 35122 best solution, best possible 28688 (1422.79 seconds)
Cbc0010I After 3000 nodes, 59 on tree, 35122 best solution, best possible 28688 (1459.11 seconds)
Cbc0010I After 3100 nodes, 59 on tree, 35122 best solution, best possible 28688 (1500.37 seconds)
Cbc0010I After 3200 nodes, 59 on tree, 35122 best solution, best possible 28688 (1542.64 seconds)
Cbc0010I After 3300 nodes, 59 on tree, 35122 best solution, best possible 28688 (1585.08 seconds)
Cbc0010I After 3400 nodes, 59 on tree, 35122 best solution, best possible 28688 (1631.90 seconds)
Cbc0010I After 3500 nodes, 60 on tree, 35122 best solution, best possible 28688 (1671.87 seconds)
Cbc0010I After 3600 nodes, 59 on tree, 35122 best solution, best possible 28688 (1715.22 seconds)
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 2657 rows 696 columns - 221 fixed gives 1365, 318 - ok now
Cbc0038I Full problem 4131 rows 1401 columns, reduced to 5 rows 3 columns
Cbc0010I After 3700 nodes, 61 on tree, 35122 best solution, best possible 28688 (1757.20 seconds)
Cbc0010I After 3800 nodes, 59 on tree, 35122 best solution, best possible 28688 (1793.91 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 35122 (best possible 28688), took 5735916 iterations and 3820 nodes (1799.79 seconds)
Cbc0032I Strong branching done 20158 times (1685260 iterations), fathomed 611 nodes and fixed 1369 variables
Cbc0035I Maximum depth 831, 0 variables fixed on reduced cost
Cuts at root node changed objective from 28672 to 28672
Probing was tried 669 times and created 66911 cuts of which 0 were active after adding rounds of cuts (5.242 seconds)
Gomory was tried 568 times and created 148 cuts of which 0 were active after adding rounds of cuts (4.213 seconds)
Knapsack was tried 568 times and created 2630 cuts of which 0 were active after adding rounds of cuts (0.662 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.023 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
TwoMirCuts was tried 10 times and created 100 cuts of which 0 were active after adding rounds of cuts (0.187 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.045 seconds)
ImplicationCuts was tried 87 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)

Result - Stopped on time limit

Objective value:                35122.00000000
Lower bound:                    28688.000
Gap:                            0.22
Enumerated nodes:               3820
Total iterations:               5735916
Time (CPU seconds):             1800.00
Time (Wallclock seconds):       1809.05

Total time (CPU seconds):       1800.01   (Wallclock seconds):       1809.07

