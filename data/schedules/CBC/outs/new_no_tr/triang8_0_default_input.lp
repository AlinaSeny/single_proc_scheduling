Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/triang8_0_default_input.lp sec 1800 solve solu solutions/new_no_tr/triang8_0_default_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 215.116 - 1.01 seconds
Cgl0002I 155 variables fixed
Cgl0003I 0 fixed, 18 tightened bounds, 1042 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 21 tightened bounds, 426 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 17 tightened bounds, 223 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 7 tightened bounds, 90 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 9 tightened bounds, 29 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 6 tightened bounds, 13 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 8 tightened bounds, 18 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 4 tightened bounds, 17 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 4764 rows, 1627 columns (1627 integer (1590 of which binary)) and 16309 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1627 objects (1627 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 799 integers unsatisfied sum - 238.008
Cbc0038I Pass   1: (3.45 seconds) suminf.  130.15934 (746) obj. 313.22 iterations 2170
Cbc0038I Pass   2: (3.67 seconds) suminf.   89.82356 (949) obj. 345.099 iterations 997
Cbc0038I Pass   3: (3.80 seconds) suminf.   80.10229 (984) obj. 329.914 iterations 556
Cbc0038I Pass   4: (3.91 seconds) suminf.   74.69983 (1000) obj. 323.908 iterations 545
Cbc0038I Pass   5: (4.00 seconds) suminf.   72.89038 (995) obj. 341.946 iterations 381
Cbc0038I Pass   6: (4.12 seconds) suminf.   74.60201 (911) obj. 332.409 iterations 577
Cbc0038I Pass   7: (4.15 seconds) suminf.   74.22447 (936) obj. 333.565 iterations 110
Cbc0038I Pass   8: (4.29 seconds) suminf.   74.23530 (923) obj. 386.926 iterations 782
Cbc0038I Pass   9: (4.36 seconds) suminf.   72.74232 (941) obj. 381.446 iterations 368
Cbc0038I Pass  10: (4.39 seconds) suminf.   72.23704 (943) obj. 379.529 iterations 122
Cbc0038I Pass  11: (4.43 seconds) suminf.   71.52105 (935) obj. 382.203 iterations 136
Cbc0038I Pass  12: (4.54 seconds) suminf.   70.39735 (942) obj. 432.639 iterations 582
Cbc0038I Pass  13: (4.60 seconds) suminf.   69.18031 (929) obj. 437.914 iterations 247
Cbc0038I Pass  14: (4.69 seconds) suminf.   70.88587 (952) obj. 437.414 iterations 427
Cbc0038I Pass  15: (4.75 seconds) suminf.   69.46901 (911) obj. 440.176 iterations 290
Cbc0038I Pass  16: (4.77 seconds) suminf.   69.46520 (914) obj. 439.371 iterations 60
Cbc0038I Pass  17: (4.84 seconds) suminf.   69.78967 (929) obj. 436.995 iterations 333
Cbc0038I Pass  18: (4.90 seconds) suminf.   69.18031 (929) obj. 437.914 iterations 241
Cbc0038I Pass  19: (4.98 seconds) suminf.   69.72911 (927) obj. 439.148 iterations 355
Cbc0038I Pass  20: (5.18 seconds) suminf.  106.66592 (926) obj. 491.768 iterations 1072
Cbc0038I Pass  21: (5.32 seconds) suminf.   70.96813 (942) obj. 489.022 iterations 843
Cbc0038I Pass  22: (5.35 seconds) suminf.   70.44828 (927) obj. 490.181 iterations 108
Cbc0038I Pass  23: (5.45 seconds) suminf.   70.39614 (950) obj. 519.845 iterations 579
Cbc0038I Pass  24: (5.49 seconds) suminf.   69.06933 (974) obj. 523.775 iterations 201
Cbc0038I Pass  25: (5.54 seconds) suminf.   68.80170 (979) obj. 526.487 iterations 198
Cbc0038I Pass  26: (5.58 seconds) suminf.   68.27272 (995) obj. 527.597 iterations 185
Cbc0038I Pass  27: (5.63 seconds) suminf.   67.56329 (983) obj. 519.813 iterations 163
Cbc0038I Pass  28: (5.67 seconds) suminf.   67.34416 (965) obj. 523.711 iterations 180
Cbc0038I Pass  29: (5.73 seconds) suminf.   67.74465 (949) obj. 514.875 iterations 260
Cbc0038I Pass  30: (5.78 seconds) suminf.   67.58956 (934) obj. 520.518 iterations 225
Cbc0038I Pass  31: (5.87 seconds) suminf.   69.37225 (966) obj. 523.689 iterations 482
Cbc0038I Pass  32: (5.93 seconds) suminf.   68.71160 (960) obj. 518.599 iterations 290
Cbc0038I Pass  33: (6.01 seconds) suminf.   67.98438 (958) obj. 519.234 iterations 391
Cbc0038I Pass  34: (6.07 seconds) suminf.   66.77461 (970) obj. 522.783 iterations 276
Cbc0038I Pass  35: (6.09 seconds) suminf.   66.48096 (969) obj. 523.185 iterations 100
Cbc0038I Pass  36: (6.16 seconds) suminf.   68.88118 (975) obj. 517.763 iterations 315
Cbc0038I Pass  37: (6.23 seconds) suminf.   67.61175 (957) obj. 520.656 iterations 337
Cbc0038I Pass  38: (6.28 seconds) suminf.   66.49842 (951) obj. 521.031 iterations 208
Cbc0038I Pass  39: (6.34 seconds) suminf.   69.43891 (978) obj. 514.483 iterations 278
Cbc0038I Pass  40: (6.39 seconds) suminf.   67.44193 (975) obj. 519.324 iterations 243
Cbc0038I Pass  41: (6.41 seconds) suminf.   67.31894 (979) obj. 517.27 iterations 52
Cbc0038I Pass  42: (6.48 seconds) suminf.   68.18657 (979) obj. 516.938 iterations 353
Cbc0038I Pass  43: (6.55 seconds) suminf.   67.16789 (956) obj. 519.369 iterations 362
Cbc0038I Pass  44: (6.58 seconds) suminf.   66.85742 (959) obj. 519.26 iterations 122
Cbc0038I Pass  45: (6.65 seconds) suminf.   68.85895 (981) obj. 525.777 iterations 371
Cbc0038I Pass  46: (6.70 seconds) suminf.   67.75994 (956) obj. 529.552 iterations 245
Cbc0038I Pass  47: (6.74 seconds) suminf.   67.60899 (975) obj. 529.502 iterations 154
Cbc0038I Pass  48: (6.81 seconds) suminf.   67.77271 (966) obj. 532.401 iterations 349
Cbc0038I Pass  49: (6.86 seconds) suminf.   66.98826 (977) obj. 527.643 iterations 259
Cbc0038I Pass  50: (6.92 seconds) suminf.   67.43900 (958) obj. 530.199 iterations 275
Cbc0038I Pass  51: (6.97 seconds) suminf.   66.84787 (965) obj. 531.988 iterations 210
Cbc0038I Pass  52: (7.05 seconds) suminf.   67.52449 (952) obj. 512.191 iterations 388
Cbc0038I Pass  53: (7.10 seconds) suminf.   67.07393 (944) obj. 520.454 iterations 238
Cbc0038I Pass  54: (7.19 seconds) suminf.   69.32322 (979) obj. 516.485 iterations 420
Cbc0038I Pass  55: (7.26 seconds) suminf.   67.48062 (954) obj. 518.352 iterations 380
Cbc0038I Pass  56: (7.27 seconds) suminf.   67.37368 (956) obj. 518.406 iterations 47
Cbc0038I Pass  57: (7.37 seconds) suminf.   70.39823 (973) obj. 523.464 iterations 462
Cbc0038I Pass  58: (7.44 seconds) suminf.   68.03425 (937) obj. 519.242 iterations 367
Cbc0038I Pass  59: (7.49 seconds) suminf.   67.56477 (968) obj. 518.886 iterations 177
Cbc0038I Pass  60: (7.57 seconds) suminf.   67.97055 (987) obj. 527.946 iterations 372
Cbc0038I Pass  61: (7.62 seconds) suminf.   67.20212 (957) obj. 529.075 iterations 189
Cbc0038I Pass  62: (7.71 seconds) suminf.   70.56197 (984) obj. 524.843 iterations 502
Cbc0038I Pass  63: (7.76 seconds) suminf.   68.30515 (978) obj. 529.552 iterations 271
Cbc0038I Pass  64: (7.78 seconds) suminf.   67.59740 (968) obj. 529.873 iterations 118
Cbc0038I Pass  65: (7.81 seconds) suminf.   67.01191 (964) obj. 530.206 iterations 164
Cbc0038I Pass  66: (7.89 seconds) suminf.   68.76651 (973) obj. 510.704 iterations 436
Cbc0038I Pass  67: (7.95 seconds) suminf.   67.43172 (964) obj. 516.412 iterations 350
Cbc0038I Pass  68: (7.98 seconds) suminf.   67.01767 (972) obj. 516.791 iterations 120
Cbc0038I Pass  69: (8.10 seconds) suminf.   68.33630 (1001) obj. 509.175 iterations 633
Cbc0038I Pass  70: (8.17 seconds) suminf.   66.71278 (948) obj. 510.067 iterations 288
Cbc0038I Pass  71: (8.24 seconds) suminf.   67.58460 (928) obj. 505.652 iterations 385
Cbc0038I Pass  72: (8.28 seconds) suminf.   66.74292 (927) obj. 505.652 iterations 235
Cbc0038I Pass  73: (8.36 seconds) suminf.   67.11112 (961) obj. 509.805 iterations 482
Cbc0038I Pass  74: (8.39 seconds) suminf.   66.84533 (944) obj. 510.547 iterations 132
Cbc0038I Pass  75: (8.45 seconds) suminf.   67.34145 (948) obj. 510.802 iterations 338
Cbc0038I Pass  76: (8.49 seconds) suminf.   66.93970 (947) obj. 510.802 iterations 173
Cbc0038I Pass  77: (8.57 seconds) suminf.   67.00813 (967) obj. 509.784 iterations 371
Cbc0038I Pass  78: (8.62 seconds) suminf.   66.45263 (921) obj. 510.744 iterations 208
Cbc0038I Pass  79: (8.70 seconds) suminf.   67.57586 (944) obj. 509.45 iterations 384
Cbc0038I Pass  80: (8.74 seconds) suminf.   66.94426 (957) obj. 510.802 iterations 144
Cbc0038I Pass  81: (8.80 seconds) suminf.   68.02346 (947) obj. 509.805 iterations 324
Cbc0038I Pass  82: (8.85 seconds) suminf.   66.62766 (924) obj. 510.843 iterations 270
Cbc0038I Pass  83: (8.87 seconds) suminf.   66.51037 (920) obj. 510.742 iterations 106
Cbc0038I Pass  84: (8.93 seconds) suminf.   67.31711 (944) obj. 510.802 iterations 322
Cbc0038I Pass  85: (8.96 seconds) suminf.   66.97523 (955) obj. 510.802 iterations 108
Cbc0038I Pass  86: (9.02 seconds) suminf.   68.40528 (951) obj. 509.805 iterations 282
Cbc0038I Pass  87: (9.08 seconds) suminf.   66.64745 (919) obj. 510.618 iterations 332
Cbc0038I Pass  88: (9.10 seconds) suminf.   66.22225 (924) obj. 510.802 iterations 108
Cbc0038I Pass  89: (9.16 seconds) suminf.   67.50661 (974) obj. 509.805 iterations 310
Cbc0038I Pass  90: (9.20 seconds) suminf.   66.92155 (967) obj. 509.805 iterations 152
Cbc0038I Pass  91: (9.26 seconds) suminf.   69.07600 (966) obj. 504.176 iterations 300
Cbc0038I Pass  92: (9.32 seconds) suminf.   66.66766 (943) obj. 511.049 iterations 326
Cbc0038I Pass  93: (9.39 seconds) suminf.   68.02716 (953) obj. 493.822 iterations 398
Cbc0038I Pass  94: (9.45 seconds) suminf.   66.88021 (937) obj. 489.51 iterations 285
Cbc0038I Pass  95: (9.47 seconds) suminf.   66.19086 (944) obj. 490.207 iterations 85
Cbc0038I Pass  96: (9.53 seconds) suminf.   67.46728 (946) obj. 493.137 iterations 338
Cbc0038I Pass  97: (9.58 seconds) suminf.   67.16176 (961) obj. 493.618 iterations 210
Cbc0038I Pass  98: (9.64 seconds) suminf.   66.45767 (927) obj. 494.907 iterations 269
Cbc0038I Pass  99: (9.67 seconds) suminf.   66.41448 (924) obj. 493.565 iterations 157
Cbc0038I Pass 100: (9.84 seconds) suminf.  107.58238 (885) obj. 592.475 iterations 1175
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 137 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 4468 rows 1486 columns - too large
Cbc0038I Mini branch and bound did not improve solution (9.99 seconds)
Cbc0038I After 9.99 seconds - Feasibility pump exiting - took 6.99 seconds
Cbc0031I 53 added rows had average density of 18.207547
Cbc0013I At root node, 53 cuts changed objective from 215.3359 to 232.63272 in 14 passes
Cbc0014I Cut generator 0 (Probing) - 6 row cuts average 4.2 elements, 4 column cuts (4 active)  in 0.185 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 77 row cuts average 674.7 elements, 0 column cuts (0 active)  in 0.886 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 234 row cuts average 23.2 elements, 0 column cuts (0 active)  in 0.264 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 18 row cuts average 28.1 elements, 0 column cuts (0 active)  in 0.747 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 233 (23.42 seconds)
Cbc0010I After 100 nodes, 31 on tree, 1e+50 best solution, best possible 236 (111.25 seconds)
Cbc0010I After 200 nodes, 81 on tree, 1e+50 best solution, best possible 236 (192.13 seconds)
Cbc0010I After 300 nodes, 131 on tree, 1e+50 best solution, best possible 236 (271.15 seconds)
Cbc0010I After 400 nodes, 181 on tree, 1e+50 best solution, best possible 236 (343.23 seconds)
Cbc0010I After 500 nodes, 231 on tree, 1e+50 best solution, best possible 236 (412.76 seconds)
Cbc0010I After 600 nodes, 281 on tree, 1e+50 best solution, best possible 236 (491.34 seconds)
Cbc0010I After 700 nodes, 331 on tree, 1e+50 best solution, best possible 236 (579.55 seconds)
Cbc0010I After 800 nodes, 381 on tree, 1e+50 best solution, best possible 236 (675.33 seconds)
Cbc0010I After 900 nodes, 431 on tree, 1e+50 best solution, best possible 236 (754.83 seconds)
Cbc0010I After 1000 nodes, 481 on tree, 1e+50 best solution, best possible 236 (830.55 seconds)
Cbc0004I Integer solution of 719 found after 2586605 iterations and 1032 nodes (849.17 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 2955 rows 826 columns - 136 fixed gives 1265, 288 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 24 rows 10 columns
Cbc0012I Integer solution of 529 found by RINS after 2589796 iterations and 1033 nodes (851.09 seconds)
Cbc0010I After 1100 nodes, 282 on tree, 529 best solution, best possible 245 (901.89 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 2825 rows 815 columns - 132 fixed gives 1331, 320 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 12 rows 5 columns
Cbc0010I After 1200 nodes, 278 on tree, 529 best solution, best possible 254 (983.15 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 3000 rows 857 columns - 159 fixed gives 1419, 352 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 21 rows 9 columns
Cbc0010I After 1300 nodes, 277 on tree, 529 best solution, best possible 257 (1041.44 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 2818 rows 801 columns - 130 fixed gives 1322, 319 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 9 rows 4 columns
Cbc0010I After 1400 nodes, 290 on tree, 529 best solution, best possible 257 (1088.47 seconds)
Cbc0010I After 1500 nodes, 285 on tree, 529 best solution, best possible 257 (1137.44 seconds)
Cbc0010I After 1600 nodes, 287 on tree, 529 best solution, best possible 257 (1188.78 seconds)
Cbc0010I After 1700 nodes, 286 on tree, 529 best solution, best possible 257 (1248.63 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 2796 rows 819 columns - 150 fixed gives 1217, 273 - ok now
Cbc0010I After 1800 nodes, 294 on tree, 529 best solution, best possible 257 (1299.12 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 2907 rows 842 columns - 124 fixed gives 1517, 404 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 34 rows 14 columns
Cbc0010I After 1900 nodes, 282 on tree, 529 best solution, best possible 257 (1348.18 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 2839 rows 838 columns - 150 fixed gives 1368, 331 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 12 rows 5 columns
Cbc0010I After 2000 nodes, 284 on tree, 529 best solution, best possible 257 (1410.33 seconds)
Cbc0010I After 2100 nodes, 278 on tree, 529 best solution, best possible 257 (1466.96 seconds)
Cbc0010I After 2200 nodes, 274 on tree, 529 best solution, best possible 258 (1541.52 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 3031 rows 892 columns - 143 fixed gives 1510, 391 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 23 rows 10 columns
Cbc0010I After 2300 nodes, 272 on tree, 529 best solution, best possible 259 (1600.06 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 2475 rows 720 columns - 117 fixed gives 1299, 301 - ok now
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 30 rows 13 columns
Cbc0010I After 2400 nodes, 283 on tree, 529 best solution, best possible 259 (1658.83 seconds)
Cbc0010I After 2500 nodes, 281 on tree, 529 best solution, best possible 259 (1717.27 seconds)
Cbc0010I After 2600 nodes, 275 on tree, 529 best solution, best possible 259 (1759.67 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 529 (best possible 259), took 4652185 iterations and 2689 nodes (1799.86 seconds)
Cbc0032I Strong branching done 26252 times (2070887 iterations), fathomed 260 nodes and fixed 4345 variables
Cbc0035I Maximum depth 516, 0 variables fixed on reduced cost
Cuts at root node changed objective from 215.336 to 233
Probing was tried 498 times and created 18261 cuts of which 0 were active after adding rounds of cuts (1.942 seconds)
Gomory was tried 448 times and created 3825 cuts of which 0 were active after adding rounds of cuts (4.498 seconds)
Knapsack was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.023 seconds)
Clique was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.039 seconds)
MixedIntegerRounding2 was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.028 seconds)
FlowCover was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
TwoMirCuts was tried 448 times and created 5540 cuts of which 0 were active after adding rounds of cuts (1.674 seconds)
ZeroHalf was tried 14 times and created 18 cuts of which 0 were active after adding rounds of cuts (0.747 seconds)
ImplicationCuts was tried 40 times and created 32 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)

Result - Stopped on time limit

Objective value:                529.00000000
Lower bound:                    259.000
Gap:                            1.04
Enumerated nodes:               2689
Total iterations:               4652185
Time (CPU seconds):             1800.11
Time (Wallclock seconds):       1809.28

Total time (CPU seconds):       1800.12   (Wallclock seconds):       1809.30

