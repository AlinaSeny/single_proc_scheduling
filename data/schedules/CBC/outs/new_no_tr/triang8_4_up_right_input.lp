Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/triang8_4_up_right_input.lp sec 1800 solve solu solutions/new_no_tr/triang8_4_up_right_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 229.075 - 0.43 seconds
Cgl0002I 155 variables fixed
Cgl0003I 0 fixed, 17 tightened bounds, 918 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 26 tightened bounds, 692 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 16 tightened bounds, 419 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 12 tightened bounds, 296 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 7 tightened bounds, 209 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 8 tightened bounds, 165 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 4 tightened bounds, 103 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 51 strengthened rows, 0 substitutions
Cgl0004I processed model has 4764 rows, 1627 columns (1627 integer (1590 of which binary)) and 15924 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1627 objects (1627 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 720 integers unsatisfied sum - 222.756
Cbc0038I Pass   1: (1.94 seconds) suminf.   79.59438 (428) obj. 345.417 iterations 2205
Cbc0038I Pass   2: (2.08 seconds) suminf.   58.96889 (417) obj. 387.57 iterations 953
Cbc0038I Pass   3: (2.11 seconds) suminf.   57.87279 (449) obj. 387.404 iterations 151
Cbc0038I Pass   4: (2.15 seconds) suminf.   56.60997 (458) obj. 387.163 iterations 195
Cbc0038I Pass   5: (2.19 seconds) suminf.   55.71779 (443) obj. 387.306 iterations 200
Cbc0038I Pass   6: (2.21 seconds) suminf.   55.54659 (469) obj. 387.203 iterations 112
Cbc0038I Pass   7: (2.30 seconds) suminf.   49.65161 (437) obj. 391.988 iterations 529
Cbc0038I Pass   8: (2.31 seconds) suminf.   50.30391 (438) obj. 392.49 iterations 51
Cbc0038I Pass   9: (2.38 seconds) suminf.   49.20123 (434) obj. 391.88 iterations 399
Cbc0038I Pass  10: (2.43 seconds) suminf.   46.79613 (461) obj. 389.869 iterations 270
Cbc0038I Pass  11: (2.50 seconds) suminf.   48.65756 (477) obj. 385.994 iterations 461
Cbc0038I Pass  12: (2.54 seconds) suminf.   45.89494 (477) obj. 387.694 iterations 180
Cbc0038I Pass  13: (2.56 seconds) suminf.   45.78958 (480) obj. 386.921 iterations 71
Cbc0038I Pass  14: (2.58 seconds) suminf.   46.41811 (482) obj. 386.395 iterations 91
Cbc0038I Pass  15: (2.65 seconds) suminf.   48.44771 (441) obj. 386.695 iterations 380
Cbc0038I Pass  16: (2.71 seconds) suminf.   43.77051 (459) obj. 391.846 iterations 377
Cbc0038I Pass  17: (2.75 seconds) suminf.   43.48442 (465) obj. 388.034 iterations 209
Cbc0038I Pass  18: (2.79 seconds) suminf.   46.06446 (432) obj. 389.213 iterations 228
Cbc0038I Pass  19: (2.84 seconds) suminf.   43.62344 (458) obj. 389.746 iterations 201
Cbc0038I Pass  20: (2.87 seconds) suminf.   46.19302 (445) obj. 389.197 iterations 155
Cbc0038I Pass  21: (3.14 seconds) suminf.   83.34079 (553) obj. 595.379 iterations 1807
Cbc0038I Pass  22: (3.29 seconds) suminf.   63.68454 (534) obj. 593.565 iterations 947
Cbc0038I Pass  23: (3.33 seconds) suminf.   61.36579 (532) obj. 594.05 iterations 167
Cbc0038I Pass  24: (3.39 seconds) suminf.   59.49961 (529) obj. 592.948 iterations 287
Cbc0038I Pass  25: (3.41 seconds) suminf.   58.37679 (540) obj. 617.083 iterations 79
Cbc0038I Pass  26: (3.46 seconds) suminf.   55.45726 (518) obj. 617.539 iterations 273
Cbc0038I Pass  27: (3.51 seconds) suminf.   55.12030 (544) obj. 618.096 iterations 228
Cbc0038I Pass  28: (3.57 seconds) suminf.   59.59924 (441) obj. 602.803 iterations 318
Cbc0038I Pass  29: (3.59 seconds) suminf.   58.11192 (439) obj. 601.773 iterations 72
Cbc0038I Pass  30: (3.59 seconds) suminf.   57.85051 (438) obj. 601.773 iterations 4
Cbc0038I Pass  31: (3.64 seconds) suminf.   58.59450 (436) obj. 483.654 iterations 284
Cbc0038I Pass  32: (3.66 seconds) suminf.   54.17391 (437) obj. 482.218 iterations 92
Cbc0038I Pass  33: (3.69 seconds) suminf.   54.60450 (404) obj. 484.763 iterations 136
Cbc0038I Pass  34: (3.70 seconds) suminf.   53.93629 (404) obj. 484.104 iterations 34
Cbc0038I Pass  35: (3.76 seconds) suminf.   49.41330 (380) obj. 489.03 iterations 359
Cbc0038I Pass  36: (3.78 seconds) suminf.   48.55710 (371) obj. 488.996 iterations 83
Cbc0038I Pass  37: (3.85 seconds) suminf.   44.15764 (363) obj. 494.048 iterations 497
Cbc0038I Pass  38: (3.88 seconds) suminf.   41.68626 (335) obj. 493.84 iterations 149
Cbc0038I Pass  39: (3.93 seconds) suminf.   38.29423 (307) obj. 520.824 iterations 331
Cbc0038I Pass  40: (3.95 seconds) suminf.   37.44613 (309) obj. 533.422 iterations 77
Cbc0038I Pass  41: (3.99 seconds) suminf.   34.05519 (299) obj. 513.509 iterations 322
Cbc0038I Pass  42: (4.00 seconds) suminf.   33.97761 (297) obj. 513.482 iterations 26
Cbc0038I Pass  43: (4.04 seconds) suminf.   25.25391 (266) obj. 512.451 iterations 291
Cbc0038I Pass  44: (4.06 seconds) suminf.   25.20735 (266) obj. 512.451 iterations 67
Cbc0038I Pass  45: (4.14 seconds) suminf.   20.17143 (255) obj. 466.738 iterations 682
Cbc0038I Pass  46: (4.16 seconds) suminf.   19.91665 (245) obj. 461.145 iterations 146
Cbc0038I Pass  47: (4.21 seconds) suminf.   17.01021 (233) obj. 414.26 iterations 309
Cbc0038I Pass  48: (4.22 seconds) suminf.   16.79470 (233) obj. 414.277 iterations 87
Cbc0038I Pass  49: (4.27 seconds) suminf.   13.40158 (239) obj. 393.95 iterations 362
Cbc0038I Pass  50: (4.30 seconds) suminf.   10.97510 (197) obj. 416.992 iterations 212
Cbc0038I Pass  51: (4.31 seconds) suminf.   10.96354 (195) obj. 417.013 iterations 7
Cbc0038I Pass  52: (4.33 seconds) suminf.    8.43851 (167) obj. 436.915 iterations 159
Cbc0038I Pass  53: (4.34 seconds) suminf.    8.20081 (166) obj. 436.973 iterations 18
Cbc0038I Pass  54: (4.40 seconds) suminf.    3.68288 (77) obj. 436.959 iterations 472
Cbc0038I Pass  55: (4.41 seconds) suminf.    3.64594 (88) obj. 436.959 iterations 17
Cbc0038I Pass  56: (4.43 seconds) suminf.    1.73873 (52) obj. 437.009 iterations 142
Cbc0038I Pass  57: (4.44 seconds) suminf.    1.73873 (52) obj. 437.009 iterations 24
Cbc0038I Pass  58: (4.65 seconds) suminf.    1.04992 (29) obj. 407.115 iterations 1675
Cbc0038I Pass  59: (4.65 seconds) suminf.    1.04992 (29) obj. 407.115 iterations 11
Cbc0038I Pass  60: (4.67 seconds) suminf.    0.00000 (0) obj. 407 iterations 53
Cbc0038I Solution found of 407
Cbc0038I Cleaned solution of 407
Cbc0038I Before mini branch and bound, 457 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 3788 rows 1170 columns - 64 fixed gives 3152, 936 - still too large
Cbc0038I Mini branch and bound did not improve solution (5.23 seconds)
Cbc0038I Round again with cutoff of 388.308
Cbc0038I Pass  61: (5.24 seconds) suminf.   79.59438 (428) obj. 345.417 iterations 0
Cbc0038I Pass  62: (5.34 seconds) suminf.   58.96889 (417) obj. 387.57 iterations 747
Cbc0038I Pass  63: (5.38 seconds) suminf.   57.87279 (449) obj. 387.404 iterations 170
Cbc0038I Pass  64: (5.42 seconds) suminf.   56.60997 (458) obj. 387.163 iterations 215
Cbc0038I Pass  65: (5.46 seconds) suminf.   55.71779 (443) obj. 387.306 iterations 218
Cbc0038I Pass  66: (5.48 seconds) suminf.   55.54659 (469) obj. 387.203 iterations 116
Cbc0038I Pass  67: (5.57 seconds) suminf.   48.22143 (459) obj. 388.308 iterations 606
Cbc0038I Pass  68: (5.63 seconds) suminf.   46.93373 (453) obj. 386.718 iterations 352
Cbc0038I Pass  69: (5.64 seconds) suminf.   46.86415 (447) obj. 386.504 iterations 51
Cbc0038I Pass  70: (5.69 seconds) suminf.   47.86613 (436) obj. 388.308 iterations 247
Cbc0038I Pass  71: (5.72 seconds) suminf.   45.82450 (448) obj. 388.308 iterations 211
Cbc0038I Pass  72: (5.78 seconds) suminf.   50.97315 (412) obj. 388.308 iterations 350
Cbc0038I Pass  73: (5.85 seconds) suminf.   47.23960 (457) obj. 388.308 iterations 435
Cbc0038I Pass  74: (5.88 seconds) suminf.   45.53726 (468) obj. 388.308 iterations 168
Cbc0038I Pass  75: (5.94 seconds) suminf.   49.48644 (423) obj. 388.308 iterations 325
Cbc0038I Pass  76: (5.99 seconds) suminf.   45.82450 (448) obj. 388.308 iterations 338
Cbc0038I Pass  77: (6.03 seconds) suminf.   47.17412 (450) obj. 388.308 iterations 226
Cbc0038I Pass  78: (6.06 seconds) suminf.   46.47243 (453) obj. 388.308 iterations 155
Cbc0038I Pass  79: (6.11 seconds) suminf.   48.71999 (433) obj. 388.308 iterations 245
Cbc0038I Pass  80: (6.14 seconds) suminf.   46.13694 (445) obj. 388.308 iterations 190
Cbc0038I Pass  81: (6.19 seconds) suminf.   51.09123 (391) obj. 388.308 iterations 261
Cbc0038I Pass  82: (6.23 seconds) suminf.   49.07346 (413) obj. 388.308 iterations 219
Cbc0038I Pass  83: (6.25 seconds) suminf.   47.90956 (425) obj. 388.308 iterations 128
Cbc0038I Pass  84: (6.28 seconds) suminf.   45.45914 (413) obj. 388.308 iterations 117
Cbc0038I Pass  85: (6.29 seconds) suminf.   45.39164 (407) obj. 388.308 iterations 77
Cbc0038I Pass  86: (6.34 seconds) suminf.   50.81632 (391) obj. 388.308 iterations 285
Cbc0038I Pass  87: (6.38 seconds) suminf.   46.62381 (429) obj. 388.308 iterations 247
Cbc0038I Pass  88: (6.41 seconds) suminf.   44.79876 (423) obj. 388.308 iterations 134
Cbc0038I Pass  89: (6.49 seconds) suminf.   51.34421 (394) obj. 388.308 iterations 508
Cbc0038I Pass  90: (6.52 seconds) suminf.   51.78894 (400) obj. 388.308 iterations 150
Cbc0038I Pass  91: (6.56 seconds) suminf.   48.06368 (414) obj. 388.308 iterations 278
Cbc0038I Pass  92: (6.60 seconds) suminf.   45.32424 (410) obj. 388.308 iterations 245
Cbc0038I Pass  93: (6.67 seconds) suminf.   50.58917 (398) obj. 388.308 iterations 402
Cbc0038I Pass  94: (6.72 seconds) suminf.   44.79876 (423) obj. 388.308 iterations 345
Cbc0038I Pass  95: (6.78 seconds) suminf.   51.70470 (403) obj. 388.308 iterations 390
Cbc0038I Pass  96: (6.83 seconds) suminf.   48.40089 (422) obj. 388.308 iterations 290
Cbc0038I Pass  97: (6.87 seconds) suminf.   45.32424 (410) obj. 388.308 iterations 267
Cbc0038I Pass  98: (6.92 seconds) suminf.   50.58917 (398) obj. 388.308 iterations 306
Cbc0038I Pass  99: (6.97 seconds) suminf.   44.79876 (423) obj. 388.308 iterations 344
Cbc0038I Pass 100: (7.04 seconds) suminf.   51.39861 (381) obj. 388.308 iterations 404
Cbc0038I Pass 101: (7.06 seconds) suminf.   51.37067 (393) obj. 388.308 iterations 118
Cbc0038I Pass 102: (7.09 seconds) suminf.   51.78894 (400) obj. 388.308 iterations 164
Cbc0038I Pass 103: (7.13 seconds) suminf.   48.06368 (414) obj. 388.308 iterations 277
Cbc0038I Pass 104: (7.17 seconds) suminf.   45.32424 (410) obj. 388.308 iterations 251
Cbc0038I Pass 105: (7.20 seconds) suminf.   45.14006 (431) obj. 388.308 iterations 154
Cbc0038I Pass 106: (7.22 seconds) suminf.   45.39164 (407) obj. 388.308 iterations 97
Cbc0038I Pass 107: (7.27 seconds) suminf.   51.49568 (390) obj. 388.308 iterations 300
Cbc0038I Pass 108: (7.32 seconds) suminf.   48.03534 (410) obj. 388.308 iterations 300
Cbc0038I Pass 109: (7.36 seconds) suminf.   45.86300 (423) obj. 388.308 iterations 225
Cbc0038I Pass 110: (7.40 seconds) suminf.   49.92409 (409) obj. 388.308 iterations 267
Cbc0038I Pass 111: (7.45 seconds) suminf.   45.32424 (410) obj. 388.308 iterations 314
Cbc0038I Pass 112: (7.52 seconds) suminf.   52.77782 (395) obj. 388.308 iterations 432
Cbc0038I Pass 113: (7.57 seconds) suminf.   51.13261 (386) obj. 388.308 iterations 272
Cbc0038I Pass 114: (7.58 seconds) suminf.   50.50158 (394) obj. 388.308 iterations 81
Cbc0038I Pass 115: (7.60 seconds) suminf.   49.52021 (410) obj. 388.308 iterations 59
Cbc0038I Pass 116: (7.61 seconds) suminf.   49.08226 (410) obj. 388.308 iterations 72
Cbc0038I Pass 117: (7.68 seconds) suminf.   50.77438 (385) obj. 388.308 iterations 481
Cbc0038I Pass 118: (7.72 seconds) suminf.   49.39957 (380) obj. 388.308 iterations 193
Cbc0038I Pass 119: (7.73 seconds) suminf.   47.72885 (377) obj. 388.308 iterations 96
Cbc0038I Pass 120: (7.74 seconds) suminf.   47.72885 (377) obj. 388.308 iterations 2
Cbc0038I Pass 121: (7.78 seconds) suminf.   45.58152 (358) obj. 388.308 iterations 288
Cbc0038I Pass 122: (7.82 seconds) suminf.   44.80193 (383) obj. 388.308 iterations 252
Cbc0038I Pass 123: (7.86 seconds) suminf.   43.95837 (346) obj. 388.308 iterations 189
Cbc0038I Pass 124: (7.87 seconds) suminf.   42.82254 (348) obj. 388.308 iterations 29
Cbc0038I Pass 125: (7.92 seconds) suminf.   36.03252 (307) obj. 388.308 iterations 351
Cbc0038I Pass 126: (7.93 seconds) suminf.   35.40856 (306) obj. 388.308 iterations 110
Cbc0038I Pass 127: (7.97 seconds) suminf.   34.01058 (296) obj. 388.308 iterations 224
Cbc0038I Pass 128: (7.98 seconds) suminf.   32.83715 (290) obj. 388.308 iterations 42
Cbc0038I Pass 129: (8.01 seconds) suminf.   27.24414 (274) obj. 388.308 iterations 238
Cbc0038I Pass 130: (8.02 seconds) suminf.   26.39953 (273) obj. 388.308 iterations 51
Cbc0038I Pass 131: (8.06 seconds) suminf.   17.69730 (245) obj. 388.308 iterations 242
Cbc0038I Pass 132: (8.07 seconds) suminf.   17.94442 (253) obj. 388.308 iterations 101
Cbc0038I Pass 133: (8.10 seconds) suminf.   12.90800 (229) obj. 388.308 iterations 225
Cbc0038I Pass 134: (8.11 seconds) suminf.   12.38892 (227) obj. 388.308 iterations 41
Cbc0038I Pass 135: (8.14 seconds) suminf.   14.21049 (225) obj. 388.308 iterations 200
Cbc0038I Pass 136: (8.15 seconds) suminf.   12.24964 (222) obj. 388.308 iterations 66
Cbc0038I Pass 137: (8.17 seconds) suminf.   10.15299 (204) obj. 388.308 iterations 160
Cbc0038I Pass 138: (8.19 seconds) suminf.    8.68711 (176) obj. 380.984 iterations 109
Cbc0038I Pass 139: (8.20 seconds) suminf.    7.97573 (169) obj. 380.984 iterations 62
Cbc0038I Pass 140: (8.22 seconds) suminf.    6.71171 (147) obj. 388.308 iterations 208
Cbc0038I Pass 141: (8.23 seconds) suminf.    6.07128 (139) obj. 388.308 iterations 109
Cbc0038I Pass 142: (8.26 seconds) suminf.    6.35262 (98) obj. 388.308 iterations 239
Cbc0038I Pass 143: (8.27 seconds) suminf.    6.65715 (91) obj. 388.308 iterations 9
Cbc0038I Pass 144: (8.31 seconds) suminf.    5.72056 (43) obj. 388.308 iterations 302
Cbc0038I Pass 145: (8.31 seconds) suminf.    5.72056 (43) obj. 388.308 iterations 0
Cbc0038I Pass 146: (8.34 seconds) suminf.    5.52689 (44) obj. 388.308 iterations 195
Cbc0038I Pass 147: (8.35 seconds) suminf.    4.42489 (45) obj. 388.308 iterations 107
Cbc0038I Pass 148: (8.38 seconds) suminf.    1.66192 (47) obj. 388.308 iterations 242
Cbc0038I Pass 149: (8.39 seconds) suminf.    1.63436 (50) obj. 388.308 iterations 12
Cbc0038I Pass 150: (8.40 seconds) suminf.    4.64753 (41) obj. 388.308 iterations 55
Cbc0038I Pass 151: (8.41 seconds) suminf.    5.33035 (44) obj. 388.308 iterations 107
Cbc0038I Pass 152: (8.44 seconds) suminf.    6.91146 (74) obj. 388.308 iterations 222
Cbc0038I Pass 153: (8.45 seconds) suminf.    6.86668 (73) obj. 388.308 iterations 41
Cbc0038I Pass 154: (8.56 seconds) suminf.    3.36116 (55) obj. 388.308 iterations 837
Cbc0038I Pass 155: (8.57 seconds) suminf.    3.36116 (55) obj. 388.308 iterations 13
Cbc0038I Pass 156: (8.58 seconds) suminf.    3.07253 (29) obj. 388.308 iterations 104
Cbc0038I Pass 157: (8.60 seconds) suminf.    2.34598 (36) obj. 388.308 iterations 119
Cbc0038I Pass 158: (8.60 seconds) suminf.    2.34598 (36) obj. 388.308 iterations 17
Cbc0038I Pass 159: (8.73 seconds) suminf.    2.10823 (47) obj. 388.308 iterations 983
Cbc0038I Pass 160: (8.86 seconds) suminf.   37.01211 (253) obj. 388.308 iterations 1251
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 524 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 3628 rows 1103 columns - 47 fixed gives 2984, 886 - still too large
Cbc0038I Mini branch and bound did not improve solution (9.29 seconds)
Cbc0038I After 9.29 seconds - Feasibility pump exiting with objective of 407 - took 7.73 seconds
Cbc0012I Integer solution of 407 found by feasibility pump after 0 iterations and 0 nodes (9.29 seconds)
Cbc0031I 61 added rows had average density of 16.295082
Cbc0013I At root node, 61 cuts changed objective from 229.07522 to 249 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 23 row cuts average 3.2 elements, 2 column cuts (2 active)  in 0.098 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 90 row cuts average 707.5 elements, 0 column cuts (0 active)  in 0.483 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 180 row cuts average 19.3 elements, 0 column cuts (0 active)  in 0.197 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 43 row cuts average 34.2 elements, 0 column cuts (0 active)  in 0.374 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 407 best solution, best possible 249 (16.83 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 473 rows 135 columns
Cbc0010I After 100 nodes, 4 on tree, 407 best solution, best possible 261 (69.49 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 519 rows 144 columns
Cbc0010I After 200 nodes, 4 on tree, 407 best solution, best possible 266 (119.88 seconds)
Cbc0010I After 300 nodes, 2 on tree, 407 best solution, best possible 278 (168.42 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 446 rows 144 columns
Cbc0010I After 400 nodes, 6 on tree, 407 best solution, best possible 282 (202.25 seconds)
Cbc0010I After 500 nodes, 14 on tree, 407 best solution, best possible 282 (256.79 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 796 rows 213 columns
Cbc0010I After 600 nodes, 11 on tree, 407 best solution, best possible 282 (294.31 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 491 rows 143 columns
Cbc0010I After 700 nodes, 23 on tree, 407 best solution, best possible 283 (330.66 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 360 rows 119 columns
Cbc0010I After 800 nodes, 64 on tree, 407 best solution, best possible 283 (370.43 seconds)
Cbc0010I After 900 nodes, 93 on tree, 407 best solution, best possible 283 (411.61 seconds)
Cbc0010I After 1000 nodes, 105 on tree, 407 best solution, best possible 283 (446.90 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 481 rows 152 columns
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 635 rows 179 columns
Cbc0010I After 1100 nodes, 113 on tree, 407 best solution, best possible 283 (486.37 seconds)
Cbc0010I After 1200 nodes, 99 on tree, 407 best solution, best possible 283 (527.60 seconds)
Cbc0010I After 1300 nodes, 86 on tree, 407 best solution, best possible 283 (564.53 seconds)
Cbc0010I After 1400 nodes, 77 on tree, 407 best solution, best possible 283 (600.41 seconds)
Cbc0010I After 1500 nodes, 75 on tree, 407 best solution, best possible 283 (630.28 seconds)
Cbc0010I After 1600 nodes, 68 on tree, 407 best solution, best possible 283 (660.68 seconds)
Cbc0010I After 1700 nodes, 91 on tree, 407 best solution, best possible 283 (689.00 seconds)
Cbc0010I After 1800 nodes, 89 on tree, 407 best solution, best possible 283 (710.55 seconds)
Cbc0010I After 1900 nodes, 84 on tree, 407 best solution, best possible 283 (734.62 seconds)
Cbc0010I After 2000 nodes, 71 on tree, 407 best solution, best possible 283 (761.16 seconds)
Cbc0010I After 2100 nodes, 68 on tree, 407 best solution, best possible 283 (795.03 seconds)
Cbc0010I After 2200 nodes, 63 on tree, 407 best solution, best possible 283 (829.99 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 677 rows 198 columns
Cbc0010I After 2300 nodes, 57 on tree, 407 best solution, best possible 283 (861.88 seconds)
Cbc0010I After 2400 nodes, 41 on tree, 407 best solution, best possible 283 (897.47 seconds)
Cbc0010I After 2500 nodes, 40 on tree, 407 best solution, best possible 283 (927.04 seconds)
Cbc0010I After 2600 nodes, 33 on tree, 407 best solution, best possible 283 (950.95 seconds)
Cbc0010I After 2700 nodes, 39 on tree, 407 best solution, best possible 283 (977.76 seconds)
Cbc0010I After 2800 nodes, 37 on tree, 407 best solution, best possible 283 (996.61 seconds)
Cbc0010I After 2900 nodes, 36 on tree, 407 best solution, best possible 283 (1014.28 seconds)
Cbc0010I After 3000 nodes, 35 on tree, 407 best solution, best possible 283 (1030.10 seconds)
Cbc0010I After 3100 nodes, 29 on tree, 407 best solution, best possible 283 (1073.48 seconds)
Cbc0010I After 3200 nodes, 34 on tree, 407 best solution, best possible 283 (1089.44 seconds)
Cbc0010I After 3300 nodes, 28 on tree, 407 best solution, best possible 283 (1103.31 seconds)
Cbc0010I After 3400 nodes, 27 on tree, 407 best solution, best possible 283 (1112.48 seconds)
Cbc0010I After 3500 nodes, 31 on tree, 407 best solution, best possible 283 (1127.37 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 535 rows 151 columns
Cbc0010I After 3600 nodes, 27 on tree, 407 best solution, best possible 283 (1145.05 seconds)
Cbc0010I After 3700 nodes, 13 on tree, 407 best solution, best possible 283 (1171.00 seconds)
Cbc0010I After 3800 nodes, 15 on tree, 407 best solution, best possible 283 (1210.19 seconds)
Cbc0010I After 3900 nodes, 10 on tree, 407 best solution, best possible 283 (1221.93 seconds)
Cbc0010I After 4000 nodes, 10 on tree, 407 best solution, best possible 283 (1265.89 seconds)
Cbc0010I After 4100 nodes, 20 on tree, 407 best solution, best possible 283 (1302.66 seconds)
Cbc0010I After 4200 nodes, 21 on tree, 407 best solution, best possible 283 (1316.62 seconds)
Cbc0010I After 4300 nodes, 23 on tree, 407 best solution, best possible 283 (1335.35 seconds)
Cbc0010I After 4400 nodes, 14 on tree, 407 best solution, best possible 283 (1354.23 seconds)
Cbc0010I After 4500 nodes, 6 on tree, 407 best solution, best possible 283 (1378.76 seconds)
Cbc0010I After 4600 nodes, 17 on tree, 407 best solution, best possible 283 (1412.13 seconds)
Cbc0010I After 4700 nodes, 20 on tree, 407 best solution, best possible 283 (1429.28 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 555 rows 174 columns
Cbc0010I After 4800 nodes, 5 on tree, 407 best solution, best possible 283 (1445.31 seconds)
Cbc0010I After 4900 nodes, 5 on tree, 407 best solution, best possible 283 (1461.43 seconds)
Cbc0010I After 5000 nodes, 11 on tree, 407 best solution, best possible 283 (1482.44 seconds)
Cbc0010I After 5100 nodes, 27 on tree, 407 best solution, best possible 284 (1512.91 seconds)
Cbc0010I After 5200 nodes, 16 on tree, 407 best solution, best possible 284 (1528.92 seconds)
Cbc0010I After 5300 nodes, 2 on tree, 407 best solution, best possible 284 (1546.62 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 376 rows 124 columns
Cbc0010I After 5400 nodes, 13 on tree, 407 best solution, best possible 285 (1559.09 seconds)
Cbc0010I After 5500 nodes, 2 on tree, 407 best solution, best possible 286 (1574.89 seconds)
Cbc0010I After 5600 nodes, 7 on tree, 407 best solution, best possible 287 (1588.24 seconds)
Cbc0010I After 5700 nodes, 21 on tree, 407 best solution, best possible 287 (1602.91 seconds)
Cbc0010I After 5800 nodes, 23 on tree, 407 best solution, best possible 288 (1625.74 seconds)
Cbc0010I After 5900 nodes, 10 on tree, 407 best solution, best possible 288 (1639.61 seconds)
Cbc0010I After 6000 nodes, 18 on tree, 407 best solution, best possible 288 (1653.29 seconds)
Cbc0010I After 6100 nodes, 18 on tree, 407 best solution, best possible 288 (1669.24 seconds)
Cbc0010I After 6200 nodes, 12 on tree, 407 best solution, best possible 288 (1683.32 seconds)
Cbc0010I After 6300 nodes, 31 on tree, 407 best solution, best possible 288 (1693.94 seconds)
Cbc0010I After 6400 nodes, 23 on tree, 407 best solution, best possible 288 (1706.79 seconds)
Cbc0010I After 6500 nodes, 23 on tree, 407 best solution, best possible 288 (1719.78 seconds)
Cbc0038I Full problem 4764 rows 1627 columns, reduced to 535 rows 165 columns
Cbc0010I After 6600 nodes, 15 on tree, 407 best solution, best possible 288 (1739.30 seconds)
Cbc0010I After 6700 nodes, 5 on tree, 407 best solution, best possible 288 (1761.83 seconds)
Cbc0010I After 6800 nodes, 7 on tree, 407 best solution, best possible 289 (1772.95 seconds)
Cbc0010I After 6900 nodes, 14 on tree, 407 best solution, best possible 289 (1798.87 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 407 (best possible 289), took 5625208 iterations and 6901 nodes (1798.89 seconds)
Cbc0032I Strong branching done 32270 times (2458144 iterations), fathomed 528 nodes and fixed 2917 variables
Cbc0035I Maximum depth 90, 0 variables fixed on reduced cost
Cuts at root node changed objective from 229.075 to 249
Probing was tried 1158 times and created 82576 cuts of which 0 were active after adding rounds of cuts (4.110 seconds)
Gomory was tried 830 times and created 491 cuts of which 0 were active after adding rounds of cuts (3.365 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.016 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.022 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.012 seconds)
TwoMirCuts was tried 830 times and created 13117 cuts of which 0 were active after adding rounds of cuts (1.341 seconds)
ZeroHalf was tried 830 times and created 2589 cuts of which 0 were active after adding rounds of cuts (14.074 seconds)

Result - Stopped on time limit

Objective value:                407.00000000
Lower bound:                    289.000
Gap:                            0.41
Enumerated nodes:               6901
Total iterations:               5625208
Time (CPU seconds):             1799.06
Time (Wallclock seconds):       1808.80

Total time (CPU seconds):       1799.07   (Wallclock seconds):       1808.82

