Welcome to the CBC MILP Solver 
Version: 2.10.7 
Build Date: Feb 14 2022 

command line - cbc inputs/new_no_tr/order/jump_2_35_tiers_input.lp sec 1800 solve solu solutions/new_no_tr/jump_2_35_tiers_input.lp (default strategy 1)
seconds was changed from 1e+100 to 1800
Continuous objective value is 35840 - 0.47 seconds
Cgl0002I 97 variables fixed
Cgl0003I 0 fixed, 13 tightened bounds, 579 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 10 tightened bounds, 99 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 17 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 3731 rows, 1224 columns (1224 integer (1188 of which binary)) and 12635 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0045I 1 integer variables out of 1224 objects (1224 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 650 integers unsatisfied sum - 212.733
Cbc0038I Pass   1: (1.66 seconds) suminf.   99.27424 (598) obj. 67180.5 iterations 2199
Cbc0038I Pass   2: (1.79 seconds) suminf.   77.09565 (593) obj. 63850.8 iterations 609
Cbc0038I Pass   3: (1.88 seconds) suminf.   72.44588 (610) obj. 64728.4 iterations 446
Cbc0038I Pass   4: (1.92 seconds) suminf.   70.33299 (607) obj. 64701.2 iterations 145
Cbc0038I Pass   5: (1.97 seconds) suminf.   69.84339 (601) obj. 65308 iterations 175
Cbc0038I Pass   6: (2.06 seconds) suminf.   67.77370 (569) obj. 65348.2 iterations 440
Cbc0038I Pass   7: (2.11 seconds) suminf.   66.51067 (580) obj. 65335.3 iterations 185
Cbc0038I Pass   8: (2.20 seconds) suminf.   63.48762 (596) obj. 65467.8 iterations 391
Cbc0038I Pass   9: (2.23 seconds) suminf.   63.03185 (591) obj. 65147.2 iterations 97
Cbc0038I Pass  10: (2.25 seconds) suminf.   62.46278 (594) obj. 65096.1 iterations 93
Cbc0038I Pass  11: (2.34 seconds) suminf.   64.20838 (623) obj. 62526.9 iterations 426
Cbc0038I Pass  12: (2.39 seconds) suminf.   60.39437 (593) obj. 63978 iterations 214
Cbc0038I Pass  13: (2.41 seconds) suminf.   60.53622 (594) obj. 63907.8 iterations 90
Cbc0038I Pass  14: (2.52 seconds) suminf.   56.50061 (605) obj. 63436.2 iterations 539
Cbc0038I Pass  15: (2.56 seconds) suminf.   54.94329 (611) obj. 63189 iterations 142
Cbc0038I Pass  16: (2.59 seconds) suminf.   55.59761 (628) obj. 63410.2 iterations 120
Cbc0038I Pass  17: (2.68 seconds) suminf.   60.08798 (633) obj. 67379.4 iterations 473
Cbc0038I Pass  18: (2.74 seconds) suminf.   59.47235 (609) obj. 67666.2 iterations 241
Cbc0038I Pass  19: (2.80 seconds) suminf.   58.45760 (632) obj. 66306 iterations 240
Cbc0038I Pass  20: (2.81 seconds) suminf.   59.12674 (620) obj. 66229.3 iterations 50
Cbc0038I Pass  21: (2.94 seconds) suminf.   58.74939 (629) obj. 65541.5 iterations 630
Cbc0038I Pass  22: (3.01 seconds) suminf.   55.04673 (628) obj. 65711.7 iterations 279
Cbc0038I Pass  23: (3.03 seconds) suminf.   55.14664 (623) obj. 65719.6 iterations 53
Cbc0038I Pass  24: (3.11 seconds) suminf.   54.42763 (615) obj. 65753.1 iterations 369
Cbc0038I Pass  25: (3.17 seconds) suminf.   52.67978 (622) obj. 65600.8 iterations 188
Cbc0038I Pass  26: (3.24 seconds) suminf.   58.90788 (607) obj. 65766.5 iterations 359
Cbc0038I Pass  27: (3.30 seconds) suminf.   55.12461 (619) obj. 65508.1 iterations 263
Cbc0038I Pass  28: (3.38 seconds) suminf.   56.75646 (632) obj. 65800.5 iterations 349
Cbc0038I Pass  29: (3.44 seconds) suminf.   53.91535 (609) obj. 65313.7 iterations 277
Cbc0038I Pass  30: (3.47 seconds) suminf.   54.23230 (603) obj. 65394.7 iterations 139
Cbc0038I Pass  31: (3.50 seconds) suminf.   54.28787 (613) obj. 65276.1 iterations 94
Cbc0038I Pass  32: (3.59 seconds) suminf.   60.33638 (619) obj. 65738.4 iterations 479
Cbc0038I Pass  33: (3.68 seconds) suminf.   53.36559 (615) obj. 65621.1 iterations 430
Cbc0038I Pass  34: (3.75 seconds) suminf.   52.76774 (613) obj. 66253.4 iterations 363
Cbc0038I Pass  35: (3.79 seconds) suminf.   54.57560 (618) obj. 65467.7 iterations 160
Cbc0038I Pass  36: (3.85 seconds) suminf.   55.02151 (621) obj. 64747.6 iterations 273
Cbc0038I Pass  37: (3.89 seconds) suminf.   54.35485 (614) obj. 65305.3 iterations 120
Cbc0038I Pass  38: (3.96 seconds) suminf.   55.91986 (625) obj. 65273.8 iterations 363
Cbc0038I Pass  39: (4.03 seconds) suminf.   55.21654 (622) obj. 65706.6 iterations 296
Cbc0038I Pass  40: (4.12 seconds) suminf.   50.75526 (630) obj. 64724 iterations 396
Cbc0038I Pass  41: (4.18 seconds) suminf.   52.23705 (616) obj. 65117.7 iterations 237
Cbc0038I Pass  42: (4.27 seconds) suminf.   58.04985 (608) obj. 65779.5 iterations 472
Cbc0038I Pass  43: (4.34 seconds) suminf.   55.09951 (620) obj. 65661.8 iterations 310
Cbc0038I Pass  44: (4.39 seconds) suminf.   54.59314 (604) obj. 65115.7 iterations 167
Cbc0038I Pass  45: (4.48 seconds) suminf.   55.43273 (622) obj. 65989.2 iterations 487
Cbc0038I Pass  46: (4.54 seconds) suminf.   51.82886 (619) obj. 65756 iterations 279
Cbc0038I Pass  47: (4.64 seconds) suminf.   56.32262 (606) obj. 65153.7 iterations 458
Cbc0038I Pass  48: (4.69 seconds) suminf.   53.61318 (624) obj. 65322.8 iterations 253
Cbc0038I Pass  49: (4.80 seconds) suminf.   52.87606 (630) obj. 65770.1 iterations 531
Cbc0038I Pass  50: (4.84 seconds) suminf.   52.10041 (607) obj. 66121.9 iterations 131
Cbc0038I Pass  51: (4.94 seconds) suminf.   57.03001 (622) obj. 65763.2 iterations 485
Cbc0038I Pass  52: (5.00 seconds) suminf.   52.09847 (610) obj. 65635.9 iterations 248
Cbc0038I Pass  53: (5.03 seconds) suminf.   51.42229 (602) obj. 65516 iterations 117
Cbc0038I Pass  54: (5.09 seconds) suminf.   53.25485 (597) obj. 65163.2 iterations 297
Cbc0038I Pass  55: (5.14 seconds) suminf.   51.97928 (604) obj. 65016.4 iterations 215
Cbc0038I Pass  56: (5.24 seconds) suminf.   57.30975 (607) obj. 65642.8 iterations 483
Cbc0038I Pass  57: (5.31 seconds) suminf.   52.32389 (613) obj. 65006.9 iterations 353
Cbc0038I Pass  58: (5.39 seconds) suminf.   56.90684 (632) obj. 64527.4 iterations 408
Cbc0038I Pass  59: (5.48 seconds) suminf.   52.81464 (641) obj. 65321.1 iterations 397
Cbc0038I Pass  60: (5.56 seconds) suminf.   57.43803 (606) obj. 65147.8 iterations 437
Cbc0038I Pass  61: (5.63 seconds) suminf.   51.58316 (598) obj. 65045 iterations 315
Cbc0038I Pass  62: (5.67 seconds) suminf.   53.30740 (604) obj. 64997.3 iterations 168
Cbc0038I Pass  63: (5.70 seconds) suminf.   52.47316 (605) obj. 65029.5 iterations 98
Cbc0038I Pass  64: (5.78 seconds) suminf.   56.51187 (613) obj. 65814.4 iterations 383
Cbc0038I Pass  65: (5.83 seconds) suminf.   52.80824 (602) obj. 65651.1 iterations 228
Cbc0038I Pass  66: (5.87 seconds) suminf.   51.51109 (595) obj. 65547.9 iterations 131
Cbc0038I Pass  67: (5.95 seconds) suminf.   54.30940 (607) obj. 65775.2 iterations 441
Cbc0038I Pass  68: (6.01 seconds) suminf.   53.15256 (594) obj. 65531.6 iterations 188
Cbc0038I Pass  69: (6.03 seconds) suminf.   53.43386 (591) obj. 65539.5 iterations 71
Cbc0038I Pass  70: (6.09 seconds) suminf.   55.14261 (596) obj. 65116.3 iterations 316
Cbc0038I Pass  71: (6.16 seconds) suminf.   51.20688 (630) obj. 65370.3 iterations 275
Cbc0038I Pass  72: (6.24 seconds) suminf.   52.76206 (578) obj. 65099.9 iterations 437
Cbc0038I Pass  73: (6.34 seconds) suminf.   52.11517 (593) obj. 64689.3 iterations 464
Cbc0038I Pass  74: (6.44 seconds) suminf.   52.43486 (625) obj. 64968.9 iterations 518
Cbc0038I Pass  75: (6.52 seconds) suminf.   51.84590 (585) obj. 65155.4 iterations 321
Cbc0038I Pass  76: (6.61 seconds) suminf.   51.90014 (620) obj. 65561.6 iterations 418
Cbc0038I Pass  77: (6.67 seconds) suminf.   47.93440 (591) obj. 65855.6 iterations 230
Cbc0038I Pass  78: (6.75 seconds) suminf.   50.89657 (592) obj. 65263.1 iterations 359
Cbc0038I Pass  79: (6.77 seconds) suminf.   51.03779 (594) obj. 65151.7 iterations 74
Cbc0038I Pass  80: (6.84 seconds) suminf.   49.78357 (605) obj. 66059.9 iterations 298
Cbc0038I Pass  81: (6.87 seconds) suminf.   48.44407 (586) obj. 66102.9 iterations 72
Cbc0038I Pass  82: (6.94 seconds) suminf.   51.33407 (585) obj. 65256.1 iterations 360
Cbc0038I Pass  83: (7.14 seconds) suminf.   85.79741 (625) obj. 69445.1 iterations 1178
Cbc0038I Pass  84: (7.33 seconds) suminf.   68.18373 (592) obj. 73573.6 iterations 990
Cbc0038I Pass  85: (7.42 seconds) suminf.   65.12739 (612) obj. 73437.9 iterations 464
Cbc0038I Pass  86: (7.45 seconds) suminf.   63.53678 (605) obj. 73100.7 iterations 115
Cbc0038I Pass  87: (7.45 seconds) suminf.   63.10775 (602) obj. 72889.9 iterations 7
Cbc0038I Pass  88: (7.53 seconds) suminf.   60.61690 (611) obj. 70956.4 iterations 364
Cbc0038I Pass  89: (7.58 seconds) suminf.   58.58297 (610) obj. 70998.1 iterations 197
Cbc0038I Pass  90: (7.68 seconds) suminf.   59.78188 (608) obj. 70635.7 iterations 529
Cbc0038I Pass  91: (7.74 seconds) suminf.   58.31564 (611) obj. 70924.7 iterations 194
Cbc0038I Pass  92: (7.83 seconds) suminf.   58.56734 (597) obj. 70785.8 iterations 442
Cbc0038I Pass  93: (7.89 seconds) suminf.   56.97030 (605) obj. 70816.7 iterations 206
Cbc0038I Pass  94: (7.98 seconds) suminf.   59.03551 (610) obj. 71101.2 iterations 423
Cbc0038I Pass  95: (8.07 seconds) suminf.   51.14210 (613) obj. 71104.4 iterations 466
Cbc0038I Pass  96: (8.09 seconds) suminf.   51.17045 (612) obj. 71103.7 iterations 34
Cbc0038I Pass  97: (8.17 seconds) suminf.   52.09480 (604) obj. 71394.5 iterations 398
Cbc0038I Pass  98: (8.25 seconds) suminf.   49.01668 (625) obj. 71441.2 iterations 313
Cbc0038I Pass  99: (8.32 seconds) suminf.   50.16380 (596) obj. 71110.4 iterations 362
Cbc0038I Pass 100: (8.55 seconds) suminf.   89.26967 (586) obj. 72620.2 iterations 1155
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 93 integers at bound fixed and 0 continuous
Cbc0038I Full problem 3731 rows 1224 columns, reduced to 3519 rows 1126 columns - too large
Cbc0038I Mini branch and bound did not improve solution (8.79 seconds)
Cbc0038I After 8.79 seconds - Feasibility pump exiting - took 7.56 seconds
Cbc0031I 61 added rows had average density of 13.95082
Cbc0013I At root node, 61 cuts changed objective from 35840 to 40823.998 in 17 passes
Cbc0014I Cut generator 0 (Probing) - 89 row cuts average 3.4 elements, 5 column cuts (5 active)  in 0.135 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 370 row cuts average 88.8 elements, 0 column cuts (0 active)  in 0.623 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 406 row cuts average 14.9 elements, 0 column cuts (0 active)  in 0.196 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 40824 (25.25 seconds)
Cbc0010I After 100 nodes, 18 on tree, 1e+50 best solution, best possible 41530.021 (83.45 seconds)
Cbc0010I After 200 nodes, 4 on tree, 1e+50 best solution, best possible 41530.021 (125.38 seconds)
Cbc0010I After 300 nodes, 6 on tree, 1e+50 best solution, best possible 41530.021 (164.22 seconds)
Cbc0010I After 400 nodes, 9 on tree, 1e+50 best solution, best possible 41530.021 (200.14 seconds)
Cbc0010I After 500 nodes, 25 on tree, 1e+50 best solution, best possible 41530.021 (226.80 seconds)
Cbc0010I After 600 nodes, 47 on tree, 1e+50 best solution, best possible 41530.021 (253.21 seconds)
Cbc0010I After 700 nodes, 54 on tree, 1e+50 best solution, best possible 41530.021 (276.35 seconds)
Cbc0010I After 800 nodes, 54 on tree, 1e+50 best solution, best possible 41530.021 (298.77 seconds)
Cbc0010I After 900 nodes, 65 on tree, 1e+50 best solution, best possible 41530.021 (322.49 seconds)
Cbc0010I After 1000 nodes, 61 on tree, 1e+50 best solution, best possible 41530.021 (343.02 seconds)
Cbc0010I After 1100 nodes, 35 on tree, 1e+50 best solution, best possible 41984 (360.31 seconds)
Cbc0010I After 1200 nodes, 14 on tree, 1e+50 best solution, best possible 41984 (376.65 seconds)
Cbc0010I After 1300 nodes, 9 on tree, 1e+50 best solution, best possible 41984 (406.42 seconds)
Cbc0010I After 1400 nodes, 20 on tree, 1e+50 best solution, best possible 41984 (450.12 seconds)
Cbc0010I After 1500 nodes, 28 on tree, 1e+50 best solution, best possible 41984 (483.67 seconds)
Cbc0010I After 1600 nodes, 27 on tree, 1e+50 best solution, best possible 41984 (512.75 seconds)
Cbc0010I After 1700 nodes, 31 on tree, 1e+50 best solution, best possible 41984 (537.21 seconds)
Cbc0010I After 1800 nodes, 31 on tree, 1e+50 best solution, best possible 41984 (561.30 seconds)
Cbc0010I After 1900 nodes, 26 on tree, 1e+50 best solution, best possible 41984 (582.15 seconds)
Cbc0010I After 2000 nodes, 31 on tree, 1e+50 best solution, best possible 41984 (604.60 seconds)
Cbc0010I After 2100 nodes, 37 on tree, 1e+50 best solution, best possible 41984 (630.83 seconds)
Cbc0010I After 2200 nodes, 31 on tree, 1e+50 best solution, best possible 41984 (654.79 seconds)
Cbc0010I After 2300 nodes, 35 on tree, 1e+50 best solution, best possible 41984 (695.44 seconds)
Cbc0010I After 2400 nodes, 54 on tree, 1e+50 best solution, best possible 41984 (729.78 seconds)
Cbc0010I After 2500 nodes, 54 on tree, 1e+50 best solution, best possible 41984 (759.95 seconds)
Cbc0010I After 2600 nodes, 46 on tree, 1e+50 best solution, best possible 41984 (790.67 seconds)
Cbc0010I After 2700 nodes, 55 on tree, 1e+50 best solution, best possible 41984 (817.82 seconds)
Cbc0010I After 2800 nodes, 55 on tree, 1e+50 best solution, best possible 41984 (837.33 seconds)
Cbc0010I After 2900 nodes, 49 on tree, 1e+50 best solution, best possible 41984 (856.92 seconds)
Cbc0010I After 3000 nodes, 54 on tree, 1e+50 best solution, best possible 41984 (878.90 seconds)
Cbc0010I After 3100 nodes, 60 on tree, 1e+50 best solution, best possible 41984 (897.47 seconds)
Cbc0010I After 3200 nodes, 65 on tree, 1e+50 best solution, best possible 41984 (925.16 seconds)
Cbc0010I After 3300 nodes, 78 on tree, 1e+50 best solution, best possible 41984 (935.45 seconds)
Cbc0010I After 3400 nodes, 66 on tree, 1e+50 best solution, best possible 41984 (945.19 seconds)
Cbc0010I After 3500 nodes, 62 on tree, 1e+50 best solution, best possible 41984 (961.90 seconds)
Cbc0010I After 3600 nodes, 61 on tree, 1e+50 best solution, best possible 41984 (986.26 seconds)
Cbc0010I After 3700 nodes, 69 on tree, 1e+50 best solution, best possible 41984 (1005.54 seconds)
Cbc0010I After 3800 nodes, 60 on tree, 1e+50 best solution, best possible 41984 (1025.80 seconds)
Cbc0010I After 3900 nodes, 61 on tree, 1e+50 best solution, best possible 41984 (1051.35 seconds)
Cbc0010I After 4000 nodes, 70 on tree, 1e+50 best solution, best possible 41984 (1076.04 seconds)
Cbc0010I After 4100 nodes, 68 on tree, 1e+50 best solution, best possible 41984 (1097.94 seconds)
Cbc0010I After 4200 nodes, 77 on tree, 1e+50 best solution, best possible 41984 (1124.70 seconds)
Cbc0010I After 4300 nodes, 76 on tree, 1e+50 best solution, best possible 41984 (1155.13 seconds)
Cbc0010I After 4400 nodes, 85 on tree, 1e+50 best solution, best possible 41984 (1183.96 seconds)
Cbc0010I After 4500 nodes, 81 on tree, 1e+50 best solution, best possible 41984 (1211.15 seconds)
Cbc0010I After 4600 nodes, 74 on tree, 1e+50 best solution, best possible 41984 (1232.81 seconds)
Cbc0010I After 4700 nodes, 83 on tree, 1e+50 best solution, best possible 41984 (1262.13 seconds)
Cbc0010I After 4800 nodes, 83 on tree, 1e+50 best solution, best possible 41984 (1289.64 seconds)
Cbc0010I After 4900 nodes, 88 on tree, 1e+50 best solution, best possible 41984 (1324.81 seconds)
Cbc0010I After 5000 nodes, 86 on tree, 1e+50 best solution, best possible 41984 (1358.68 seconds)
Cbc0010I After 5100 nodes, 91 on tree, 1e+50 best solution, best possible 41998 (1395.33 seconds)
Cbc0010I After 5200 nodes, 92 on tree, 1e+50 best solution, best possible 41998 (1424.39 seconds)
Cbc0010I After 5300 nodes, 87 on tree, 1e+50 best solution, best possible 41998 (1449.96 seconds)
Cbc0010I After 5400 nodes, 85 on tree, 1e+50 best solution, best possible 41998 (1484.18 seconds)
Cbc0010I After 5500 nodes, 88 on tree, 1e+50 best solution, best possible 41998 (1516.89 seconds)
Cbc0010I After 5600 nodes, 88 on tree, 1e+50 best solution, best possible 41998 (1549.78 seconds)
Cbc0010I After 5700 nodes, 92 on tree, 1e+50 best solution, best possible 41998 (1582.59 seconds)
Cbc0010I After 5800 nodes, 94 on tree, 1e+50 best solution, best possible 41998 (1612.85 seconds)
Cbc0010I After 5900 nodes, 103 on tree, 1e+50 best solution, best possible 41998 (1642.58 seconds)
Cbc0010I After 6000 nodes, 100 on tree, 1e+50 best solution, best possible 41998 (1673.10 seconds)
Cbc0010I After 6100 nodes, 97 on tree, 1e+50 best solution, best possible 41998 (1704.12 seconds)
Cbc0010I After 6200 nodes, 97 on tree, 1e+50 best solution, best possible 41998 (1731.18 seconds)
Cbc0010I After 6300 nodes, 100 on tree, 1e+50 best solution, best possible 41998 (1756.73 seconds)
Cbc0010I After 6400 nodes, 98 on tree, 1e+50 best solution, best possible 41998 (1788.22 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 41998), took 5434248 iterations and 6440 nodes (1799.40 seconds)
Cbc0032I Strong branching done 25748 times (1822096 iterations), fathomed 334 nodes and fixed 4256 variables
Cbc0035I Maximum depth 324, 0 variables fixed on reduced cost
Cuts at root node changed objective from 35840 to 40824
Probing was tried 4840 times and created 247201 cuts of which 0 were active after adding rounds of cuts (15.447 seconds)
Gomory was tried 4250 times and created 11241 cuts of which 0 were active after adding rounds of cuts (23.469 seconds)
Knapsack was tried 17 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.023 seconds)
Clique was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.024 seconds)
MixedIntegerRounding2 was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.029 seconds)
FlowCover was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
TwoMirCuts was tried 4250 times and created 67169 cuts of which 0 were active after adding rounds of cuts (8.289 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.038 seconds)
ImplicationCuts was tried 35 times and created 22 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)

Result - Stopped on time limit

No feasible solution found
Lower bound:                    41998.000
Enumerated nodes:               6440
Total iterations:               5434248
Time (CPU seconds):             1799.40
Time (Wallclock seconds):       1821.35

Total time (CPU seconds):       1799.41   (Wallclock seconds):       1821.37

